{"test_name": "move_to_end", "response_0": "from Compiler.types import Array\n\ndef move_to_end(arr: Array(len(arr), arr.get_type()), index: int):\n    \"\"\"\n    Move the element with given index in the array to the end of the array.\n    The index is guaranteed to be legal.\n    \"\"\"\n    temp = arr[index]\n    for i in range(index+1,len(arr)):\n        arr[i-1] = arr[i]\n    arr[len(arr)-1] = temp\n    return arr\n", "response_1": "from Compiler.types import sint\n\ndef move_to_end(arr, index):\n    \"\"\"\n    Move the element with given index in the array to the end of the array.\n    The index is guaranteed to be legal.\n    \"\"\"\n    temp = arr[index]\n    for i in range(index+1, len(arr)):\n        arr[i - 1] = arr[i]\n    arr[len(arr) - 1] = temp\n    return arr\n", "model_name": "deepseek-ai/deepseek-coder-33b-instruct"}
{"test_name": "set_to_zero", "response_0": "from Compiler.types import Array\n\ndef set_to_zero(arr: Array, indices: Array):\n    \"\"\"\n    Set the elements in the input array with given indices to zero.\n    The input indices are guaranteed to be legal. \n    \"\"\"\n    for i in for_range(len(indices)):\n        arr[indices[i]] = 0\n    return arr\n", "response_1": "from Compiler.types import sint\n\ndef set_to_zero(arr,index):\n    \"\"\"\n    Set the element in the input array with given index to zero.\n    The input index is guaranteed to be legal. \n    \"\"\"\n    arr[index] = sint(0)\n    return arr\n", "model_name": "deepseek-ai/deepseek-coder-33b-instruct"}
{"test_name": "last_partial_sum", "response_0": "from Compiler.types import sint\n\ndef last_partial_sum(arr:sint.Array, n:sint):\n    ret = sint(0)\n    for i in range(len(arr) - int(n), len(arr)):\n        ret = ret + arr[i]\n    return ret\n", "response_1": "from Compiler.types import sint\nfrom Compiler.library import tree_reduce\n\ndef last_partial_sum(arr, n):\n    \"\"\"\n    Return the sum of the last n elements in the input array.\n    n is guaranteed to be legal.\n    \"\"\"\n    ret = tree_reduce(lambda x, y: x + y, arr[-n:])\n    return ret\n", "model_name": "deepseek-ai/deepseek-coder-33b-instruct"}
{"test_name": "permute_by_indices", "response_0": "from Compiler.types import sint, Array\n\ndef permute_by_indices(a,indices):\n    \"\"\"\n    Permute the input array a by the indices. \n    The i'th element in the returned array will be a[indices[i]]. \n    The input indices are guaranteed to be a legal permutation. \n    \"\"\"\n    ret = Array(len(a),sint)\n    for i in range(len(a)):\n        ret[i] = a[indices[i]]\n    return ret\n", "response_1": "def permute_by_indices(a,indices):\n    \"\"\"\n    Permute the input array a by the indices. \n    The i'th element in the returned array will be a[indices[i]]. \n    The input indices are guaranteed to be a legal permutation. \n    \"\"\"\n    ret = a.Array(len(a))\n    for i in range(len(a)):\n        ret[i] = a[indices[i]]\n    return ret\n", "model_name": "deepseek-ai/deepseek-coder-33b-instruct"}
{"test_name": "get_rank", "response_0": "import Compiler.types as types\n\ndef get_rank(arr: types.Array, index: int):\n    \"\"\"\n    Get the rank in the array of the element (how many elements are smaller than the element) with given index. \n    \"\"\"\n    rank = types.sint(0)\n    for i in range(len(arr)):\n        rank += arr[i] < arr[index]\n    return rank\n", "response_1": "def get_rank(arr,index):\n    \"\"\"\n    Get the rank in the array of the element (how many elements are smaller than the element) with given index. \n    \"\"\"\n    rank = sint(0)\n    for i in range(len(arr)):\n        rank += arr[i].bit_lt(arr[index])\n    return rank\n", "model_name": "deepseek-ai/deepseek-coder-33b-instruct"}
{"test_name": "interchange_by_indices", "response_0": "def interchange_by_indices(arr, index1, index2):\n    \"\"\"\n    Interchange the two elements in the array with given indices. \n    The input indices are guaranteed to be legal. \n    \"\"\"\n    temp = mpc.input_types.sfix(0)\n    for i in range(len(arr)):\n        if i == index1:\n            temp = arr[i]\n            arr[i] = arr[index2]\n        elif i == index2:\n            arr[i] = temp\n    return arr\n", "response_1": "from Compiler.types import sfix, sint\nfrom Compiler.library import for_range\n\ndef interchange_by_indices(arr,index1,index2):\n    \"\"\"\n    Interchange the two elements in the array with given indices. \n    The input indices are guaranteed to be legal. \n    \"\"\"\n    temp = arr[index1]\n    arr[index1] = arr[index2]\n    arr[index2] = temp\n    return arr\n\n", "model_name": "deepseek-ai/deepseek-coder-33b-instruct"}
{"test_name": "increase_by", "response_0": "from Compiler.types import sfix, sint\n\ndef increase_by(arr: sint, index: sint, k: sfix):\n    \"\"\"\n    Increase the element arr[index] in the array arr by k.\n    \"\"\"\n    arr[index] += k\n    return arr\n", "response_1": "def increase_by(arr, index, k):\n    \"\"\"\n    Increase the element arr[index] in the array arr by k.\n    \"\"\"\n    arr[index] += k\n    return arr\n", "model_name": "deepseek-ai/deepseek-coder-33b-instruct"}
{"test_name": "count_element_frequency", "response_0": "def count_element_frequency(l):\n    \"\"\"\n    Return an array with the same size of the original array, \n    each position of which records the number of occurrences of the element at the same position. \n    \"\"\"\n    from Compiler.types import sint\n\n    ret = sint.Array(len(l))\n    for i in range(len(l)):\n        for j in range(len(l)):\n            if l[j]==l[i]:\n                ret[i] = ret[i] + sint(1)\n    return ret\n", "response_1": "import Compiler.types\n\ndef count_element_frequency(l):\n    \"\"\"\n    Return an array with the same size of the original array, \n    each position of which records the number of occurrences of the element at the same position. \n    \"\"\"\n    ret = Compiler.types.sint.Array(len(l))\n    ret.assign_all(0)\n\n    for i in range(len(l)):\n        for j in range(len(l)):\n            if l[j]==l[i]:\n                ret[i] = ret[i] + 1\n    return ret\n", "model_name": "deepseek-ai/deepseek-coder-33b-instruct"}
{"test_name": "retrieve_by_index", "response_0": "from Compiler.types import sfix, sint, Array\n\ndef retrieve_by_index(arr,index):\n    \"\"\"\n    Retrieve the element in the array by index.\n    The input index is guaranteed to be legal. \n    \"\"\"\n    return arr[index]\n", "response_1": "import Compiler.types\n\ndef retrieve_by_index(arr,index):\n    \"\"\"\n    Retrieve the element in the array by index.\n    The input index is guaranteed to be legal. \n    \"\"\"\n    return arr[index]\n", "model_name": "deepseek-ai/deepseek-coder-33b-instruct"}
{"test_name": "scale_by", "response_0": "from Compiler.types import sint\n\ndef scale_by(arr, index, k):\n    \"\"\"\n    Multiply the element arr[index] in the array arr by k.\n    \"\"\"\n    arr[index] = arr[index] * k\n    return arr\n", "response_1": "from Compiler.types import sint\n\ndef scale_by(arr: sint.Array, index: sint, k: sint) -> sint.Array:\n    \"\"\"\n    Multiply the element arr[index] in the array arr by k.\n    \"\"\"\n    arr[index] *= k\n    return arr\n", "model_name": "deepseek-ai/deepseek-coder-33b-instruct"}
{"test_name": "take_opposite_to", "response_0": "from Compiler.types import sint\n\ndef take_opposite_to(arr: sint.Array, index: sint.sint) -> sint.Array:\n    \"\"\"\n    Take opposite to the element in the array with given index. \n    The input index is guaranteed to be legal. \n    \"\"\"\n    arr[index] = -arr[index]\n    return arr\n", "response_1": "from Compiler.types import Array\nfrom Compiler.types import sint\n\ndef take_opposite_to(arr: Array, index: int) -> Array:\n    \"\"\"\n    Take opposite to the element in the array with given index. \n    The input index is guaranteed to be legal. \n    \"\"\"\n    arr[index] = -arr[index]\n    return arr\n", "model_name": "deepseek-ai/deepseek-coder-33b-instruct"}
{"test_name": "get_subarr_by_indices", "response_0": "from Compiler.types import sint, Array\n\ndef get_subarr_by_indices(a, indices):\n    \"\"\"\n    Get the subarray of the input array indicated by the indices.\n    The inputs are guaranteed to be legal.\n    \"\"\"\n    ret = Array(len(indices), sint)\n    for i in range(len(indices)):\n        ret[i] = a[indices[i]]\n    return ret\n", "response_1": "from Compiler.types import sint\n\ndef get_subarr_by_indices(a: sint.Array, indices: sint.Array):\n    \"\"\"\n    Get the subarray of the input array indicated by the indices.\n    The inputs are guaranteed to be legal.\n    \"\"\"\n    ret = sint.Array(len(indices))\n    for i in range(len(indices)):\n        ret[i] = a[indices[i]]\n    return ret\n", "model_name": "deepseek-ai/deepseek-coder-33b-instruct"}
{"test_name": "array_rank", "response_0": "from Compiler.types import sint\n\ndef array_rank(l):\n    \"\"\"\n    Return an array with the same size of the original array, \n    each position of which records the number of elements smaller than the element at the same position. \n    \"\"\"\n    ret = sint.Array(len(l)).assign_all(0)\n    for i in range(len(l)):\n        for j in range(len(l)):\n            ret[i] += (l[j] < l[i])\n    return ret\n", "response_1": "def array_rank(l):\n    \"\"\"\n    Return an array with the same size of the original array, \n    each position of which records the number of elements smaller than the element at the same position. \n    \"\"\"\n    ret = sint.Array(len(l))\n    for_range(len(l), lambda i: ret[i] = sum(l[j] < l[i] for j in range(len(l))))\n    return ret\n", "model_name": "deepseek-ai/deepseek-coder-33b-instruct"}
{"test_name": "remove_by_index", "response_0": "from Compiler.types import *\n\ndef remove_by_index(arr, index):\n    assert isinstance(arr, Array), \"arr must be of type Array\"\n    assert isinstance(index, sint), \"index must be of type sint\"\n    length = len(arr)\n    assert index >= 0 and index < length, \"Index out of range\"\n\n    ret = Array(length - 1, sint)\n    ret.assign_vector(arr[:index], 0)  # copy elements before index\n    ret.assign_vector(arr[index+1:], index)  # copy elements after index\n\n    return ret\n", "response_1": "from Compiler.types import sint\n\ndef remove_by_index(arr: sint.Array, index: sint):\n    \"\"\"\n    Remove the element in the array by index and return the remaining array.\n    The input index is guaranteed to be legal.\n    \"\"\"\n    ret = sint.Array(len(arr)-1)\n    for i in range(len(arr)):\n        if i < index:\n            ret[i] = arr[i]\n        elif i > index:\n            ret[i-1] = arr[i]\n    return ret\n", "model_name": "deepseek-ai/deepseek-coder-33b-instruct"}
{"test_name": "process_by_index", "response_0": "from Compiler.types import Array, sfix\nfrom Compiler.library import tree_reduce\n\ndef process_by_index(arr,index,func):\n    \"\"\"\n    Process the element in the input array with given index.\n    The input index is guaranteed to be legal. \n    \"\"\"\n    arr = Array(len(arr), sfix)\n    arr[index] = func(arr.get_part(index, 1)[0])\n    return arr\n", "response_1": "from Compiler.types import Array\n\ndef process_by_index(arr: Array, index: int, func) -> Array:\n    \"\"\"\n    Process the element in the input array with given index.\n    The input index is guaranteed to be legal. \n    \"\"\"\n    arr[index] = func(arr[index])\n    return arr\n", "model_name": "deepseek-ai/deepseek-coder-33b-instruct"}
{"test_name": "sum_by_indices", "response_0": "from Compiler.types import sint\n\ndef sum_by_indices(arr,indices):\n    \"\"\"\n    Compute the sum of elements in the array with given indices.\n    The input indices are guaranteed to be legal. \n    \"\"\"\n    sum_ = sint(0)\n    for index in indices:\n        sum_ = sum_ + arr[index]\n    return sum_\n", "response_1": "from Compiler.types import sint\n\ndef sum_by_indices(arr, indices):\n    \"\"\"\n    Compute the sum of elements in the array with given indices.\n    The input indices are guaranteed to be legal.\n    \"\"\"\n    sum = sint(0)\n    for index in indices:\n        sum = sum + arr[index]\n    return sum\n", "model_name": "deepseek-ai/deepseek-coder-33b-instruct"}
