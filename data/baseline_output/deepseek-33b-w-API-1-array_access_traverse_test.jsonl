{"test_name": "indicate_positive", "response_0": "from Compiler.types import sint, Array, MemValue\n\ndef indicate_positive(arr):\n    \"\"\"\n    For the given array, return an array with the same size. \n    If one element in the input array is positive, \n    then the corresponding element in the returned array will be 1, \n    otherwise the element in the returned array will be 0. \n    \"\"\"\n    ret = Array(len(arr), sint)\n    for i in range(len(arr)):\n        if arr[i] > 0:\n            ret[i] = 1\n        else:\n            ret[i] = 0\n    return ret\n", "response_1": "def indicate_positive(arr):\n    \"\"\"\n    For the given array, return an array with the same size. \n    If one element in the input array is positive, \n    then the corresponding element in the returned array will be 1, \n    otherwise the element in the returned array will be 0. \n    \"\"\"\n    import Compiler.types as types\n    ret = types.Array(len(arr), types.sint)\n    for i in range(len(arr)):\n        if arr[i]>0:\n            ret[i] = types.sint(1)\n        else:\n            ret[i] = types.sint(0)\n    return ret\n", "model_name": "deepseek-ai/deepseek-coder-33b-instruct"}
{"test_name": "array_xor", "response_0": "from Compiler.types import sfix, sint, Array\n\ndef array_xor(a,b):\n    \"\"\"\n    Compute the elementwise XOR of the two input vectors.  \n    \"\"\"\n    ret = sint.Array(len(a))\n    for i in range(len(a)):\n        ret[i] = a[i].bit_xor(b[i])\n    return ret\n", "response_1": "import numpy as np\nfrom Compiler.types import *\n\ndef array_xor(a: Array(len(a), sint), b: Array(len(b), sint)) -> Array(len(a), sint):\n    \"\"\"\n    Compute the elementwise XOR of the two input vectors.  \n    \"\"\"\n    assert len(a) == len(b)\n    ret = Array(len(a), sint)\n    for i in range(len(ret)):\n        ret[i] = a[i] & b[i]\n    return ret\n\na = np.array([1, 2, 3])\nb = np.array([4, 5, 6])\n\ninput_a = Array.create_from(a)\ninput_b = Array.create_from(b)\n\nresult = array_xor(input_a, input_b)\noutput = [result[i] for i in range(len(result))]\n\nprint(output)\n", "model_name": "deepseek-ai/deepseek-coder-33b-instruct"}
{"test_name": "interlaced_placement", "response_0": "from Compiler.types import Array\n\ndef interlaced_placement(a,b):\n    \"\"\"\n    Interleave the elements in two sequences.\n    The two input arrays are guaranteed to have the same length. \n    \"\"\"\n    ret = Array(len(a)*2)\n    for i in range(len(a)*2):\n        if i%2:\n            ret[i] = b[(i-1)//2]\n        else:\n            ret[i] = a[i//2]\n    return ret\n", "response_1": "", "model_name": "deepseek-ai/deepseek-coder-33b-instruct"}
{"test_name": "array_and", "response_0": "from Compiler.types import sint\n\ndef array_and(a: sint.Array, b: sint.Array) -> sint.Array:\n    \"\"\"\n    Compute the elementwise AND of the two input vectors.\n    \"\"\"\n    assert len(a) == len(b)\n    ret = sint.Array(len(a))\n    for i in range(len(a)):\n        ret[i] = a[i].bit_and(b[i])\n    return ret\n", "response_1": "from Compiler.types import sint\n\ndef array_and(a,b):\n    \"\"\"\n    Compute the elementwise AND of the two input vectors. \n    \"\"\"\n    ret = sint.Array(len(a))\n    for i in range(len(ret)):\n        ret[i] = a[i].bit_and(b[i])\n    return ret\n", "model_name": "deepseek-ai/deepseek-coder-33b-instruct"}
{"test_name": "array_indicator", "response_0": "def array_indicator(arr,predicator):\n    \"\"\"\n    Return an array with the same size of the input array. \n    For each element in the input array, \n    the corresponding value in the returned array is set to be the value of the predicator. \n    \"\"\"\n    ret = Compiler.types.Array(len(arr), 'sbitint')\n    for i in range(len(arr)):\n        ret[i] = predicator(arr[i])\n    return ret\n", "response_1": "from Compiler.types import sint, Array\n\ndef array_indicator(arr: Array(sint), predicator):\n    \"\"\"\n    Return an array with the same size of the input array. \n    For each element in the input array, \n    the corresponding value in the returned array is set to be the value of the predicator. \n    \"\"\"\n    ret = Array(len(arr), sint)\n    for i in range(len(arr)):\n        ret[i] = predicator(arr[i])\n    return ret\n", "model_name": "deepseek-ai/deepseek-coder-33b-instruct"}
{"test_name": "array_greater_than_scalar", "response_0": "from Compiler.types import *\nfrom Compiler.library import tree_reduce\n\ndef array_greater_than_scalar(arr, bound):\n    \"\"\"\n    Given an input array and a bound, \n    return an array indicating whether each element is greater than the bound. \n    \"\"\"\n    ret = [False for i in range(len(arr))]\n    ret = sint.Array(len(arr))\n    for i in range(len(arr)):\n        ret[i] = arr[i] > bound\n    return ret\n", "response_1": "from Compiler.types import *\n\ndef array_greater_than_scalar(arr: sint.Array, bound: sint):\n    \"\"\"\n    Given an input array and a bound, \n    return an array indicating whether each element is greater than the bound. \n    \"\"\"\n    ret = [False for i in range(len(arr))]\n    for i in range(len(arr)):\n        ret[i] = arr[i]>bound\n    return ret\n", "model_name": "deepseek-ai/deepseek-coder-33b-instruct"}
{"test_name": "array_no_greater_than_scalar", "response_0": "def array_no_greater_than_scalar(arr, bound):\n    \"\"\"\n    Given an input array and a bound, \n    return an array indicating whether each element is no greater than the bound. \n    \"\"\"\n    ret = arr.Array(len(arr))\n    for i in range(len(arr)):\n        ret[i] = arr[i] <= bound\n    return ret\n", "response_1": "from Compiler.types import sint\n\ndef array_no_greater_than_scalar(arr: sint.Array, bound: sint) -> sint.Array:\n    \"\"\"\n    Given an input array and a bound, \n    return an array indicating whether each element is no greater than the bound. \n    \"\"\"\n    ret = sint.Array(len(arr))\n    ret.assign_all(False)\n    for i in range(len(arr)):\n        ret[i] = arr[i] <= bound\n    return ret\n", "model_name": "deepseek-ai/deepseek-coder-33b-instruct"}
{"test_name": "reverse_and_concat", "response_0": "from Compiler.types import Array\nfrom Compiler.library import len\n\ndef reverse_and_concat(a: Array):\n    \"\"\"\n    Reverse the input array and concatenate it to the original array. \n    \"\"\"\n    b = a.get_reverse_vector()\n    return a.concat(b)\n", "response_1": "from Compiler.types import Array\n\ndef reverse_and_concat(a: Array):\n    \"\"\"\n    Reverse the input array and concatenate it to the original array. \n    \"\"\"\n    b = a.get_reverse_vector()\n    return a.concat(b)\n", "model_name": "deepseek-ai/deepseek-coder-33b-instruct"}
{"test_name": "array_round", "response_0": "from Compiler.types import sfix, sint, MemValue\nfrom Compiler.library import tree_reduce\nimport math\n\ndef round_sint_sfix(x):\n    \"\"\"\n    Round sfix/sint to nearest integer.\n    \"\"\"\n    return math.floor(x+0.5) if x>=0 else -math.floor(-x+0.5)\n\ndef array_round(arr):\n    \"\"\"\n    Round every element in the array to the nearest integer.\n    \"\"\"\n    ret = [round_sint_sfix(x) for x in arr]\n    return ret\n\n", "response_1": "from Compiler.types import sint, sfix\nfrom Compiler.library import tree_reduce\n\ndef array_round(arr):\n    \"\"\"\n    Round every element in the array to the nearest integer.\n    \"\"\"\n    ret = [0 for i in range(len(arr))]\n    for i in range(len(arr)):\n        ret[i] = sint.bit_and(arr[i], 0x7FFFFFFF) + sint.bit_and(sint(0.5) + arr[i], 0x7FFFFFFF)\n    return ret\n", "model_name": "deepseek-ai/deepseek-coder-33b-instruct"}
{"test_name": "array_greater_eq", "response_0": "from Compiler.types import sint\n\ndef array_greater_eq(arr, brr):\n    \"\"\"\n    For the two input arrays arr and brr, return an array ret with the same size. \n    For index i, if arr[i]>b=rr[i], ret[i] will be set to 1, otherwise ret[i] will be set to 0. \n    The two input arrays are guaranteed to have the same length. \n    \"\"\"\n    ret = sint.Array(len(arr))\n    for i in range(len(arr)):\n        ret[i] = 1 if arr[i]>=brr[i] else 0\n    return ret\n", "response_1": "import Compiler.types as t\n\ndef array_greater_eq(arr,brr):\n    \"\"\"\n    For the two input arrays arr and brr, return an array ret with the same size. \n    For index i, if arr[i]>b=rr[i], ret[i] will be set to 1, otherwise ret[i] will be set to 0. \n    The two input arrays are guaranteed to have the same length. \n    \"\"\"\n    ret = t.sint.Array(len(arr))\n    ret.assign_all(0)\n    for i in range(len(arr)):\n        ret[i] = arr[i].bit_and(brr[i].bit_not())\n    return ret\n", "model_name": "deepseek-ai/deepseek-coder-33b-instruct"}
{"test_name": "reverse", "response_0": "from Compiler.types import sint\n\ndef reverse_mpspdz(arr):\n    \"\"\"\n    Reverse the MP-SPDZ array. \n    \"\"\"\n    ret = sint.Array(len(arr))\n    for i in range(len(arr)):\n        ret[i] = arr[len(arr)-1-i]\n    return ret\n", "response_1": "def reverse(arr):\n    \"\"\"\n    Reverse the array. \n    \"\"\"\n    ret = arr.get_reverse_vector()\n    return ret\n", "model_name": "deepseek-ai/deepseek-coder-33b-instruct"}
{"test_name": "indicate_negative", "response_0": "from Compiler.types import Array, sint\n\ndef indicate_negative(arr):\n    \"\"\"\n    For the given array, return an array with the same size. \n    If one element in the input array is negative, \n    then the corresponding element in the returned array will be 1, \n    otherwise the element in the returned array will be 0. \n    \"\"\"\n    ret = Array(len(arr), sint)\n    for i in range(len(arr)):\n        ret[i] = sint(0)\n        ret[i] = sint(1) if arr[i] < sint(0) else ret[i]\n    return ret\n", "response_1": "from Compiler.types import sint, sfix, Array\n\ndef indicate_negative(arr):\n    \"\"\"\n    For the given array, return an array with the same size. \n    If one element in the input array is negative, \n    then the corresponding element in the returned array will be 1, \n    otherwise the element in the returned array will be 0. \n    \"\"\"\n    ret = Array(len(arr), sfix)\n    for i in range(len(arr)):\n        if arr[i]<0:\n            ret[i] = sfix(1.0)\n        else:\n            ret[i] = sfix(0.0)\n    return ret\n", "model_name": "deepseek-ai/deepseek-coder-33b-instruct"}
{"test_name": "max_sub_sequence", "response_0": "from Compiler.types import *\nfrom Compiler.library import *\n\ndef max_sub_sequence(arr):\n    \"\"\"\n    Use dynamic programming to find the sum of max continuous subsequence of the input array.\n    \"\"\"\n    partial_max = sint.Array(len(arr))\n    suffix_max = sint.Array(len(arr))\n    partial_max[0] = arr[0]\n    suffix_max[0] = arr[0]\n    for i in range(1,len(arr)):\n        suffix_max[i] = suffix_max[i-1]+arr[i] if suffix_max[i-1]>=0 else arr[i]\n        partial_max[i] = partial_max[i-1] if partial_max[i-1]>=suffix_max[i] else suffix_max[i]\n    return partial_max[len(arr)-1]\n\narr = sint.Array(5)  # An MP-SPDZ array of size 5\nresult = max_sub_sequence(arr)\n", "response_1": "from Compiler.types import sint\n\ndef max_sub_sequence(arr):\n    \"\"\"\n    Use dynamic programming to find the sum of max continuous subsequence of the input array.\n    \"\"\"\n    partial_max = sint.Array(len(arr))\n    suffix_max = sint.Array(len(arr))\n    partial_max[0] = arr[0]\n    suffix_max[0] = arr[0]\n    for i in range(1, len(arr)):\n        suffix_max[i] = (suffix_max[i-1] + arr[i]).if_else(suffix_max[i-1]>=0, arr[i])\n        partial_max[i] = partial_max[i-1].if_else(partial_max[i-1]>=suffix_max[i], partial_max[i-1])\n    return partial_max[len(arr)-1]\n", "model_name": "deepseek-ai/deepseek-coder-33b-instruct"}
{"test_name": "compare_and_select", "response_0": "from Compiler.types import sint\n\ndef compare_and_select(a,b):\n    \"\"\"\n    Compare the two arrays elementwise, \n    and save the larger value into the returned array. \n    \"\"\"\n    ret_array = sint.Array(len(a))\n    for i in range(len(a)):\n        ret_array[i] = a[i].bit_and(b[i]) + a[i].bit_xor(b[i])\n\n    return ret_array\n", "response_1": "import Compiler.types\nfrom Compiler.types import sfix, sint\n\ndef compare_and_select(a, b):\n    \"\"\"\n    Compare the two arrays elementwise, \n    and save the larger value into the returned array. \n    \"\"\"\n    ret_array = sint.Array(len(a))\n    for i in range(len(a)):\n        ret_array[i] = sfix.if_else(a[i] > b[i], a[i], b[i])\n\n    return ret_array\n", "model_name": "deepseek-ai/deepseek-coder-33b-instruct"}
{"test_name": "count_element_frequency", "response_0": "from Compiler.types import sint, Array\nfrom Compiler.library import tree_reduce\nfrom Compiler.oram import OptimalORAM\nfrom Compiler.sqrt_oram import SqrtOram\nfrom Compiler.sorting import radix_sort\n\ndef count_element_frequency_mpspdz(l):\n    \"\"\"\n    Return an array with the same size of the original array, \n    each position of which records the number of occurrences of the element at the same position. \n    \"\"\"\n    ret = Array(len(l), sint)\n    for i in range(len(l)):\n        for j in range(len(l)):\n            ret[i] = ret[i] + (l[j]==l[i])\n    return ret\n", "response_1": "Compiler.types module\n=====================\n\nCompiler.library module\n=======================\n\nfrom Compiler.types import *\nfrom Compiler.library import *\n\ndef count_element_frequency(l):\n    \"\"\"\n    Return an array with the same size of the original array, \n    each position of which records the number of occurrences of the element at the same position. \n    \"\"\"\n    ret = sint.Array(len(l))\n    ret.assign_all(0)\n    for i in range(len(l)):\n        for j in range(len(l)):\n            ret[i] = ret[i] + sint(l[j]==l[i])\n    return ret\n\n", "model_name": "deepseek-ai/deepseek-coder-33b-instruct"}
{"test_name": "array_or", "response_0": "def array_or(a: sint.Array, b: sint.Array) -> sint.Array:\n    \"\"\"\n    Compute the elementwise OR of the two input vectors. \n    \"\"\"\n    ret = sint.Array(len(a))\n    ret.assign_all(0)\n    for i in range(len(ret)):\n        ret[i] = a[i].bit_or(b[i])\n    return ret\n", "response_1": "from Compiler.types import sint, Array\n\ndef array_or(a: Array(sint, len(a)), b: Array(sint, len(b))):\n    \"\"\"\n    Compute the elementwise OR of the two input vectors. \n    \"\"\"\n    ret = Array(len(a))\n    ret.assign_all(sint(0))\n    for i in range(len(ret)):\n        ret[i] = a[i].bit_or(b[i])\n    return ret\n", "model_name": "deepseek-ai/deepseek-coder-33b-instruct"}
{"test_name": "stock_predicator", "response_0": "from Compiler.types import sfix, sint, Array\n\ndef stock_predicator(days):\n    days_length = len(days)\n    lowest = Array(days_length, sfix)\n    partial_max = Array(days_length, sfix)\n    lowest[0] = days[0]\n    for i in range(1, days_length):\n        lowest[i] = lowest[i - 1] if lowest[i - 1] <= days[i] else days[i]\n        partial_max[i] = partial_max[i - 1] if partial_max[i - 1] >= days[i] - lowest[i - 1] else days[i] - lowest[i - 1]\n    return partial_max[days_length - 1]\n", "response_1": "from Compiler.types import sint, cint\nfrom Compiler.library import tree_reduce\n\ndef stock_predictor(days):\n    lowest = sint.Array(len(days))\n    partial_max = sint.Array(len(days))\n    lowest[0] = days[0]\n    for i in range(1,len(days)):\n        lowest[i] = sint.min(lowest[i-1], days[i])\n        partial_max[i] = sint.max(partial_max[i-1], days[i]-lowest[i-1])\n    return partial_max[len(days)-1]\n", "model_name": "deepseek-ai/deepseek-coder-33b-instruct"}
{"test_name": "len5_inc_array", "response_0": "from Compiler.types import Array, sint\n\ndef len5_inc_array(init):\n    \"\"\"\n    Return an increase-by-one array with given initial element and length 5.\n    \"\"\"\n    ret = Array(5, sint)\n    for i in range(5):\n        ret[i] = init + sint(i)\n    return ret\n", "response_1": "from Compiler.types import *\nimport Compiler.GC.types\nimport Compiler.library\n\ndef len5_inc_array(init):\n    \"\"\"\n    Return an increase-by-one array with given initial element and length 5.\n    \"\"\"\n    ret = sint.Array(5)\n    for i in range(5):\n        ret[i] = init + i\n    return ret\n", "model_name": "deepseek-ai/deepseek-coder-33b-instruct"}
{"test_name": "cut_first_five", "response_0": "from Compiler.types import Array\n\ndef cut_first_five(arr):\n    \"\"\"\n    Return the array composed of the first 5 elements of the input array. \n    If the input array does not have 5 elements, pad with 0.\n    \"\"\"\n    length = len(arr)\n    ret = Array.create_from([0]*5)\n    for i in range(min(5,length)):\n        ret[i] = arr[i]\n    return ret\n", "response_1": "def cut_first_five(arr):\n    \"\"\"\n    Return the array composed of the first 5 elements of the input array. \n    If the input array does not have 5 elements, pad with 0.\n    \"\"\"\n    ret = sint.Array(5)\n    ret.assign_all(0)\n    for i in range(min(5,len(arr))):\n        ret[i] = arr[i]\n    return ret\n", "model_name": "deepseek-ai/deepseek-coder-33b-instruct"}
{"test_name": "max_pooling_1d", "response_0": "from Compiler.types import Array, sfix, sint\n\ndef max_pooling_1d(vec, step):\n    \"\"\"\n    Do 1-dimensional max pooling on vec with step. \n    Ignoring the remaining elements in the vector.\n    \"\"\"\n    ret_length = len(vec)//step\n    ret = Array(ret_length, sfix)\n\n    for i in range(ret_length):\n        max = vec[i*step]\n        for j in range(step):\n            if vec[i*step+j] > max:\n                max = vec[i*step+j]\n        ret[i] = max\n    return ret\n", "response_1": "ret = sint.Array(ret_length)\n", "model_name": "deepseek-ai/deepseek-coder-33b-instruct"}
{"test_name": "array_greater", "response_0": "import Compiler.types as ct\n\ndef array_greater(arr, brr):\n    ret = ct.sint.Array(len(arr))\n    ret.assign_all(0)\n    for i in range(len(arr)):\n        ret[i] = (arr[i] > brr[i]).if_else(1, 0)\n    return ret\n", "response_1": "from Compiler.types import sfix, sint\n\ndef array_greater(arr,brr):\n    \"\"\"\n    For the two input arrays arr and brr, return an array ret with the same size. \n    For index i, if arr[i]>brr[i], ret[i] will be set to 1, otherwise ret[i] will be set to 0. \n    The two input arrays are guaranteed to have the same length. \n    \"\"\"\n    ret = sint.Array(len(arr))\n    for i in range(len(arr)):\n        if arr[i] > brr[i]:\n            ret[i] = 1\n        else:\n            ret[i] = 0\n    return ret\n", "model_name": "deepseek-ai/deepseek-coder-33b-instruct"}
{"test_name": "dumb_concat", "response_0": "def dumb_concat(arr, brr):\n    length = len(arr) + len(brr)\n    ret = sint.Array(length)\n    for i in range(len(arr)):\n        ret[i] = arr[i]\n    for j in range(len(brr)):\n        ret[len(arr) + j] = brr[j]\n    return ret\n", "response_1": "from Compiler.types import Array\n\ndef dumb_concat(arr, brr):\n    \"\"\"\n    Concatenate the second array to the first array in a dumb way.\n    \"\"\"\n    length = arr.length + brr.length\n    ret = Array(length)\n    for i in range(arr.length):\n        ret[i] = arr[i]\n    for j in range(brr.length):\n        ret[arr.length + j] = brr[j]\n    return ret\n", "model_name": "deepseek-ai/deepseek-coder-33b-instruct"}
{"test_name": "indicator_if_else", "response_0": "", "response_1": "from Compiler.types import sint, Array\n\ndef indicator_if_else(a: Array, b: Array, ind: Array):\n    \"\"\"\n    Return an array c with the same length of a and b. \n    The element of c is set to be the corresponding element of a if the indicator is 1, \n    and is set to be the corresponding element of b if the indicator is 0.\n    \"\"\"\n    return (ind.bit_not().if_else(a, b))\n", "model_name": "deepseek-ai/deepseek-coder-33b-instruct"}
{"test_name": "elementwise_multiplication", "response_0": "from Compiler.types import sint\n\ndef elementwise_multiplication(a,b):\n    \"\"\"\n    Compute the elementwise multiplication of the two input vectors. \n    \"\"\"\n    ret = sint.Array(len(a))\n    for i in range(len(ret)):\n        ret[i] = a[i]*b[i]\n    return ret\n", "response_1": "import Compiler.types as sint\n\ndef elementwise_multiplication(a, b):\n    \"\"\"\n    Compute the elementwise multiplication of the two input vectors. \n    \"\"\"\n    ret = sint.Array(len(a))\n    for i in range(len(ret)):\n        ret[i] = a[i] * b[i]\n    return ret\n", "model_name": "deepseek-ai/deepseek-coder-33b-instruct"}
{"test_name": "get_subarr_by_indices", "response_0": "def get_subarr_by_indices(a, indices):\n    \"\"\"\n    Get the subarray of the input array indicated by the indices. \n    The inputs are guaranteed to be legal.\n    \"\"\"\n    ret = Compiler.types.Array(len(indices))\n    for i in range(len(indices)):\n        ret[i] = a[indices[i]]\n    return ret\n", "response_1": "import Compiler.types as ct\n\ndef get_subarr_by_indices(a, indices):\n    \"\"\"\n    Get the subarray of the input array indicated by the indices. \n    The inputs are guaranteed to be legal.\n    \"\"\"\n    assert isinstance(a, ct.Array), \"a must be an Array\"\n    assert isinstance(indices, ct.Array), \"indices must be an Array\"\n\n    ret = ct.Array(len(indices))\n    for i in range(len(indices)):\n        ret[i] = a[indices[i]]\n    return ret\n", "model_name": "deepseek-ai/deepseek-coder-33b-instruct"}
{"test_name": "inc_array", "response_0": "import Compiler.types as types\n\ndef inc_array(num):\n    \"\"\"\n    Return an array with length num and elements 1 to num.\n    The input is guaranteed to be a cleartext positive integer.\n    \"\"\"\n    arr = types.sfix.Array(num)\n    for i in range(num):\n        arr[i] = i + 1\n    return arr\n", "response_1": "def inc_array(num):\n    \"\"\"\n    Return an array with length num and elements 1 to num. \n    The input is guaranteed to be a cleartext positive integer.\n    \"\"\"\n    arr = sint.Array(num)\n    arr.assign_vector(list(range(1, num+1)))\n    return arr\n", "model_name": "deepseek-ai/deepseek-coder-33b-instruct"}
{"test_name": "cut_last_five", "response_0": "from Compiler.types import Array, sfix, sint\n\ndef cut_last_five(arr):\n    ret = Array(5, sint)\n    ret.assign_all(sint(0))\n\n    for i in range(min(5,len(arr))):\n        ret[4-i] = arr[len(arr)-1-i]\n    return ret\n", "response_1": "from Compiler.types import sint\n\ndef cut_last_five(arr):\n    \"\"\"\n    Return the array composed of the last 5 elements of the input array. \n    If the input array does not have 5 elements, pad with 0 (at the beginning).\n    \"\"\"\n    ret = sint.Array(5).assign_all(0)\n    for i in range(min(5,len(arr))):\n        ret[4-i] = arr[len(arr)-1-i]\n    return ret\n", "model_name": "deepseek-ai/deepseek-coder-33b-instruct"}
{"test_name": "average_pooling_1d", "response_0": "from Compiler.types import sfix, sint, Matrix, secure_initialize, cint\n\ndef secure_average_pooling_1d(vec,step):\n    \"\"\"\n    Do 1-dimensional average pooling on vec with step.\n    Ignoring the remaining elements in the vector.\n    \"\"\"\n    vec_length = len(vec)\n    ret_length = vec_length//step\n    ret = secure_initialize(sint, ret_length)\n    \n    for i in range(ret_length):\n        avg = secure_initialize(sfix, f=20)\n        for j in range(step):\n            avg += sfix.get_random(0,1) # to implement division by step\n            avg /= sfix.get_random(0,1)\n        ret[i] = avg\n    return ret\n", "response_1": "from Compiler.types import sint, sfix\n\ndef average_pooling_1d(vec: sint, step: sint) -> sint:\n    \"\"\"\n    Do 1-dimensional average pooling on vec with step. \n    Ignoring the remaining elements in the vector.\n    \"\"\"\n    ret_length = len(vec)//step\n    ret = sint.Array(ret_length)\n    for i in range(len(ret)):\n        avg = sfix(0, 0)\n        for j in range(step):\n            avg += sfix(vec[i*step+j])/sfix(step)\n        ret[i] = avg\n    return ret\n", "model_name": "deepseek-ai/deepseek-coder-33b-instruct"}
{"test_name": "array_relu", "response_0": "from Compiler.types import *\nfrom Compiler.library import *\n\ndef array_relu(arr):\n    \"\"\"\n    Apply ReLU function elementwisely to the input array.\n    \"\"\"\n    size = len(arr)\n    ret = sint.Array(size)\n    for i in range(size):\n        ret[i] = arr[i].if_else(arr[i], 0)\n    return ret\n", "response_1": "def array_relu(arr):\n    \"\"\"\n    Apply ReLU function elementwisely to the input array.\n    \"\"\"\n    from Compiler.types import Array, sint\n    ret = Array(len(arr), sint)\n    for i in range(len(arr)):\n        ret[i] = arr[i].if_else(arr[i], sint(0))\n    return ret\n", "model_name": "deepseek-ai/deepseek-coder-33b-instruct"}
{"test_name": "move_to_end", "response_0": "from Compiler.types import sint\n\ndef move_to_end(arr: sint.Array, index: sint.sint) -> sint.Array:\n    \"\"\"\n    Move the element with given index in the array to the end of the array.\n    The index is guaranteed to be legal.\n    \"\"\"\n    temp = arr[index]\n    for i in range(index+1, len(arr)):\n        arr[i-1] = arr[i]\n    arr[len(arr)-1] = temp\n    return arr\n", "response_1": "from Compiler.types import Array\n\ndef move_to_end(arr: Array, index: int) -> Array:\n    \"\"\"\n    Move the element with given index in the array to the end of the array.\n    The index is guaranteed to be legal.\n    \"\"\"\n    temp = arr[index]\n    for i in range(index+1,len(arr)):\n        arr[i-1] = arr[i]\n    arr[len(arr)-1] = temp\n    return arr\n", "model_name": "deepseek-ai/deepseek-coder-33b-instruct"}
{"test_name": "set_to_zero", "response_0": "from Compiler.types import sint\n\ndef set_to_zero(arr: sint.Array, index: int):\n    \"\"\"\n    Set the element in the input array with given index to zero.\n    The input index is guaranteed to be legal. \n    \"\"\"\n    arr[index] = 0\n    return arr\n", "response_1": "from Compiler.types import Array\n\ndef set_to_zero(arr: Array, index: int):\n    \"\"\"\n    Set the element in the input array with given index to zero.\n    The input index is guaranteed to be legal.\n    \"\"\"\n    arr[index] = 0\n    return arr\n", "model_name": "deepseek-ai/deepseek-coder-33b-instruct"}
{"test_name": "last_partial_sum", "response_0": "from Compiler.types import sint, sfix\nfrom Compiler.sorting import radix_sort\nfrom Compiler.library import tree_reduce\n\ndef last_partial_sum(arr,n):\n    \"\"\"\n    Return the sum of the last n elements in the input array.\n    n is guaranteed to be legal.\n    \"\"\"\n    ret = 0\n    for i in range(len(arr)-n,len(arr)):\n        ret += arr[i]\n    return ret\n\ndef main():\n    n = sint.get_input_from(0)  # Get the partial sum length from the first party\n    arr = sint.Array(10)  # Create an array of 10 secret integers from the first party\n    arr.assign_all(sint.get_input_from(1))  # Assign the array values from the second party\n    result = last_partial_sum(arr,n)\n    result.output_as_integer(0)  # Output the result to the first party\n\nmain()\n", "response_1": "from Compiler.types import Array, sint\n\ndef last_partial_sum(arr: Array(len(arr), sint), n: sint):\n    \"\"\"\n    Return the sum of the last n elements in the input array.\n    n is guaranteed to be legal.\n    \"\"\"\n    ret = sint(0)\n    for i in range(len(arr)-n, len(arr)):\n        ret += arr[i]\n    return ret\n", "model_name": "deepseek-ai/deepseek-coder-33b-instruct"}
{"test_name": "permute_by_indices", "response_0": "def permute_by_indices(a,indices):\n    \"\"\"\n    Permute the input array a by the indices. \n    The i'th element in the returned array will be a[indices[i]]. \n    The input indices are guaranteed to be a legal permutation. \n    \"\"\"\n    ret = a.create_from([0]*len(a))\n    for i in range(len(a)):\n        ret[i] = a[indices[i]]\n    return ret\n", "response_1": "import Compiler.types as sint\n\ndef permute_by_indices(a,indices):\n    \"\"\"\n    Permute the input array a by the indices. \n    The i'th element in the returned array will be a[indices[i]]. \n    The input indices are guaranteed to be a legal permutation. \n    \"\"\"\n    ret = sint.Array(len(a))\n    for i in range(len(a)):\n        ret[i] = a[indices[i]]\n    return ret\n", "model_name": "deepseek-ai/deepseek-coder-33b-instruct"}
{"test_name": "get_rank", "response_0": "def get_rank(arr, index):\n    \"\"\"\n    Get the rank in the array of the element (how many elements are smaller than the element) with given index. \n    \"\"\"\n    rank = Compiler.types.sfix(0)\n    for item in arr:\n        if item < arr[index]:\n            rank += Compiler.types.sfix(1)\n    return rank\n", "response_1": "import Compiler.types as types\n\ndef get_rank(arr, index):\n    \"\"\"\n    Get the rank in the array of the element (how many elements are smaller than the element) with given index. \n    \"\"\"\n    rank = types.sint.Array(1)\n    rank[0] = 0\n    for i in range(len(arr)):\n        rank[0] += (arr[i] < arr[index]).bit_and(1)\n    return rank\n", "model_name": "deepseek-ai/deepseek-coder-33b-instruct"}
{"test_name": "interchange_by_indices", "response_0": "import Compiler.types\n\ndef interchange_by_indices(arr: Compiler.types.Array, index1: int, index2: int):\n    \"\"\"\n    Interchange the two elements in the array with given indices. \n    The input indices are guaranteed to be legal. \n    \"\"\"\n    temp = arr[index1]\n    arr[index1] = arr[index2]\n    arr[index2] = temp\n    return arr\n", "response_1": "from Compiler.types import Array\n\ndef interchange_by_indices(arr: Array,index1: int,index2: int):\n    \"\"\"\n    Interchange the two elements in the array with given indices. \n    The input indices are guaranteed to be legal. \n    \"\"\"\n    temp = arr[index1]\n    arr[index1] = arr[index2]\n    arr[index2] = temp\n    return arr\n", "model_name": "deepseek-ai/deepseek-coder-33b-instruct"}
{"test_name": "increase_by", "response_0": "import Compiler.types.sint as sint\n\ndef increase_by(arr, index, k):\n    \"\"\"\n    Increase the element arr[index] in the array arr by k.\n    \"\"\"\n    arr[index] += k\n    return arr\n", "response_1": "from Compiler.types import sfix\n\ndef increase_by(arr, index, k):\n    \"\"\"\n    Increase the element arr[index] in the array arr by k.\n    \"\"\"\n    arr[index] = arr[index] + k\n    return arr\n\n# Create an array of 10 elements\narr = sfix.Array(10)\n# Get the index from the user\nindex = sfix.get_input_from(0)\n# Get the value to increase by from the user\nk = sfix.get_input_from(1)\n# Call the function\nincrease_by(arr, index, k)\n", "model_name": "deepseek-ai/deepseek-coder-33b-instruct"}
{"test_name": "retrieve_by_index", "response_0": "def retrieve_by_index(arr, index):\n    \"\"\"\n    Retrieve the element in the array by index.\n    The input index is guaranteed to be legal. \n    \"\"\"\n    return arr.get_part(base=index, size=1)\n", "response_1": "import Compiler.types as ctypes\n\ndef retrieve_by_index(arr, index):\n    \"\"\"\n    Retrieve the element in the array by index.\n    The input index is guaranteed to be legal. \n    \"\"\"\n    temp = ctypes.Array(1, type(arr[0]))\n    temp[0] = arr[index]\n    return temp[0]\n", "model_name": "deepseek-ai/deepseek-coder-33b-instruct"}
{"test_name": "scale_by", "response_0": "from Compiler.types import sint\n\ndef scale_by(arr: sint.Array, index: int, k: int) -> sint.Array:\n    \"\"\"\n    Multiply the element arr[index] in the array arr by k.\n    \"\"\"\n    arr[index] *= k\n    return arr\n", "response_1": "from Compiler.types import sint\n\ndef scale_by(arr: sint.Array, index: sint, k: sint) -> sint.Array:\n    \"\"\"\n    Multiply the element arr[index] in the array arr by k.\n    \"\"\"\n    arr[index] *= k\n    return arr\n", "model_name": "deepseek-ai/deepseek-coder-33b-instruct"}
{"test_name": "take_opposite_to", "response_0": "import Compiler.types\n\ndef take_opposite_to(arr,index):\n    \"\"\"\n    Take opposite to the element in the array with given index. \n    The input index is guaranteed to be legal. \n    \"\"\"\n    arr[index] = -arr[index]\n    return arr\n", "response_1": "from Compiler.types import sfix\n\ndef take_opposite_to(arr, index):\n    \"\"\"\n    Take opposite to the element in the array with given index. \n    The input index is guaranteed to be legal. \n    \"\"\"\n    arr[index] = -arr[index]\n    return arr\n", "model_name": "deepseek-ai/deepseek-coder-33b-instruct"}
{"test_name": "array_rank", "response_0": "import Compiler.types\n\ndef array_rank(l):\n    \"\"\"\n    Return an array with the same size of the original array, \n    each position of which records the number of elements smaller than the element at the same position. \n    \"\"\"\n    ret = Compiler.types.sint.Array(len(l))\n    for i in range(len(l)):\n        for j in range(len(l)):\n            ret[i] = ret[i] + (l[j].bit_and(l[i] - l[j])).if_else(1, 0)\n    return ret\n", "response_1": "from Compiler.types import Array, sint, sfix, cf\n\ndef array_rank(l: Array(sint, len(l))):\n    ret: Array(sint, len(l)) = Array(sint, len(l))\n    for i in range(len(l)):\n        ret[i] = sint(0)\n        for j in range(len(l)):\n            ret[i] += sint((l[j] < l[i]) & 1)\n    return ret\n", "model_name": "deepseek-ai/deepseek-coder-33b-instruct"}
{"test_name": "remove_by_index", "response_0": "from Compiler.types import sint\n\ndef remove_by_index(arr,index):\n    \"\"\"\n    Remove the element in the array by index and return the remaining array. \n    The input index is guaranteed to be legal. \n    \"\"\"\n    ret = sint.Array(len(arr)-1)\n    for i in range(len(arr)-1):\n        if i<index:\n            ret[i] = arr[i]\n        else:\n            ret[i] = arr[i+1]\n    return ret\n", "response_1": "def remove_by_index(arr,index):\n    \"\"\"\n    Remove the element in the array by index and return the remaining array. \n    The input index is guaranteed to be legal. \n    \"\"\"\n    ret = mpc_types.Array(len(arr)-1, mpc_types.sint)\n    for i in range(len(arr)-1):\n        if i<index:\n            ret[i] = arr[i]\n        else:\n            ret[i] = arr[i+1]\n    return ret\n", "model_name": "deepseek-ai/deepseek-coder-33b-instruct"}
{"test_name": "process_by_index", "response_0": "from Compiler.types import sfix, sint, Array\n\ndef process_by_index(arr: Array, index: sint, func):\n    \"\"\"\n    Process the element in the input array with given index.\n    The input index is guaranteed to be legal. \n    \"\"\"\n    arr[index] = func(arr[index])\n    return arr\n", "response_1": "import Compiler.types as types\n\ndef process_by_index(arr,index,func):\n    \"\"\"\n    Process the element in the input array with given index.\n    The input index is guaranteed to be legal. \n    \"\"\"\n    arr[index] = func(arr[index])\n    return arr\n", "model_name": "deepseek-ai/deepseek-coder-33b-instruct"}
{"test_name": "sum_by_indices", "response_0": "import Compiler.types\n\ndef sum_by_indices(arr,indices):\n    \"\"\"\n    Compute the sum of elements in the array with given indices.\n    The input indices are guaranteed to be legal. \n    \"\"\"\n    sum = Compiler.types.sint(0)\n    for index in indices:\n        sum = sum + arr[index]\n    return sum\n", "response_1": "from Compiler.types import sint, cint\n\ndef sum_by_indices(arr, indices):\n    \"\"\"\n    Compute the sum of elements in the array with given indices.\n    The input indices are guaranteed to be legal. \n    \"\"\"\n    sum = sint.sint(0)\n    for index in indices:\n        sum = sum + arr[index]\n    return sum\n", "model_name": "deepseek-ai/deepseek-coder-33b-instruct"}
