{"test_name": "next_integer", "response_0": "from Compiler.types import *\n\n@spec()\ndef next_integer(t):\n    \"\"\"\n    Return the minimum integer strictly bigger than the input value.\n    \"\"\"\n    return floor(t) + 1\n", "response_1": "def next_integer(t):\n    \"\"\"\n    Return the minimum integer strictly bigger than the input value.\n    \"\"\"\n    import Compiler.types as types\n    return types.sint(t).floor() + 1\n", "model_name": "deepseek-ai/deepseek-coder-33b-instruct"}
{"test_name": "father_and_son", "response_0": "def father_and_son(father_age, son_age):\n    \"\"\"\n    Given the age of father and son, \n    return before how many years or after how many years, the age of father is twice as the age of son.\n    \"\"\"\n    return abs(father_age-son_age*2)\n", "response_1": "from Compiler.types import sint\n\ndef father_and_son(father_age, son_age):\n    \"\"\"\n    Given the age of father and son, \n    return before how many years or after how many years, the age of father is twice as the age of son.\n    \"\"\"\n    return abs(father_age - son_age * sint(2))\n", "model_name": "deepseek-ai/deepseek-coder-33b-instruct"}
{"test_name": "triangle_area", "response_0": "from Compiler.types import sint\n\ndef triangle_area(side: sint, height: sint) -> sint:\n    \"\"\"\n    Given the length of on side and the corresponding height, compute the size of the triangle. \n    \"\"\"\n    return (side*height)//2\n", "response_1": "from Compiler.types import *\nimport mpc_math\n\n@spdz_compile\ndef triangle_area(side: sfix, height: sfix) -> sfix:\n    \"\"\"\n    Given the length of one side and the corresponding height, compute the size of the triangle. \n    \"\"\"\n    area = mpc_math.mul_fx(side, height)\n    area = mpc_math.div_fx(area, 2)\n    return area\n", "model_name": "deepseek-ai/deepseek-coder-33b-instruct"}
{"test_name": "sin_plus_cos", "response_0": "import Compiler.types as types\nimport mpc_math\n\ndef sin_plus_cos(a):\n    \"\"\"\n    Return sin(a)+cos(a)\n    \"\"\"\n    return mpc_math.sin(a) + mpc_math.cos(a)\n\na = types.sfix.get_input_from(0)  # get input from party 0\nresult = sin_plus_cos(a)\nresult.output_as_int(0)  # output the result as an integer to party 0\n", "response_1": "from Compiler.types import *\n\ndef sin_plus_cos(a):\n    \"\"\"\n    Return sin(a)+cos(a)\n    \"\"\"\n    import Compiler.math as mpc_math\n    return mpc_math.sin(a) + mpc_math.cos(a)\n", "model_name": "deepseek-ai/deepseek-coder-33b-instruct"}
{"test_name": "sigmoid", "response_0": "import Compiler.types.sfix as sfix\n\ndef sigmoid(x):\n    \"\"\"\n    sigmoid function\n    \"\"\"\n    return sfix.sinh(x)/(sfix.cosh(x)+1)\n", "response_1": "from Compiler.types import sfix\nfrom Compiler.library import exp\n\ndef sigmoid(x: sfix):\n    \"\"\"\n    sigmoid function using MP-SPDZ library and sfix type\n    \"\"\"\n    return 1.0/(1.0+exp(-x))\n", "model_name": "deepseek-ai/deepseek-coder-33b-instruct"}
{"test_name": "self_exponent", "response_0": "from Compiler.types import sfix, sint\nimport Compiler.library as lib\n\ndef self_exponent(k):\n    \"\"\"\n    Return the self-exponent k^k.\n    \"\"\"\n    return lib.tree_reduce(lambda x, y: x*y, [k]*sint(k))\n", "response_1": "from Compiler.types import sfix\nfrom Compiler.library import tree_reduce\n\ndef self_exponent(k):\n    \"\"\"\n    Return the self-exponent k^k.\n    \"\"\"\n    return tree_reduce(lambda x, y: x * y, [k]*k)\n", "model_name": "deepseek-ai/deepseek-coder-33b-instruct"}
{"test_name": "silu", "response_0": "from Compiler.types import sint\nfrom Compiler.library import log_fx, pow_fx\n\ndef silu_mpspdz(x):\n    \"\"\"\n    SiLU function\n    \"\"\"\n    e = sint(3.71828) # Euler's number, approximately\n    one = sint(1)\n    return x.div_fx(one + pow_fx(e, -x))\n", "response_1": "from Compiler.types import sfix\nfrom Compiler.math import exp, log\n\ndef silu(x: sfix):\n    \"\"\"\n    SiLU function\n    \"\"\"\n    return x/(1+exp(-x))\n", "model_name": "deepseek-ai/deepseek-coder-33b-instruct"}
{"test_name": "Gaussian_bracket", "response_0": "def gaussian_bracket(x):\n    \"\"\"\n    Return the value of Gaussian large bracket.\n    \"\"\"\n    import mpc_math\n    x_int = mpc_math.floor(x)\n    return x - x_int\n", "response_1": "from Compiler.types import sfix, sint, cint\nimport Compiler.library as lib\n\n@lib.lazy\ndef Gaussian_bracket(x: sfix):\n    \"\"\"\n    Return the value of Gaussian large bracket.\n    \"\"\"\n    # MP-SPDZ doesn't support math functions for sfix types, so we need to implement this manually\n    x_int = lib.round(x)\n    return x - x_int\n", "model_name": "deepseek-ai/deepseek-coder-33b-instruct"}
{"test_name": "asin_and_square", "response_0": "from Compiler.types import sfix\n\ndef asin_and_square(x):\n    \"\"\"\n    Take arcsin to the input, then compute the square of the outcome. \n    \"\"\"\n    return sfix.pow_fx(sfix.asin(x),2)\n", "response_1": "from Compiler.types import *\nfrom Compiler.library import *\nimport mpc_math\n\ndef asin_and_square(x):\n    \"\"\"\n    Take arcsin to the input, then compute the square of the outcome. \n    \"\"\"\n    return mpc_math.pow_fx(mpc_math.asin(x), 2)\n", "model_name": "deepseek-ai/deepseek-coder-33b-instruct"}
{"test_name": "cylinder_surface", "response_0": "from Compiler.types import sint\nimport Compiler.library\n\ndef mpc_math(x, y):\n    \"\"\"\n    Perform element-wise multiplication of two MP-SPDZ vectors x and y.\n    \"\"\"\n    assert isinstance(x, sint) and isinstance(y, sint)\n    return x * y\n\ndef cylinder_surface(r, h):\n    \"\"\"\n    Given the radius and the height of a cylinder, return its surface area. \n    \"\"\"\n    two = sint(2)\n    return two * Compiler.library.tree_reduce(mpc_math, [Compiler.library.tree_reduce(mpc_math, [sint.math.pi, r], sint), h], sint)\n", "response_1": "from Compiler.types import sfix, sint\nfrom Compiler.math import sin, cos, tan, tanh, asin, acos, atan\nfrom Compiler.library import tree_reduce\n\ndef cylinder_surface(r,h):\n    \"\"\"\n    Given the radius and the height of a cylinder, return its surface area. \n    \"\"\"\n    PI = sfix(3.14159265358979323846264338327950288419716939937510582097494459230781640628620899)\n    return 2 * PI * r**2 + 2 * PI * r * h\n", "model_name": "deepseek-ai/deepseek-coder-33b-instruct"}
{"test_name": "radian_to_degree", "response_0": "from Compiler.types import *\nfrom Compiler.library import *\n\ndef radian_to_degree(r):\n    \"\"\"\n    Converting radian to degree\n    \"\"\"\n    return r/mpc_math.pi()*180\n", "response_1": "", "model_name": "deepseek-ai/deepseek-coder-33b-instruct"}
{"test_name": "square_root", "response_0": "from Compiler.types import sfix, sint\nfrom Compiler.math_ import mpc_math\n\ndef square_root(a):\n    \"\"\"\n    return the square root of the input. \n    \"\"\"\n    return mpc_math.sqrt(a)\n", "response_1": "import Compiler.types as ct\nimport Compiler.math as mpc_math\n\ndef square_root(a):\n    \"\"\"\n    return the square root of the input. \n    \"\"\"\n    return mpc_math.sqrt(a)\n", "model_name": "deepseek-ai/deepseek-coder-33b-instruct"}
{"test_name": "cosine_theorem", "response_0": "import Compiler.types as sint\nimport Compiler.library as library\nimport Compiler.mpc_math as mpc_math\n\ndef cosine_theorem(a,b,rad):\n    \"\"\"\n    Given the two edges a, b and the angle rad between them, \n    use cosine theorem to compute the length of the third edge.\n    \"\"\"\n    return library.sqrt(a**2+b**2-2*a*b*mpc_math.cos(rad))\n", "response_1": "from Compiler.types import *\nimport mpc_math\n\ndef cosine_theorem(a,b,rad):\n    \"\"\"\n    Given the two edges a, b and the angle rad between them, \n    use cosine theorem to compute the length of the third edge.\n    \"\"\"\n    return mpc_math.sqrt(a**2+b**2-2*a*b*mpc_math.cos(rad))\n", "model_name": "deepseek-ai/deepseek-coder-33b-instruct"}
{"test_name": "lights_states", "response_0": "from Compiler.types import sint\n\ndef lights_states(num):\n    \"\"\"\n    Given the number of lights (all different), compute the total number of possible states. \n    (Each light has two states: on/off)\n    \"\"\"\n    return sint.pow_fx(2, num)\n", "response_1": "from Compiler.types import sint\nfrom Compiler.math import exp2_fx\n\ndef lights_states(num):\n    \"\"\"\n    Given the number of lights (all different), compute the total number of possible states. \n    (Each light has two states: on/off)\n    \"\"\"\n    return exp2_fx(num)\n", "model_name": "deepseek-ai/deepseek-coder-33b-instruct"}
{"test_name": "degree_to_radian", "response_0": "Compiler.types\n=====================\n\nThis module defines all types available in high-level programs.\n\nRegisters are used for computation, allocated on an ongoing basis, and thread-specific.\nThe memory is allocated statically and shared between threads.\nThis means that memory-based types such as \"Array\" can be used to transfer information between threads.\nNote that creating memory-based types outside the main thread is not supported.\n\nBasic types\n-----------\n\nAll basic can be used as vectors, that is one instance representing several values, with all operations being executed element-wise.\n\n\"sint\": Secret integer in the protocol-specific domain.\n\"cfix\": Clear fixed-point number represented as clear integer.\n\nContainer types\n---------------\n\n\"Array\": Array accessible by public index.\n\nclass Compiler.types.Array(length, value_type)\n\n\"Array\" accessible by public index.\n\n\"Assign\" and \"Assign_All\" methods are used to assign values to the array elements.\n\n\"get_vector\" method is used to get a vector from the array.\n\n\"randomize\" method is used to randomize the array.\n\n\"same_shape\" method is used to get an array of the same length and type.\n\n\"secure_shuffle\" method is used to securely shuffle the array.\n\n\"sort\" method is used to sort the array in place.\n\n\"create_from\" method is used to convert Python iterator or vector to array.\n\n\"get_part\" method is used to get a part of the array.\n\n\"get_reverse_vector\" method is used to get a reversed vector from the array.\n\n\"create_from\" method is used to convert Python iterator or vector to array.\n\n\ndef degree_to_radian(d):\n    \"\"\"\n    Converting degree to radian\n    \"\"\"\n    return d/180*mpc_math.Pi\n\n\ndegree_to_radian = degree_to_radian(d)\n\n", "response_1": "from Compiler.types import sfix, sint\nfrom Compiler.library import tree_reduce\nimport math\n\ndef degree_to_radian(d):\n    \"\"\"\n    Converting degree to radian\n    \"\"\"\n    return d * math.pi / 180\n", "model_name": "deepseek-ai/deepseek-coder-33b-instruct"}
{"test_name": "Fah_to_Cel", "response_0": "from Compiler.types import sfix, sint\nimport Compiler.math_inner as mpc_math\n\ndef Fah_to_Cel(F: sfix):\n    \"\"\"\n    Convert Fahrenheit temperature to Celsius temperature.\n    \"\"\"\n    F -= 32\n    F = F * sfix(1.8).inverse()\n    return F\n", "response_1": "from Compiler.types import sfix\n\ndef Fah_to_Cel(F: sfix) -> sfix:\n    \"\"\"\n    Convert Fahrenheit temperature to Celsius temperature.\n    \"\"\"\n    F_minus_32 = F - sfix(32.0)\n    return F_minus_32 / sfix(1.8)\n", "model_name": "deepseek-ai/deepseek-coder-33b-instruct"}
{"test_name": "elliptic_area", "response_0": "def elliptic_area(a, b):\n    \"\"\"\n    Given the lengths of major axis and minor axis of the elliptic, return its area. \n    \"\"\"\n    import mpc_math\n    return mpc_math.pi * a * b\n", "response_1": "def elliptic_area(a, b):\n    \"\"\"\n    Given the lengths of major axis and minor axis of the elliptic, return its area.\n    \"\"\"\n    from Compiler.types import sint, sfix\n    from Compiler.library import mpc_math\n    \n    # Converting input to fixed point\n    a_fp = sfix(a, FIXED_POINT_PRECISION)\n    b_fp = sfix(b, FIXED_POINT_PRECISION)\n\n    # Calculating area\n    area = mpc_math.PI * a_fp * b_fp\n\n    # Converting back to integer\n    area_int = sint(area, FIXED_POINT_PRECISION)\n\n    return area_int\n", "model_name": "deepseek-ai/deepseek-coder-33b-instruct"}
{"test_name": "floor", "response_0": "from Compiler.types import sint, sfix\n\ndef floor(z: sint or sfix):\n    \"\"\"\n    Return the maximum integer no bigger than the input.\n    \"\"\"\n    return z.round(0)\n", "response_1": "#include \"Math/ReplicatedSecret.h\"\n\nvoid floor(ReplicatedSecret<SignedZ2<64, 64>> &res, const ReplicatedSecret<SignedZ2<64, 64>> &x)\n{\n    res = FloorFunctionSecret<ReplicatedSecret<SignedZ2<64, 64>>>::apply(x);\n}\n", "model_name": "deepseek-ai/deepseek-coder-33b-instruct"}
{"test_name": "log_and_cube", "response_0": "from Compiler.types import sint, sfix\nimport Compiler.math as mpc_math\n\ndef log_and_cube(x: sint):\n    \"\"\"\n    take log (with base-2) to the input, then compute the cube of the outcome\n    \"\"\"\n    log_value = mpc_math.log2_fx(x, sfix(0, -100))\n    return mpc_math.pow_fx(log_value, sfix(3, -100))\n", "response_1": "def log_and_cube(x):\n    \"\"\"\n    take log (with base-2) to the input, then compute the cube of the outcome\n    \"\"\"\n    import Compiler.types as mpc\n    import Compiler.math as mpc_math\n\n    # log in base 2 is equivalent to divide by log(2)\n    log_base_2 = x / mpc_math.log2(x)\n\n    # cube the outcome\n    cube = mpc_math.pow_fx(log_base_2, 3)\n\n    return cube\n", "model_name": "deepseek-ai/deepseek-coder-33b-instruct"}
{"test_name": "floor_and_square", "response_0": "from Compiler import mpc_math\n\ndef floor_and_square(z):\n    \"\"\"\n    Calculate the maximum integer no bigger than the input. \n    Then return the square of the previous outcome. \n    \"\"\"\n    return mpc_math.floor(z) ** 2\n", "response_1": "import Compiler.types\nimport Compiler.math as mpc_math\n\ndef floor_and_square(z):\n    \"\"\"\n    Calculate the maximum integer no bigger than the input. \n    Then return the square of the previous outcome. \n    \"\"\"\n    z = Compiler.types.sfix(z)\n    z = mpc_math.floor(z)\n    return mpc_math.pow_fx(z, 2)\n", "model_name": "deepseek-ai/deepseek-coder-33b-instruct"}
{"test_name": "meters_to_feet", "response_0": "from Compiler.types import sfix\n\ndef meters_to_feet(m):\n    \"\"\"\n    Convert the length in meters to the length in feet.\n    \"\"\"\n    return m * sfix(3.2808)\n", "response_1": "from Compiler.types import sfix\n\ndef meters_to_feet(m: sfix) -> sfix:\n    return m * sfix(3.2808)\n", "model_name": "deepseek-ai/deepseek-coder-33b-instruct"}
{"test_name": "sphere_area", "response_0": "from Compiler.types import *\nfrom Compiler.library import *\nimport mpc_math as math\n\n@compiler\ndef sphere_area(r):\n    \"\"\"\n    Return the area of a sphere surface with given radius r.\n    \"\"\"\n    return 4*math.pi*math.pow_fx(r,2)\n", "response_1": "from Compiler.types import sint\nfrom Compiler.math import mpc_math\n\ndef sphere_area(r):\n    \"\"\"\n    Return the area of a sphere surface with given radius r.\n    \"\"\"\n    return 4*mpc_math.Pi*mpc_math.pow_fx(r, 2)\n\nr = sint(1)  # define the radius\narea = sphere_area(r)  # compute the sphere area\n", "model_name": "deepseek-ai/deepseek-coder-33b-instruct"}
{"test_name": "coarse_abs", "response_0": "from Compiler.types import sfix\n\ndef coarse_abs(x):\n    \"\"\"\n    Return the absolute value of x, and round it to zero.\n    \"\"\"\n    # Using the built-in function abs() to get the absolute value of x.\n    abs_x = abs(x)\n    \n    # Using the built-in function floor() from the sfix module to round down to zero.\n    return sfix.floor(abs_x)\n", "response_1": "from Compiler.types import sint, cfix\nfrom Compiler.library import floor\n\ndef coarse_abs(x):\n    \"\"\"\n    Return the absolute value of x, and round it to zero.\n    \"\"\"\n    return floor(sint.abs(x))\n", "model_name": "deepseek-ai/deepseek-coder-33b-instruct"}
{"test_name": "how_many_chickens", "response_0": "from Compiler.types import sint\n\ndef how_many_chickens(heads,legs):\n    \"\"\"\n    Compute the number of chickens in the rabbit-chicken problem.\n    \"\"\"\n    return heads-(legs-heads*sint(2))//sint(2)\n", "response_1": "import Compiler.types as sint\n\ndef how_many_chickens(heads, legs):\n    \"\"\"\n    Compute the number of chickens in the rabbit-chicken problem.\n    \"\"\"\n    return heads - (legs - heads * 2) // 2\n", "model_name": "deepseek-ai/deepseek-coder-33b-instruct"}
{"test_name": "interest_calculator", "response_0": "from Compiler.types import sfix, sint\nfrom Compiler.library import tree_reduce\nimport math\n\ndef interest_calculator(capital,ratio,months):\n    \"\"\"\n    Given the initial capital, interest ratio and the number of months you deposit your money to the bank, \n    calculate the interest you can get. \n    \"\"\"\n    return ((math.pow_fx(1+ratio,months)-1)*capital)\n", "response_1": "from Compiler.types import sfix, sint\nfrom Compiler.library import tree_reduce\nfrom Compiler.sqrt_oram import OptimalORAM\n\ndef interest_calculator(capital,ratio,months):\n    \"\"\"\n    Given the initial capital, interest ratio and the number of months you deposit your money to the bank, \n    calculate the interest you can get. \n    \"\"\"\n    return (pow(1+ratio,months)-1)*capital\n", "model_name": "deepseek-ai/deepseek-coder-33b-instruct"}
{"test_name": "circle_area", "response_0": "def circle_area(r):\n    \"\"\"\n    Return the area of the circle with given radius.\n    \"\"\"\n    import Compiler.library\n\n    return Compiler.library.math.pi * Compiler.library.math.pow_fx(r, 2)\n", "response_1": "import Compiler.types\nimport Compiler.library\nimport Compiler.math\nimport Compiler.sqrt_oram\n\n@Compiler.library.define_primitive('CircleArea', 'sint', 'sint')\ndef circle_area(r: Compiler.types.sint):\n    \"\"\"\n    Return the area of the circle with given radius.\n    \"\"\"\n    return Compiler.math.pi_fx*r**2\n", "model_name": "deepseek-ai/deepseek-coder-33b-instruct"}
{"test_name": "cube_and_square_root", "response_0": "def cube_and_square_root(x):\n    \"\"\"\n    take cube to the input, then compute the square root of the outcome\n    \"\"\"\n    import Compiler.types\n\n    cube = x ** 3\n    square_root = Compiler.types.mpc_math.sqrt(cube)\n\n    return square_root\n", "response_1": "from Compiler.types import sint\nfrom Compiler.library import mpc_math\n\ndef cube_and_square_root(x):\n    \"\"\"\n    take cube to the input, then compute the square root of the outcome\n    \"\"\"\n    cube_x = mpc_math.pow_fx(x,3)\n    return mpc_math.sqrt(cube_x)\n\ncube_and_square_root(sint(5))\n", "model_name": "deepseek-ai/deepseek-coder-33b-instruct"}
{"test_name": "round", "response_0": "from Compiler.types import sfix, sint\nfrom Compiler.library import tree_reduce\n\ndef round(x):\n    \"\"\"\n    Round x to the nearest integer. \n    \"\"\"\n    x_int = sfix.Vec(x.size()).randomize(0, 1)\n    return x_int if (x-x_int)<0.5 else x_int+1\n", "response_1": "from Compiler.types import sint, sfix, cfix\nfrom Compiler.library import tree_reduce\nfrom Compiler.oram import OptimalORAM\nfrom Compiler.sorting import radix_sort\nfrom Compiler.sqrt_oram import SqrtOram\n\ndef mpc_round(x):\n    \"\"\"\n    MPC version of rounding a floating point number to the nearest integer.\n    \"\"\"\n    x_int = sint(x)  # Create a secret integer from the floating point number\n    x_half = sfix(0.5)  # Create a fixed point number from 0.5\n    x_diff = x - x_int  # Compute the difference between the floating point number and its integer part\n    return x_int if (x_diff - x_half).if_else(x_int, x_int + 1)  # If the difference is less than 0.5, return the integer part, otherwise return the integer part plus 1\n", "model_name": "deepseek-ai/deepseek-coder-33b-instruct"}
{"test_name": "cryptic_adjustment", "response_0": "def cryptic_adjustment(origin):\n    \"\"\"\n    The professor want to adjust the pessimistic score of his students mid-term exam. \n    The adjustment formula is 10*sqrt(10*sqrt(origin))\n    \"\"\"\n    import Compiler.types.mpc_math\n    return 10*Compiler.types.mpc_math.sqrt(10*Compiler.types.mpc_math.sqrt(origin))\n", "response_1": "import Compiler.types as types\nimport Compiler.library as lib\n\ndef cryptic_adjustment(origin):\n    \"\"\"\n    The professor want to adjust the pessimistic score of his students mid-term exam. \n    The adjustment formula is 10*sqrt(10*sqrt(origin))\n    \"\"\"\n    origin = types.sfix.get_random(origin, 10**6)\n    res = lib.tree_reduce(lambda x, y: x.max(y), l)\n    return 10*lib.sqrt(10*lib.sqrt(origin))\n", "model_name": "deepseek-ai/deepseek-coder-33b-instruct"}
{"test_name": "specific_pow", "response_0": "from Compiler.types import sfix\nfrom Compiler.math_bigint import mpc_math\n\ndef specific_pow(x):\n    \"\"\"\n    Return x^(2.5).\n    \"\"\"\n    return mpc_math.pow_fx(x,sfix(2.5))\n", "response_1": "from Compiler.types import sint, cint, sfix\nimport mpc_math\n\ndef specific_pow(x):\n    \"\"\"\n    Return x^(2.5).\n    \"\"\"\n    return mpc_math.pow_fx(x, cint(25)/cint(10))\n", "model_name": "deepseek-ai/deepseek-coder-33b-instruct"}
{"test_name": "soft_plus", "response_0": "from Compiler.types import sint\nfrom Compiler.library import log_fx\n\ndef soft_plus(x):\n    \"\"\"\n    Softplus function\n    \"\"\"\n    return log_fx(1+x.exp(), sint(1))\n", "response_1": "from Compiler.types import sfix, sint\nfrom Compiler.library import log_fx, pow_fx\nimport Compiler.math as mpc_math\n\ndef soft_plus(x):\n    \"\"\"\n    Softplus function\n    \"\"\"\n    return mpc_math.log_fx(1 + mpc_math.pow_fx(sfix(math.e),x),sfix(math.e))\n\n", "model_name": "deepseek-ai/deepseek-coder-33b-instruct"}
{"test_name": "ball_volume", "response_0": "from Compiler.types import *\nimport Compiler.library as lib\nimport Compiler.math as mpc_math\n\ndef ball_volume(r):\n    \"\"\"\n    Return the volume of the ball with given radius.\n    \"\"\"\n    return mpc_math.pi * mpc_math.pow_fx(r,3) * 4 / 3\n", "response_1": "from Compiler.types import sfix, sint\nfrom Compiler.math import mpc_math\n\ndef ball_volume(r):\n    \"\"\"\n    Return the volume of the ball with given radius.\n    \"\"\"\n    # Define a fixed point number type with 32-bit integer part and 32-bit fraction part\n    sfix_three = sfix(0, 32, 32)\n\n    # Define the value of PI\n    PI = sfix.create_from(mpc_math.PI)\n\n    # Calculate the volume of the ball\n    volume = PI * mpc_math.pow_fx(r, sfix_three.create_from(3)) * sfix_three.create_from(4) / sfix_three.create_from(3)\n    return volume\n\n", "model_name": "deepseek-ai/deepseek-coder-33b-instruct"}
{"test_name": "Heron", "response_0": "import Compiler.types.sint as sint\nimport Compiler.math.sqrt_fx as sqrt_fx\n\ndef Heron(a,b,c):\n    \"\"\"\n    Given the lengths of three sides of the triangle, compute its size with Heron's formula.\n    \"\"\"\n    p = (a+b+c)//2  # Python's // operator corresponds to MP-SPDZ's / operator, performing integer division\n    p_minus_a = p-a\n    p_minus_b = p-b\n    p_minus_c = p-c\n    return sqrt_fx(p_minus_a * p_minus_b * p_minus_c)\n", "response_1": "def Heron(a,b,c):\n    \"\"\"\n    Given the lengths of three sides of the triangle, compute its size with Heron's formula.\n    \"\"\"\n    import mpc_math\n    p = (a+b+c)/2\n    return mpc_math.sqrt(p*(p-a)*(p-b)*(p-c))\n", "model_name": "deepseek-ai/deepseek-coder-33b-instruct"}
{"test_name": "next_perfect_square", "response_0": "from Compiler.types import sfix, sint\nfrom Compiler.library import tree_reduce\n\ndef next_perfect_square(x):\n    \"\"\"\n    Return the smallest perfect square number bigger than x. \n    The input x is guaranteed to be a positive integer. \n    \"\"\"\n    return (tree_reduce(lambda a, b: a.max(b), (x.sqrt() + 1) ** 2))\n", "response_1": "from Compiler.types import *\nfrom Compiler.oram import OptimalORAM\nfrom Compiler.sqrt_oram import SqrtOram\nimport math\n\ndef next_perfect_square(x):\n    \"\"\"\n    Return the smallest perfect square number bigger than x. \n    The input x is guaranteed to be a positive integer. \n    \"\"\"\n    return (math.sqrt(x).floor()+1)**2\n", "model_name": "deepseek-ai/deepseek-coder-33b-instruct"}
{"test_name": "pi_to_the_x", "response_0": "def pi_to_the_x(x):\n    \"\"\"\n    Return the value of pi^x.\n    \"\"\"\n    from Compiler.types import sfix\n    from Compiler.library import tree_reduce\n    from Compiler.sqrt_oram import SqrtOram\n    from Compiler.oram import OptimalORAM\n\n    # convert from floating point to fixed point\n    pi = sfix.to_fixed(math.pi)\n\n    # perform power operation\n    pi_to_the_x = tree_reduce(lambda a, b: a * b, x, 1)\n\n    return pi_to_the_x\n", "response_1": "from Compiler.types import sint, sfix\n\ndef pi_to_the_x(x):\n    \"\"\"\n    Return the value of pi^x.\n    \"\"\"\n    pi = sfix(str(math.pi), integral=52, fractional=104)\n    return pi**x\n", "model_name": "deepseek-ai/deepseek-coder-33b-instruct"}
{"test_name": "spring_rocket", "response_0": "from Compiler.types import sfix, sint, MemValue, Array\nfrom Compiler.math import log_fx, pow_fx, sin, cos, tan, tanh, asin, acos, atan\nimport Compiler\n\ndef spring_rocket(height,m,k):\n    \"\"\"\n    You want to use a spring with stiffness coefficient k to bounce an object with mass m to the given height. \n    You should return the minimum length the spring should be compressed. \n    Assume g = 9.8\n    \"\"\"\n    g = sfix(9.8, 16)  # Fix-point decimal with 16 bits of precision.\n    return pow_fx(2*m*g*height/k, 0.5)  # Use the power function from MP-SPDZ, and raise to the 0.5 power for square root.\n\nCompiler.output(spring_rocket)\n", "response_1": "import Compiler.types as T\nimport Compiler.library as L\n\ndef spring_rocket(height: T.sfix, m: T.sfix, k: T.sfix, g=T.sfix(9.8)):\n    \"\"\"\n    You want to use a spring with stiffness coefficient k to bounce an object with mass m to the given height.\n    You should return the minimum length the spring should be compressed. \n    Assume g = 9.8\n    \"\"\"\n    return T.sfix.sqrt(2*m*g*height/k)\n", "model_name": "deepseek-ai/deepseek-coder-33b-instruct"}
{"test_name": "cone_volume", "response_0": "from Compiler.types import sint\nfrom Compiler.mpc_math import pi, mul_fx, div_fx\n\ndef cone_volume(r: sint, h: sint, fixed_point_precision: int) -> sint:\n    \"\"\"\n    Given the radius and height, compute the volume of the cone.\n    \"\"\"\n    three = sint(3)\n    pi_fx = sint.get_fixed_point(pi, fixed_point_precision)\n    r2 = mul_fx(r, r, fixed_point_precision)\n    volume = div_fx(mul_fx(pi_fx, mul_fx(r2, h, fixed_point_precision), fixed_point_precision), three, fixed_point_precision)\n    return volume\n", "response_1": "from Compiler.types import sfix\nfrom Compiler.math import mpc_math\n\ndef cone_volume(r,h):\n    \"\"\"\n    Given the radius and height, compute the volume of the cone.\n    \"\"\"\n    return mpc_math.pi * sfix.sfix(r) * sfix.sfix(r) * sfix.sfix(h) / sfix.sfix(3)\n", "model_name": "deepseek-ai/deepseek-coder-33b-instruct"}
{"test_name": "how_many_rabbits", "response_0": "from Compiler.types import sfix, sint, MemValue, cint\nfrom Compiler.library import tree_reduce\n\ndef how_many_rabbits(heads,legs):\n    \"\"\"\n    Compute the number of rabbits in the rabbit-chicken problem.\n    \"\"\"\n    # Convert the inputs to the appropriate type\n    heads = sint.get_input_from(0)\n    legs = sint.get_input_from(1)\n    # Compute the number of rabbits using the formula and convert to sfix\n    rabbits = sfix((legs-heads*2)//2, precision=0)\n    # Output the number of rabbits\n    rabbits.output_as(0)\n\n# Run the function\nhow_many_rabbits()\n", "response_1": "from Compiler.types import *\n\ndef how_many_rabbits(heads,legs):\n    \"\"\"\n    Compute the number of rabbits in the rabbit-chicken problem.\n    \"\"\"\n    rabbits = (legs-heads*2)//2\n    return rabbits\n\n# Define the input to the function\nheads = sint.get_input_from(0)\nlegs = sint.get_input_from(1)\n\n# Call the function\nrabbits = how_many_rabbits(heads, legs)\n\n# Output the result\nrabbits.output_as_int(0)\n", "model_name": "deepseek-ai/deepseek-coder-33b-instruct"}
