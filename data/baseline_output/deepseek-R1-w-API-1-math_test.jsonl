{"test_name": "next_integer", "response_0": "def next_integer(t):\n    int_t = t.to_int()\n    is_less = t < sfix(int_t)\n    adjustment = is_less.if_else(sint(1), sint(0))\n    floor_t = int_t - adjustment\n    return floor_t + 1\n", "response_1": "from Compiler.types import sfix\n\ndef next_integer(t):\n    integer_part = t.v >> sfix.f\n    next_int = integer_part + 1\n    return sfix(next_int * (2 ** sfix.f))\n", "model_name": "deepseek-r1"}
{"test_name": "father_and_son", "response_0": "def father_and_son(father_age, son_age):\n    \"\"\"\n    Given the secret ages of father and son (sint), \n    return before how many years or after how many years, \n    the age of father is twice as the age of son (sint).\n    \"\"\"\n    return abs(father_age - son_age * 2)\n", "response_1": "def father_and_son(father_age, son_age):\n    \"\"\"\n    Given the age of father and son, \n    return before how many years or after how many years, the age of father is twice as the age of son.\n    \"\"\"\n    return (father_age - son_age * 2).abs()\n", "model_name": "deepseek-r1"}
{"test_name": "triangle_area", "response_0": "def triangle_area(side: sfix, height: sfix) -> sfix:\n    \"\"\"\n    Given the length of one side and the corresponding height, compute the area of the triangle.\n    \"\"\"\n    return side * height / 2\n", "response_1": "from Compiler.library import *\n\ndef triangle_area(side: sfix, height: sfix) -> sfix:\n    \"\"\"\n    Given the length of one side and the corresponding height, compute the area of the triangle.\n    \"\"\"\n    return side * height / 2\n", "model_name": "deepseek-r1"}
{"test_name": "sin_plus_cos", "response_0": "from mpc_math import sin, cos\n\ndef sin_plus_cos(a):\n    \"\"\"\n    Return sin(a)+cos(a)\n    \"\"\"\n    return sin(a) + cos(a)\n", "response_1": "from Compiler import mpc_math\n\ndef sin_plus_cos(a):\n    \"\"\"\n    Return sin(a)+cos(a)\n    \"\"\"\n    return mpc_math.sin(a) + mpc_math.cos(a)\n", "model_name": "deepseek-r1"}
{"test_name": "sigmoid", "response_0": "def sigmoid(x):\n    from Compiler import mpc_math\n    exp_term = mpc_math.exp_fx(-x)\n    return 1 / (1 + exp_term)\n", "response_1": "from Compiler import mpc_math\n\ndef sigmoid(x):\n    \"\"\"\n    sigmoid function using secure fixed-point arithmetic\n    \"\"\"\n    neg_x = -x\n    exp_term = mpc_math.exp_fx(neg_x)\n    denominator = sfix(1) + exp_term\n    return denominator.compute_reciprocal()\n", "model_name": "deepseek-r1"}
{"test_name": "self_exponent", "response_0": "def self_exponent(k):\n    from Compiler import mpc_math\n    return mpc_math.pow_fx(k, k)\n", "response_1": "from Compiler import mpc_math\n\ndef self_exponent(k):\n    return mpc_math.pow_fx(k, k)\n", "model_name": "deepseek-r1"}
{"test_name": "silu", "response_0": "from Compiler import mpc_math\nimport math\n\ndef silu(x):\n    \"\"\"\n    SiLU function implemented using MP-SPDZ operations\n    \"\"\"\n    e = cfix(math.e)\n    return x / (1 + mpc_math.pow_fx(e, -x))\n", "response_1": "from library import mpc_math\n\ndef silu(x):\n    \"\"\"\n    SiLU function\n    \"\"\"\n    return x / (1 + mpc_math.exp_fx(-x))\n", "model_name": "deepseek-r1"}
{"test_name": "Gaussian_bracket", "response_0": "def Gaussian_bracket(x):\n    x_int_truncated = x.to_sint()\n    fractional_part = x - x_int_truncated\n    is_negative = sint(x < 0)\n    has_fraction = sint(fractional_part != 0)\n    adjustment = is_negative * has_fraction\n    x_floor = x_int_truncated - adjustment\n    return x - x_floor\n", "response_1": "from Compiler import mpc_math\n\ndef Gaussian_bracket(x):\n    \"\"\"\n    Return the value of Gaussian large bracket.\n    \"\"\"\n    x_floor = mpc_math.floor_fx(x)\n    return x - x_floor\n", "model_name": "deepseek-r1"}
{"test_name": "asin_and_square", "response_0": "def asin_and_square(x):\n    import mpc_math\n    arcsin_result = mpc_math.asin(x)\n    return arcsin_result ** 2\n", "response_1": "import mpc_math\n\ndef asin_and_square(x):\n    \"\"\"\n    Take arcsin to the input, then compute the square of the outcome.\n    \"\"\"\n    return mpc_math.asin(x) ** 2\n", "model_name": "deepseek-r1"}
{"test_name": "cylinder_surface", "response_0": "from Compiler.types import cfix, sfix\n\ndef cylinder_surface(r, h):\n    \"\"\"\n    Given the radius and the height of a cylinder, return its surface area. \n    \"\"\"\n    pi = cfix(3.141592653589793)\n    r_squared = r * r\n    return 2 * pi * r_squared + 2 * pi * r * h\n", "response_1": "from Compiler.types import sfix, cfix\n\ndef cylinder_surface(r, h):\n    \"\"\"\n    Given the radius and the height of a cylinder, return its surface area. \n    \"\"\"\n    pi = cfix(3.141592653589793)\n    return cfix(2) * pi * r * r + cfix(2) * pi * r * h\n", "model_name": "deepseek-r1"}
{"test_name": "radian_to_degree", "response_0": "def radian_to_degree(r):\n    \"\"\"\n    Converting radian to degree\n    \"\"\"\n    import math\n    return r / cfix(math.pi) * cfix(180)\n", "response_1": "def radian_to_degree(r):\n    \"\"\"\n    Converting radian to degree\n    \"\"\"\n    return r * (sfix(180) / sfix.get_precision().pi)\n", "model_name": "deepseek-r1"}
{"test_name": "square_root", "response_0": "from mpc_math import sqrt\n\ndef square_root(a):\n    \"\"\"\n    return the square root of the input.\n    \"\"\"\n    return sqrt(a)\n", "response_1": "import mpc_math\ndef square_root(a):\n    return mpc_math.sqrt(a)\n", "model_name": "deepseek-r1"}
{"test_name": "cosine_theorem", "response_0": "from Compiler import mpc_math\n\ndef cosine_theorem(a, b, rad):\n    \"\"\"\n    Given the two edges a, b and the angle rad between them,\n    use cosine theorem to compute the length of the third edge.\n    \"\"\"\n    return mpc_math.sqrt(a**2 + b**2 - 2 * a * b * mpc_math.cos(rad))\n", "response_1": "def cosine_theorem(a, b, rad):\n    from Compiler import mpc_math\n    return mpc_math.sqrt((a * a) + (b * b) - (2 * a * b * mpc_math.cos(rad)))\n", "model_name": "deepseek-r1"}
{"test_name": "lights_states", "response_0": "def lights_states(num):\n    return cint(2) ** num\n", "response_1": "def lights_states(num):\n    \"\"\"\n    Given the number of lights (all different), compute the total number of possible states. \n    (Each light has two states: on/off)\n    \"\"\"\n    return 2 ** num\n", "model_name": "deepseek-r1"}
{"test_name": "degree_to_radian", "response_0": "def degree_to_radian(d):\n    return d * cfix(3.141592653589793) / cfix(180)\n", "response_1": "def degree_to_radian(d):\n    import math\n    from Compiler.types import cfix\n    return d * cfix(math.pi) / 180\n", "model_name": "deepseek-r1"}
{"test_name": "Fah_to_Cel", "response_0": "from Compiler.types import sfix\n\ndef Fah_to_Cel(F):\n    \"\"\"Convert Fahrenheit temperature to Celsius temperature.\"\"\"\n    return (F - 32) / 1.8\n", "response_1": "def Fah_to_Cel(F):\n    \"\"\"\n    Convert Fahrenheit temperature to Celsius temperature.\n    \"\"\"\n    return (F - cfix(32)) / cfix(1.8)\n", "model_name": "deepseek-r1"}
{"test_name": "elliptic_area", "response_0": "def elliptic_area(a, b):\n    \"\"\"\n    Given the lengths of major axis and minor axis of the elliptic, return its area. \n    \"\"\"\n    return sfix.pi * a * b\n", "response_1": "import math\nfrom Compiler.types import *\n\ndef elliptic_area(a, b):\n    return cfix(math.pi) * a * b\n", "model_name": "deepseek-r1"}
{"test_name": "floor", "response_0": "def floor(z):\n    \"\"\"\n    Return the maximum integer no bigger than the input.\n    \"\"\"\n    return z.v >> sfix.f\n", "response_1": "def floor(z):\n    \"\"\"\n    Return the maximum integer no bigger than the input.\n    \"\"\"\n    return z - (z % 1)\n", "model_name": "deepseek-r1"}
{"test_name": "log_and_cube", "response_0": "def log_and_cube(x):\n    from Compiler import mpc_math\n    log_val = mpc_math.log_fx(x, 2)\n    return mpc_math.pow_fx(log_val, 3)\n", "response_1": "from Compiler import mpc_math\n\ndef log_and_cube(x):\n    \"\"\"\n    take log (with base-2) to the input, then compute the cube of the outcome\n    \"\"\"\n    log_val = mpc_math.log_fx(x, 2)\n    return log_val ** 3\n", "model_name": "deepseek-r1"}
{"test_name": "floor_and_square", "response_0": "def floor_and_square(z):\n    floor_val = sint(z) >> sfix.f\n    return floor_val * floor_val\n", "response_1": "def floor_and_square(z):\n    \"\"\"Calculate floor of secret fixed-point number and return square\"\"\"\n    floor_val = z.floor()\n    return floor_val * floor_val\n", "model_name": "deepseek-r1"}
{"test_name": "meters_to_feet", "response_0": "from Compiler.types import sfix, cfix\n\ndef meters_to_feet(m):\n    \"\"\"\n    Convert the length in meters to the length in feet.\n    \"\"\"\n    return m * cfix(3.2808)\n", "response_1": "def meters_to_feet(m):\n    \"\"\"\n    Convert the length in meters to the length in feet.\n    \"\"\"\n    return m * 3.2808\n", "model_name": "deepseek-r1"}
{"test_name": "sphere_area", "response_0": "def sphere_area(r):\n    \"\"\"\n    Return the area of a sphere surface with given radius r.\n    \"\"\"\n    from .mpc_math import PI\n    return 4 * PI * r * r\n", "response_1": "def sphere_area(r):\n    \"\"\"\n    Return the area of a sphere surface with given radius r.\n    \"\"\"\n    return 4 * sfix.get_pi() * r ** 2\n", "model_name": "deepseek-r1"}
{"test_name": "coarse_abs", "response_0": "from Compiler import mpc_math\n\ndef coarse_abs(x):\n    \"\"\"\n    Return the absolute value of x, and round it to zero.\n    \"\"\"\n    return mpc_math.floor_fx(abs(x))\n", "response_1": "from Compiler.types import sfix\n\ndef coarse_abs(x):\n    \"\"\"\n    Return the absolute value of x, and round it to zero.\n    \"\"\"\n    abs_x = x.abs()\n    f = sfix.f\n    sint_val = abs_x.val\n    integer_part = sint_val >> f\n    scaled_integer = integer_part << f\n    return sfix(scaled_integer)\n", "model_name": "deepseek-r1"}
{"test_name": "how_many_chickens", "response_0": "def how_many_chickens(heads: sint, legs: sint) -> sint:\n    \"\"\"\n    Compute the number of chickens in the rabbit-chicken problem.\n    \"\"\"\n    return heads - (legs - heads * 2) / 2\n", "response_1": "def how_many_chickens(heads, legs):\n    \"\"\"\n    Compute the number of chickens in the rabbit-chicken problem.\n    Secret integer version for MPC.\n    \"\"\"\n    return heads - ((legs - heads * 2) // 2)\n", "model_name": "deepseek-r1"}
{"test_name": "interest_calculator", "response_0": "from Compiler import mpc_math\n\ndef interest_calculator(capital, ratio, months):\n    \"\"\"\n    Given the initial capital (sfix), interest ratio (sfix), and the number of months (cint), \n    calculate the interest you can get (sfix).\n    \"\"\"\n    return (mpc_math.pow_fx(1 + ratio, months) - 1) * capital\n", "response_1": "def interest_calculator(capital, ratio, months):\n    import mpc_math\n    one = sfix(1)\n    return (mpc_math.pow_fx(one + ratio, months) - one) * capital\n", "model_name": "deepseek-r1"}
{"test_name": "circle_area", "response_0": "def circle_area(r):\n    \"\"\"\n    Return the area of the circle with given radius.\n    \"\"\"\n    return sfix.get_precision().PI * r * r\n", "response_1": "def circle_area(r):\n    \"\"\"\n    Return the area of the circle with given radius.\n    \"\"\"\n    import math\n    from Compiler.types import cfix\n    pi = cfix(math.pi)\n    return pi * r ** 2\n", "model_name": "deepseek-r1"}
{"test_name": "cube_and_square_root", "response_0": "def cube_and_square_root(x):\n    from mpc_math import pow_fx, sqrt\n    cubed = pow_fx(x, 3)\n    return sqrt(cubed)\n", "response_1": "import mpc_math\n\ndef cube_and_square_root(x):\n    \"\"\"\n    take cube to the input, then compute the square root of the outcome\n    \"\"\"\n    cubed = mpc_math.pow_fx(x, 3)\n    return mpc_math.sqrt(cubed)\n", "model_name": "deepseek-r1"}
{"test_name": "round", "response_0": "from Compiler.types import sfix, sint\nfrom Compiler.library import *\n\ndef round(x):\n    x_trunc = x.to_sint()\n    fractional = x - sfix(x_trunc)\n    is_negative = x < 0\n    has_fraction = fractional != 0\n    adjust = is_negative & has_fraction\n    x_floor = x_trunc - adjust.if_else(1, 0)\n    add_one = (x - sfix(x_floor)) >= 0.5\n    return x_floor + sint(add_one)\n", "response_1": "from Compiler.types import *\n\ndef round(x):\n    half = cfix(0.5)\n    x_plus_half = x + half\n    integer_part = x_plus_half.v >> sfix.f\n    return integer_part\n", "model_name": "deepseek-r1"}
{"test_name": "cryptic_adjustment", "response_0": "def cryptic_adjustment(origin):\n    from Compiler import mpc_math\n    return 10 * mpc_math.sqrt(10 * mpc_math.sqrt(origin))\n", "response_1": "def cryptic_adjustment(origin):\n    from Compiler import mpc_math\n    return 10 * mpc_math.sqrt(10 * mpc_math.sqrt(origin))\n", "model_name": "deepseek-r1"}
{"test_name": "specific_pow", "response_0": "def specific_pow(x):\n    import mpc_math\n    return mpc_math.pow_fx(x, cfix(2.5))\n", "response_1": "def specific_pow(x):\n    from mpc_math import pow_fx\n    return pow_fx(x, cfix(2.5))\n", "model_name": "deepseek-r1"}
{"test_name": "soft_plus", "response_0": "import math\nfrom mpc_math import pow_fx, log_fx\n\ndef soft_plus(x):\n    e = cfix(math.e)\n    exp_term = pow_fx(e, x)\n    sum_exp = exp_term + 1\n    return log_fx(sum_exp, e)\n", "response_1": "from Compiler import mpc_math\nimport math\n\ndef soft_plus(x):\n    e = sfix(math.e)\n    ex = e ** x\n    sum_ex = ex + 1\n    return mpc_math.log_fx(sum_ex, e)\n", "model_name": "deepseek-r1"}
{"test_name": "ball_volume", "response_0": "from Compiler.types import *\nimport mpc_math\n\ndef ball_volume(r):\n    \"\"\"\n    Return the volume of the ball with given radius.\n    \"\"\"\n    pi = cfix(3.141592653589793)\n    four_thirds = cfix(4) / cfix(3)\n    r_cubed = r * r * r\n    return four_thirds * pi * r_cubed\n", "response_1": "def ball_volume(r):\n    \"\"\"\n    Return the volume of the ball with given radius.\n    \"\"\"\n    pi_val = cfix(3.141592653589793)\n    return (pi_val * r**3 * cfix(4)) / cfix(3)\n", "model_name": "deepseek-r1"}
{"test_name": "Heron", "response_0": "import mpc_math\n\ndef Heron(a, b, c):\n    p = (a + b + c) / 2.0\n    product = p * (p - a) * (p - b) * (p - c)\n    return mpc_math.sqrt(product)\n", "response_1": "from Compiler import mpc_math\n\ndef Heron(a, b, c):\n    \"\"\"\n    Given the lengths of three sides of the triangle, compute its area with Heron's formula.\n    All inputs and outputs are secret fixed-point numbers (sfix).\n    \"\"\"\n    p = (a + b + c) / 2\n    product = p * (p - a) * (p - b) * (p - c)\n    return mpc_math.sqrt(product)\n", "model_name": "deepseek-r1"}
{"test_name": "next_perfect_square", "response_0": "from Compiler.types import sint, sfix\nfrom Compiler import mpc_math\n\ndef next_perfect_square(x):\n    f = 20  # Default fixed-point precision\n    x_fix = sfix(x)\n    sqrt_fix = mpc_math.sqrt(x_fix)\n    sqrt_int = sqrt_fix.v >> f\n    next_val = sqrt_int + 1\n    return next_val * next_val\n", "response_1": "from Compiler.types import sint\nfrom Compiler.library import for_range\n\ndef next_perfect_square(x):\n    low = sint(0)\n    high = x\n    best = sint(0)\n    for _ in range(64):\n        mid = (low + high) // 2\n        mid_sq = mid * mid\n        cmp = mid_sq <= x\n        best = cmp.if_else(mid, best)\n        low = cmp.if_else(mid + 1, low)\n        high = cmp.if_else(high, mid - 1)\n    next_n = best + 1\n    return next_n * next_n\n", "model_name": "deepseek-r1"}
{"test_name": "pi_to_the_x", "response_0": "def pi_to_the_x(x):\n    from Compiler import mpc_math\n    import math\n    return mpc_math.pow_fx(sfix(math.pi), x)\n", "response_1": "from Compiler import mpc_math\nimport math\n\ndef pi_to_the_x(x):\n    \"\"\"\n    Return the value of pi^x.\n    \"\"\"\n    pi = sfix(math.pi)\n    return mpc_math.pow_fx(pi, x)\n", "model_name": "deepseek-r1"}
{"test_name": "spring_rocket", "response_0": "def spring_rocket(height, m, k):\n    from Compiler import mpc_math\n    g = cfix(9.8)\n    return mpc_math.sqrt(2 * m * g * height / k)\n", "response_1": "from Compiler import mpc_math\nfrom Compiler.types import sfix, cfix\n\ndef spring_rocket(height, m, k):\n    g = cfix(9.8)\n    numerator = 2 * m * g * height\n    inside_sqrt = numerator / k\n    return mpc_math.sqrt(inside_sqrt)\n", "model_name": "deepseek-r1"}
{"test_name": "cone_volume", "response_0": "from mpc_math import PI\n\ndef cone_volume(r, h):\n    return (PI * r * r * h) / 3.0\n", "response_1": "from Compiler.types import sfix, cfix\nfrom Compiler import mpc_math\nimport math\n\ndef cone_volume(r, h):\n    \"\"\"\n    Given the secret radius and height, compute the secret volume of the cone.\n    \"\"\"\n    pi = cfix(math.pi)\n    return (pi * r * r * h) / 3\n", "model_name": "deepseek-r1"}
{"test_name": "how_many_rabbits", "response_0": "def how_many_rabbits(heads, legs):\n    \"\"\"\n    Compute the number of rabbits in the rabbit-chicken problem.\n    \"\"\"\n    return (legs - heads * 2) / 2\n", "response_1": "def how_many_rabbits(heads, legs):\n    \"\"\"\n    Compute the number of rabbits in the rabbit-chicken problem.\n    \"\"\"\n    return (legs - heads * 2) // 2\n", "model_name": "deepseek-r1"}
