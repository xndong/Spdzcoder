{"test_name": "multiply_first_five", "response_0": "from Compiler.types import sint, Array\n\ndef multiply_first_five(array: Array):\n    \"\"\"\n    Multiply the first five elements in the array (if len(array)<5 then multiply all)\n    \"\"\"\n    prod = sint(1)\n    for i in range(min(5, len(array))):\n        prod *= array[i]\n    return prod\n", "response_1": "from Compiler.types import sint, Array\n\ndef multiply_first_five(array):\n    \"\"\"\n    Multiply the first five elements in the array (if len(array)<5 then multiply all)\n    \"\"\"\n    prod = sint(1)\n    for i in range(len(array)):\n        prod *= array[i]\n        if i >= 4:\n            break\n    return prod\n", "model_name": "deepseek-v2.5"}
{"test_name": "second_largest", "response_0": "def second_largest(arr):\n    largest = arr[0] if arr[0] >= arr[1] else arr[1]\n    second = arr[1] if arr[0] >= arr[1] else arr[0]\n    \n    for i in range(2, len(arr)):\n        cond1 = arr[i] >= largest\n        cond2 = arr[i] >= second\n        \n        second = cond1.if_else(largest, cond2.if_else(arr[i], second))\n        largest = cond1.if_else(arr[i], largest)\n    \n    return second\n", "response_1": "from Compiler import types\n\ndef second_largest(arr: types.Array):\n    \"\"\"\n    Return the second largest element in the array.\n    \"\"\"\n    largest = arr[0] if arr[0] >= arr[1] else arr[1]\n    second = arr[1] if arr[0] >= arr[1] else arr[0]\n    \n    for i in range(2, len(arr)):\n        cond1 = arr[i] >= largest\n        cond2 = arr[i] >= second\n        \n        second = cond1.if_else(largest, second)\n        largest = cond1.if_else(arr[i], largest)\n        \n        second = cond2.if_else(arr[i], second)\n    \n    return second\n", "model_name": "deepseek-v2.5"}
{"test_name": "partial_sum", "response_0": "from Compiler import types\n\ndef partial_sum(arr: types.Array):\n    \"\"\"\n    Compute the partial sum of the array.\n    \"\"\"\n    partial = types.sfix(0)\n    for i in range(len(arr)):\n        partial += arr[i]\n        arr[i] = partial\n    return arr\n", "response_1": "from Compiler import types\n\ndef partial_sum(arr: types.Array):\n    \"\"\"\n    Compute the partial sum of the array.\n    \"\"\"\n    partial = types.sfix(0)\n    for i in range(len(arr)):\n        partial += arr[i]\n        arr[i] = partial\n    return arr\n", "model_name": "deepseek-v2.5"}
{"test_name": "max_adjacent_product", "response_0": "from Compiler.types import sfix, Array\nfrom Compiler.library import tree_reduce\n\ndef max_adjacent_product(arr: Array):\n    \"\"\"\n    Return the max product of adjacent elements in the array.\n    The input array is guaranteed to have length at least 2. \n    \"\"\"\n    cur = arr[0] * arr[1]\n    for i in range(len(arr) - 1):\n        product = arr[i] * arr[i+1]\n        cur = cur.max(product)\n    return cur\n", "response_1": "from Compiler import types\n\ndef max_adjacent_product(arr: types.Array):\n    \"\"\"\n    Return the max product of adjacent elements in the array.\n    The input array is guaranteed to have length at least 2. \n    \"\"\"\n    cur = arr[0] * arr[1]\n    for i in range(len(arr) - 1):\n        product = arr[i] * arr[i + 1]\n        cur = types.sint.max(cur, product)\n    return cur\n", "model_name": "deepseek-v2.5"}
{"test_name": "argmax", "response_0": "from Compiler import types\n\ndef argmax(a):\n    \"\"\"\n    Return the index of the max value of an array.\n    \"\"\"\n    current = a[0]\n    index = types.cint(0)\n    for i in range(len(a)):\n        condition = current >= a[i]\n        index = condition.if_else(index, types.cint(i))\n        current = condition.if_else(current, a[i])\n    return index\n", "response_1": "from Compiler import types\n\ndef argmax(a):\n    \"\"\"\n    Return the index of the max value of an array.\n    \"\"\"\n    current = a[0]\n    index = types.cint(0)\n    for i in range(len(a)):\n        cond = current >= a[i]\n        index = cond.if_else(index, types.cint(i))\n        current = cond.if_else(current, a[i])\n    return index\n", "model_name": "deepseek-v2.5"}
{"test_name": "count_distinct", "response_0": "from Compiler import types\n\ndef count_distinct(arr: types.Array):\n    \"\"\"\n    Return the number of distinct values in the array.\n    \"\"\"\n    counter = types.sint(0)\n    for i in range(len(arr)):\n        unique = types.sint(1)\n        for j in range(i):\n            is_equal = arr[j] == arr[i]\n            unique = unique.bit_and(types.sint(1) - is_equal)\n        counter = counter + unique\n    return counter\n", "response_1": "from Compiler import types\n\ndef count_distinct(arr: types.Array):\n    \"\"\"\n    Return the number of distinct values in the array.\n    \"\"\"\n    counter = types.sint(0)\n    for i in range(len(arr)):\n        unique = types.sint(1)\n        for j in range(i):\n            equal = arr[j] == arr[i]\n            unique = unique.bit_and(1 - equal)\n        counter += unique\n    return counter\n", "model_name": "deepseek-v2.5"}
{"test_name": "exists_true", "response_0": "from Compiler import types\n\ndef exists_true(arr):\n    \"\"\"\n    Check whether the boolean array contains a True.\n    \"\"\"\n    ret = types.sint(0)  # Initialize ret as a secret integer with value 0\n    for item in arr:\n        ret = ret.bit_or(item)  # Use bit_or for logical OR operation\n    return ret\n", "response_1": "from Compiler.types import sfix, sint, Array\n\ndef exists_true(arr: Array):\n    \"\"\"\n    Check whether the boolean array contains a True.\n    \"\"\"\n    ret = sint(0)\n    for item in arr:\n        ret = ret.bit_or(item)\n    return ret\n", "model_name": "deepseek-v2.5"}
{"test_name": "range", "response_0": "from Compiler.types import sint, Array\nfrom Compiler.library import tree_reduce\n\ndef range(arr: Array):\n    \"\"\"\n    Return the range of the array.\n    \"\"\"\n    max_value = tree_reduce(lambda x, y: x.max(y), arr)\n    min_value = tree_reduce(lambda x, y: x.min(y), arr)\n    return max_value - min_value\n", "response_1": "from Compiler.types import sfix, Array\n\ndef range(arr: Array):\n    \"\"\"\n    Return the range of the array.\n    \"\"\"\n    max_value = arr[0]\n    min_value = arr[0]\n    for item in arr:\n        max_value = max_value.max(item)\n        min_value = min_value.min(item)\n    return max_value - min_value\n", "model_name": "deepseek-v2.5"}
{"test_name": "count_larger_than_5", "response_0": "from Compiler import types\n\ndef count_larger_than_5(arr):\n    \"\"\"\n    Count the number of elements in the given array larger than 5.\n    \"\"\"\n    counter = types.sint(0)\n    five = types.sint(5)\n    \n    for item in arr:\n        if item > five:\n            counter = counter + types.sint(1)\n    \n    return counter\n", "response_1": "from Compiler import types\n\ndef count_larger_than_5(arr):\n    \"\"\"\n    Count the number of elements in the given array larger than 5.\n    \"\"\"\n    counter = types.sint(0)\n    five = types.sint(5)\n    \n    for item in arr:\n        is_larger = item > five\n        counter += is_larger\n    \n    return counter\n", "model_name": "deepseek-v2.5"}
{"test_name": "exists_dominator", "response_0": "from Compiler.types import sfix, sint, Array\nfrom Compiler.mpc_math import abs_fx\n\ndef exists_dominator(arr: Array):\n    max = sfix(0)\n    sum = sfix(0)\n    for i in range(len(arr)):\n        item = arr[i]\n        abs_item = abs_fx(item)\n        max = abs_item if abs_item > max else max\n        sum = sum + abs_item\n    return 2 * max > sum\n", "response_1": "from Compiler.types import sfix, Array\nfrom Compiler.library import tree_reduce\nimport Compiler.mpc_math as mpc_math\n\ndef exists_dominator(arr: Array):\n    \"\"\"\n    Check whether there exists a dominator in the given array, \n    whose absolute value is strictly larger than the sum of the absolute values of all other elements. \n    \"\"\"\n    max_val = sfix(0)\n    sum_val = sfix(0)\n\n    for item in arr:\n        abs_item = mpc_math.abs(item)\n        max_val = mpc_math.max(max_val, abs_item)\n        sum_val = sum_val + abs_item\n\n    return 2 * max_val > sum_val\n", "model_name": "deepseek-v2.5"}
{"test_name": "greedy_picker", "response_0": "from Compiler.types import sint, cint, Array\n\ndef greedy_picker(items, captivity):\n    num = cint(0)\n    for item in items:\n        if item <= captivity:\n            captivity -= item\n            num += 1\n    return num\n", "response_1": "from Compiler import types\n\ndef greedy_picker(items: types.Array, captivity: types.sint) -> types.sint:\n    \"\"\"\n    There is a greedy picker with a bag picking items. \n    Once the picker sees an item that his bag has space for, he will pick up the item (which will take some space) and put it into his bag. \n    You should compute how many items the greedy picker can finally get with the greedy strategy. \n    \"\"\"\n    num = types.sint(0)\n    for i in range(len(items)):\n        item = items[i]\n        can_pick = item <= captivity\n        captivity = types.if_else(can_pick, captivity - item, captivity)\n        num = types.if_else(can_pick, num + 1, num)\n    return num\n", "model_name": "deepseek-v2.5"}
{"test_name": "scalar_add_array", "response_0": "def scalar_add_array(s, l):\n    \"\"\"\n    Add all the elements in the array to the scalar and return the result.\n    \"\"\"\n    for item in l:\n        s = s + item\n    return s\n", "response_1": "from Compiler.types import sfix, sint, Array\n\ndef scalar_add_array(s, l):\n    \"\"\"\n    Add all the elements in the array to the scalar and return the result.\n    \"\"\"\n    for i in range(len(l)):\n        s += l[i]\n    return s\n", "model_name": "deepseek-v2.5"}
{"test_name": "is_equidistant_seq", "response_0": "from Compiler.types import Array, sint\n\ndef is_equidistant_seq(arr: Array):\n    \"\"\"\n    Return whether or not the array is an equidistant sequence. \n    If the array has length 1 or 0, return True.\n    \"\"\"\n    n = len(arr)\n    if n <= 1:\n        return sint(1)\n    \n    d = arr[1] - arr[0]\n    for i in range(1, n-1):\n        if (arr[i+1] - arr[i]) != d:\n            return sint(0)\n    return sint(1)\n", "response_1": "from Compiler import types\n\ndef is_equidistant_seq(arr: types.Array):\n    \"\"\"\n    Return whether or not the array is an equidistant sequence. \n    If the array has length 1 or 0, return True.\n    \"\"\"\n    n = len(arr)\n    if n <= 1:\n        return types.sint(1)\n    \n    d = arr[1] - arr[0]\n    for i in range(1, n-1):\n        current_diff = arr[i+1] - arr[i]\n        is_equidistant = (current_diff == d)\n        if not is_equidistant.if_else(1, 0):\n            return types.sint(0)\n    return types.sint(1)\n", "model_name": "deepseek-v2.5"}
{"test_name": "inner_product", "response_0": "from Compiler import types\n\ndef inner_product(vec1, vec2):\n    \"\"\"\n    Compute the inner product of the two arrays.\n    \"\"\"\n    sum = types.sfix(0)\n    for i in range(len(vec1)):\n        sum += vec1[i] * vec2[i]\n    return sum\n", "response_1": "from Compiler.types import sint, Array\n\ndef inner_product(vec1, vec2):\n    \"\"\"\n    Compute the inner product of the two arrays.\n    \"\"\"\n    sum = sint(0)\n    for i in range(len(vec1)):\n        sum += vec1[i] * vec2[i]\n    return sum\n", "model_name": "deepseek-v2.5"}
{"test_name": "more_distinct_nonnegative", "response_0": "from Compiler import types\n\ndef more_distinct_nonnegative(arr: types.Array):\n    nonnegative_counter = types.cint(0)\n    negative_counter = types.cint(0)\n    for i in range(len(arr)):\n        unique = types.sint(1)\n        for j in range(i):\n            unique = unique.bit_and(arr[j] != arr[i])\n        if_cond = unique.bit_and(arr[i] >= 0)\n        nonnegative_counter += if_cond.if_else(1, 0)\n        negative_counter += unique.bit_and(arr[i] < 0).if_else(1, 0)\n    return nonnegative_counter > negative_counter\n", "response_1": "from Compiler.types import sint, Array\n\ndef more_distinct_nonnegative(arr):\n    \"\"\"\n    Return whether the array has more distinct nonnegative elements than distinct negative elements.\n    \"\"\"\n    nonnegative_counter = sint(0)\n    negative_counter = sint(0)\n    n = len(arr)\n    \n    for i in range(n):\n        unique = sint(1)\n        for j in range(i):\n            unique = unique.bit_and(arr[j] != arr[i])\n        \n        nonnegative_counter = nonnegative_counter + (arr[i] >= 0).if_else(unique, 0)\n        negative_counter = negative_counter + (arr[i] < 0).if_else(unique, 0)\n    \n    return nonnegative_counter > negative_counter\n", "model_name": "deepseek-v2.5"}
{"test_name": "flip_positives", "response_0": "from Compiler.types import sint, Array\n\ndef flip_positives(array):\n    \"\"\"\n    Flip the positive elements in the array\n    \"\"\"\n    for i in range(len(array)):\n        if array[i] <= 0:\n            continue\n        array[i] = -array[i]\n    return array\n", "response_1": "from Compiler import types\n\ndef flip_positives(array):\n    \"\"\"\n    Flip the positive elements in the array\n    \"\"\"\n    for i in range(len(array)):\n        if array[i] <= 0:\n            continue\n        array[i] = -array[i]\n    return array\n", "model_name": "deepseek-v2.5"}
{"test_name": "divide_and_plus", "response_0": "from Compiler import types\n\ndef divide_and_plus(x: types.sfix) -> types.sfix:\n    \"\"\"\n    Repeat the following to the input for 4 times:\n    divide by 2, then plus 1\n    \"\"\"\n    for i in range(4):\n        x = x / 2\n        x = x + 1\n    return x\n", "response_1": "def divide_and_plus(x):\n    \"\"\"\n    Repeat the following to the input for 4 times:\n    divide by 2, then plus 1\n    \"\"\"\n    for i in range(4):\n        x = x / 2\n        x = x + 1\n    return x\n", "model_name": "deepseek-v2.5"}
{"test_name": "array_log2", "response_0": "from Compiler.types import sfix, Array\nimport Compiler.mpc_math as mpc_math\n\ndef array_log2(arr):\n    \"\"\"\n    Take logarithm with base two to all elements in the input array.\n    \"\"\"\n    for i in range(len(arr)):\n        arr[i] = mpc_math.log_fx(arr[i], sfix(2))\n    return arr\n", "response_1": "from Compiler.types import sfix, Array\nimport Compiler.mpc_math\n\ndef array_log2(arr):\n    \"\"\"\n    Take logarithm with base two to all elements in the input array.\n    \"\"\"\n    for i in range(len(arr)):\n        arr[i] = Compiler.mpc_math.log_fx(arr[i], 2)\n    return arr\n", "model_name": "deepseek-v2.5"}
{"test_name": "sum_to_ten", "response_0": "from Compiler.types import sint, Array\n\ndef sum_to_ten(array: Array):\n    \"\"\"\n    Compute partial sum of the array until the sum becomes no smaller than 10.\n    \"\"\"\n    sum = sint(0)\n    for i in range(len(array)):\n        sum += array[i]\n        if sum >= 10:\n            break\n    return sum\n", "response_1": "from Compiler import types\n\ndef sum_to_ten(array: types.Array):\n    \"\"\"\n    Compute partial sum of the array until the sum becomes no smaller than 10.\n    \"\"\"\n    sum = types.sfix(0)\n    for i in range(len(array)):\n        sum += array[i]\n        if sum >= types.sfix(10):\n            break\n    return sum\n", "model_name": "deepseek-v2.5"}
{"test_name": "choppy_plus_minus", "response_0": "def choppy_plus_minus(arr: sint.Array):\n    \"\"\"\n    Return the array with the following modification of the input array:\n    For the element with odd index, increment the element by 1, \n    for the element with even index, decrement the element by 1. \n    \"\"\"\n    for i in range(len(arr)):\n        if i % 2:\n            arr[i] = arr[i] + 1\n        else:\n            arr[i] = arr[i] - 1\n    return arr\n", "response_1": "from Compiler import types\n\ndef choppy_plus_minus(arr: types.Array):\n    \"\"\"\n    Return the array with the following modification of the input array:\n    For the element with odd index, increment the element by 1, \n    for the element with even index, decrement the element by 1. \n    \"\"\"\n    for i in range(arr.length):\n        if i % 2:\n            arr[i] += 1\n        else:\n            arr[i] -= 1\n    return arr\n", "model_name": "deepseek-v2.5"}
{"test_name": "min_element", "response_0": "from Compiler.types import sint, Array\n\ndef min_element(a):\n    \"\"\"\n    Return the minimum value of an array.\n    \"\"\"\n    current = a[0]\n    for i in range(len(a)):\n        current = current.min(a[i])\n    \n    return current\n", "response_1": "from Compiler.types import sint, Array\n\ndef min_element(a):\n    \"\"\"\n    Return the minimum value of an array.\n    \"\"\"\n    current = a[0]\n    for i in range(len(a)):\n        current = current.min(a[i])\n    \n    return current\n", "model_name": "deepseek-v2.5"}
{"test_name": "soft_max", "response_0": "from Compiler import types\nfrom Compiler.mpc_math import exp_fx, log_fx\n\ndef soft_max(arr: types.Array):\n    \"\"\"\n    Return the array of soft-max of the input array. \n    \"\"\"\n    denominator = types.sfix(0)\n    for item in arr:\n        denominator += exp_fx(item)\n    \n    brr = types.Array(len(arr), types.sfix)\n    for i in range(len(arr)):\n        brr[i] = exp_fx(arr[i]) / denominator\n    \n    return brr\n", "response_1": "from Compiler.types import sfix, Array\nimport Compiler.mpc_math as mpc_math\n\ndef soft_max(arr):\n    \"\"\"\n    Return the array of soft-max of the input array.\n    \"\"\"\n    denominator = sfix(0)\n    for item in arr:\n        denominator += mpc_math.exp(item)\n    \n    brr = Array(len(arr), sfix)\n    for i in range(len(arr)):\n        brr[i] = mpc_math.exp(arr[i]) / denominator\n    \n    return brr\n", "model_name": "deepseek-v2.5"}
{"test_name": "count_reverse_pair_with_break", "response_0": "from Compiler import types\n\ndef count_reverse_pair_with_break(arr: types.Array):\n    \"\"\"\n    Count the number of reverse pairs before we find an element bigger than 10\n    \"\"\"\n    count = types.sint(0)\n    for i in range(1, len(arr)):\n        if arr[i] > types.sint(10):\n            break\n        for j in range(i):\n            if arr[j] > arr[i]:\n                count += types.sint(1)\n    return count\n", "response_1": "from Compiler import types\n\ndef count_reverse_pair_with_break(arr: types.Array):\n    \"\"\"\n    Count the number of reverse pairs before we find an element bigger than 10\n    \"\"\"\n    count = types.sint(0)\n    for i in range(1, arr.length):\n        if arr[i] > 10:\n            break\n        for j in range(i):\n            if arr[j] > arr[i]:\n                count += 1\n    return count\n", "model_name": "deepseek-v2.5"}
{"test_name": "sum_unique", "response_0": "from Compiler import types\n\ndef sum_unique(arr: types.Array):\n    \"\"\"\n    Return the sum of unique elements in the array.\n    \"\"\"\n    sum = types.sfix(0)\n    for i in range(len(arr)):\n        unique = types.sint(1)\n        for j in range(len(arr)):\n            cond = (arr[j] == arr[i]) & (j != i)\n            unique = unique.bit_and(types.sint(1) - cond)\n        if unique.reveal() == 1:\n            sum = sum + arr[i]\n    return sum\n", "response_1": "from Compiler import types\n\ndef sum_unique(arr):\n    \"\"\"\n    Return the sum of unique elements in the array.\n    \"\"\"\n    sum = types.sfix(0)\n    for i in range(len(arr)):\n        unique = types.sint(1)\n        for j in range(len(arr)):\n            if arr[j] == arr[i] and j != i:\n                unique = types.sint(0)\n                break\n        if unique == types.sint(1):\n            sum = sum + arr[i]\n    return sum\n", "model_name": "deepseek-v2.5"}
{"test_name": "check_sum", "response_0": "from Compiler import types\n\ndef check_sum(array, target):\n    \"\"\"\n    Check whether the sum of the array equals the target value.\n    \"\"\"\n    sum = types.sfix(0)\n    for num in array:\n        sum += num\n    return sum == target\n", "response_1": "from Compiler import types\n\ndef check_sum(array: types.Array, target: types.sfix) -> types.sint:\n    \"\"\"\n    Check whether the sum of the array equals the target value.\n    \"\"\"\n    sum = types.sfix(0)\n    for num in array:\n        sum += num\n    return sum == target\n", "model_name": "deepseek-v2.5"}
{"test_name": "prod", "response_0": "def prod(array):\n    \"\"\"\n    Multiply together all elements in the array. \n    \"\"\"\n    prod = 1\n    for num in array:\n        prod = prod * num\n    return prod\n", "response_1": "def prod(array):\n    \"\"\"\n    Multiply together all elements in the array. \n    \"\"\"\n    prod = 1\n    for num in array:\n        prod = prod * num\n    return prod\n", "model_name": "deepseek-v2.5"}
{"test_name": "sum_till_negative", "response_0": "from Compiler import types\n\ndef sum_till_negative(array: types.Array):\n    \"\"\"\n    Sum from the first element in the array until a negative one occurs\n    \"\"\"\n    sum = types.sfix(0)\n    for i in range(len(array)):\n        if array[i] < types.sfix(0):\n            break\n        sum += array[i]\n    return sum\n", "response_1": "from Compiler.types import sint, Array\n\ndef sum_till_negative(array: Array):\n    \"\"\"\n    Sum from the first element in the array until a negative one occurs\n    \"\"\"\n    sum = sint(0)\n    for i in range(len(array)):\n        if array[i] < 0:\n            break\n        sum += array[i]\n    return sum\n", "model_name": "deepseek-v2.5"}
{"test_name": "count_satisfied", "response_0": "from Compiler import types\n\ndef count_satisfied(arr: types.Array, predicator):\n    \"\"\"\n    Count the number of elements in the array that satisfy the predicator.\n    \"\"\"\n    sum = types.sint(0)\n    for i in range(len(arr)):\n        if predicator(arr[i]):\n            sum = sum + types.sint(1)\n    return sum\n", "response_1": "from Compiler.types import sint, Array\n\ndef count_satisfied(arr, predicator):\n    \"\"\"\n    Count the number of elements in the array that satisfy the predicator.\n    \"\"\"\n    sum = sint(0)\n    for i in range(len(arr)):\n        if predicator(arr[i]):\n            sum += 1\n    return sum\n", "model_name": "deepseek-v2.5"}
{"test_name": "standard_deviation", "response_0": "from Compiler import types\nimport mpc_math\n\ndef standard_deviation(arr):\n    \"\"\"\n    Return the standard deviation of the array. \n    \"\"\"\n    average = types.sfix(0)\n    variance = types.sfix(0)\n    length = len(arr)\n    \n    for item in arr:\n        average = average + item / length\n    \n    for item in arr:\n        variance = variance + (item - average) ** 2 / length\n    \n    return mpc_math.sqrt(variance)\n", "response_1": "from Compiler import types\nimport mpc_math\n\ndef standard_deviation(arr):\n    \"\"\"\n    Return the standard deviation of the array. \n    \"\"\"\n    average = types.sfix(0)\n    variance = types.sfix(0)\n    length = len(arr)\n    \n    for item in arr:\n        average += item / length\n    \n    for item in arr:\n        variance += (item - average) ** 2 / length\n    \n    return mpc_math.sqrt(variance)\n", "model_name": "deepseek-v2.5"}
{"test_name": "dominate", "response_0": "def dominate(a, b):\n    \"\"\"\n    Return whether array a \"dominates\" array b, \n    which means, every element in a is no smaller than the corresponding element in b. \n    \"\"\"\n    ret = True\n    for i in range(len(a)):\n        ret = ret.bit_and(a[i] >= b[i])\n    return ret\n", "response_1": "def dominate(a, b):\n    \"\"\"\n    Return whether array a \"dominates\" array b, \n    which means, every element in a is no smaller than the corresponding element in b. \n    \"\"\"\n    ret = sfix(1)\n    for i in range(len(a)):\n        ret = ret & (a[i] >= b[i])\n    return ret\n", "model_name": "deepseek-v2.5"}
{"test_name": "rescale", "response_0": "from Compiler.types import sfix, Array\nfrom Compiler.library import tree_reduce\n\ndef rescale(brr):\n    \"\"\"\n    To rescale the array such that the array can be fitted into [-1, 1]\n    The input is guaranteed to be nonempty with nonzero element.\n    \"\"\"\n    # Compute the maximum absolute value in the array\n    max_abs = tree_reduce(lambda x, y: x.max(y), [abs(item) for item in brr])\n    \n    # Rescale each element in the array\n    for i in range(len(brr)):\n        brr[i] = brr[i] / max_abs\n    \n    return brr\n", "response_1": "from Compiler import types\n\ndef rescale(brr):\n    \"\"\"\n    To rescale the array such that the array can be fitted into [-1, 1]\n    The input is guaranteed to be nonempty with nonzero element.\n    \"\"\"\n    max_abs = types.sfix(0)\n    for item in brr:\n        max_abs = max_abs.max(abs(item))\n    \n    for i in range(len(brr)):\n        brr[i] = brr[i] / max_abs\n    \n    return brr\n", "model_name": "deepseek-v2.5"}
{"test_name": "array_minus7", "response_0": "from Compiler.types import sint, Array\n\ndef array_minus7(arr):\n    \"\"\"\n    Subtract all elements in the input array by 7.\n    \"\"\"\n    for i in range(len(arr)):\n        arr[i] = arr[i] - 7\n    return arr\n", "response_1": "def array_minus7(arr):\n    \"\"\"\n    Subtract all elements in the input array by 7.\n    \"\"\"\n    for i in range(len(arr)):\n        arr[i] = arr[i] - 7\n    return arr\n", "model_name": "deepseek-v2.5"}
{"test_name": "traverse_and_sum", "response_0": "from Compiler import types\n\ndef traverse_and_sum(arr1: types.Array, arr2: types.Array) -> types.sfix:\n    \"\"\"\n    Traverse all pairs of elements from the two inputs, \n    compute the product of the two elements and sum all of them up. \n    \"\"\"\n    sum = types.sfix(0)\n    for i in range(len(arr1)):\n        for j in range(len(arr2)):\n            sum += arr1[i] * arr2[j]\n    return sum\n", "response_1": "from Compiler.types import sint, Array\n\ndef traverse_and_sum(arr1, arr2):\n    \"\"\"\n    Traverse all pairs of elements from the two inputs, \n    compute the product of the two elements and sum all of them up. \n    \"\"\"\n    sum = sint(0)\n    for i in range(len(arr1)):\n        for j in range(len(arr2)):\n            sum += arr1[i] * arr2[j]\n    return sum\n", "model_name": "deepseek-v2.5"}
{"test_name": "longest_nondec_subseq", "response_0": "from Compiler.types import sint, Array\n\ndef longest_nondec_subseq(a):\n    \"\"\"\n    Return the length of the longest non-decreasing subsequence in the input array.\n    \"\"\"\n    max_length = sint(0)\n    cur_length = sint(0)\n    n = len(a)\n    \n    for i in range(n):\n        if i == 0:\n            cur_length = sint(1)\n            continue\n        cond = a[i] >= a[i-1]\n        cur_length = cond.if_else(cur_length + 1, cur_length)\n        max_length = cond.if_else(max_length, max_length.max(cur_length))\n        max_length = (max_length >= cur_length).if_else(max_length, cur_length)\n    \n    return max_length\n", "response_1": "from Compiler import types\n\ndef longest_nondec_subseq(a):\n    \"\"\"\n    Return the length of the longest non-decreasing subsequence in the input array.\n    \"\"\"\n    max_length = types.sint(0)\n    cur_length = types.sint(0)\n    length = len(a)\n    \n    for i in range(length):\n        if i == 0:\n            cur_length = types.sint(1)\n            continue\n        if a[i] >= a[i-1]:\n            cur_length = cur_length + types.sint(1)\n        else:\n            max_length = max_length.max(cur_length)\n            cur_length = types.sint(1)\n    \n    max_length = max_length.max(cur_length)\n    return max_length\n", "model_name": "deepseek-v2.5"}
{"test_name": "sum_but_skip_biggest", "response_0": "from Compiler.types import sint, Array\n\ndef sum_but_skip_biggest(array):\n    \"\"\"\n    Compute partial sum of the array but skip the biggest element in until now every time.\n    \"\"\"\n    sum = sint(0)\n    biggest = array[0]\n    for i in range(len(array)):\n        if array[i] >= biggest:\n            biggest = array[i]\n            continue\n        sum += array[i]\n    return sum\n", "response_1": "from Compiler.types import sfix, Array\nfrom Compiler.library import tree_reduce\n\ndef sum_but_skip_biggest(array: Array):\n    \"\"\"\n    Compute partial sum of the array but skip the biggest element in until now every time.\n    \"\"\"\n    sum = sfix(0)\n    biggest = array[0]\n    for i in range(len(array)):\n        if array[i] >= biggest:\n            biggest = array[i]\n            continue\n        sum += array[i]\n    return sum\n", "model_name": "deepseek-v2.5"}
{"test_name": "second_test", "response_0": "from Compiler import types\n\ndef second_test(arr: types.Array):\n    \"\"\"\n    Return whether or not the first element in the array is smaller than exactly one element.\n    \"\"\"\n    count = types.sint(0)\n    for i in range(1, arr.length):\n        if arr[0] < arr[i]:\n            count += 1\n    return count == 1\n", "response_1": "from Compiler.types import sint, Array\n\ndef second_test(arr):\n    \"\"\"\n    Return whether or not the first element in the array is smaller than exactly one element.\n    \"\"\"\n    count = sint(0)\n    for i in range(1, len(arr)):\n        if arr[0] < arr[i]:\n            count += 1\n    return count == 1\n", "model_name": "deepseek-v2.5"}
{"test_name": "Manhattan_distance", "response_0": "from Compiler import types\n\ndef Manhattan_distance(a, b):\n    \"\"\"\n    Compute the Manhattan distance of the two vectors.\n    \"\"\"\n    ret = types.sfix(0)\n    for i in range(len(a)):\n        ret = ret + abs(a[i] - b[i])\n    return ret\n", "response_1": "from Compiler.types import sfix, Array\nfrom Compiler.library import tree_reduce\n\ndef Manhattan_distance(a, b):\n    \"\"\"\n    Compute the Manhattan distance of the two vectors.\n    \"\"\"\n    ret = sfix(0)\n    for i in range(len(a)):\n        ret = ret + abs(a[i] - b[i])\n    return ret\n", "model_name": "deepseek-v2.5"}
{"test_name": "deal_with_only_positive", "response_0": "from Compiler import types\n\ndef deal_with_only_positive(array):\n    \"\"\"\n    Add and subtract the positive elements in the array to the partial sum\n    Non-positive elements are skipped\n    \"\"\"\n    sign = types.sint(1)\n    sum = types.sint(0)\n    for i in range(len(array)):\n        condition = array[i] > types.sint(0)\n        sum = sum + condition.if_else(sign * array[i], types.sint(0))\n        sign = condition.if_else(-sign, sign)\n    return sum\n", "response_1": "from Compiler.types import sfix, sint, Array\n\ndef deal_with_only_positive(array: Array):\n    \"\"\"\n    Add and subtract the positive elements in the array to the partial sum\n    Non-positive elements are skipped\n    \"\"\"\n    sign = sint(1)\n    sum_val = sfix(0)\n    \n    for i in range(len(array)):\n        condition = array[i] > sfix(0)\n        sum_val = sum_val + condition.if_else(sign * array[i], sfix(0))\n        sign = condition.if_else(-sign, sign)\n    \n    return sum_val\n", "model_name": "deepseek-v2.5"}
{"test_name": "compare_and_return", "response_0": "from Compiler import types\n\ndef compare_and_return(arr, brr):\n    \"\"\"\n    Compare the elements in arrays `arr` and `brr`, and return the first index `i` with arr[i]==brr[i]\n    \"\"\"\n    ret = types.cint(-1)\n    for i in range(len(arr)):\n        cond = arr[i] == brr[i]\n        ret = types.if_else(cond, types.cint(i), ret)\n        if cond:\n            break\n    return ret\n", "response_1": "from Compiler import types\n\ndef compare_and_return(arr, brr):\n    \"\"\"\n    Compare the elements in arrays `arr` and `brr`, and return the first index `i` with arr[i]==brr[i]\n    \"\"\"\n    ret = types.cint(-1)\n    for i in range(len(arr)):\n        cond = arr[i] == brr[i]\n        ret = types.if_else(cond, types.cint(i), ret)\n        if cond:\n            break\n    return ret\n", "model_name": "deepseek-v2.5"}
{"test_name": "sum_odd_positive", "response_0": "from Compiler import types\n\ndef sum_odd_positive(arr):\n    \"\"\"\n    Return the sum of all the odd positive numbers in the array.\n    \"\"\"\n    sum = types.sfix(0)\n    for item in arr:\n        is_odd = item & 1\n        is_positive = item > types.sfix(0)\n        condition = is_odd.bit_and(is_positive)\n        sum = sum + item * condition\n    return sum\n", "response_1": "from Compiler import types\n\ndef sum_odd_positive(arr):\n    \"\"\"\n    Return the sum of all the odd positive numbers in the array.\n    \"\"\"\n    sum = types.sfix(0)\n    for item in arr:\n        is_odd = item % 2\n        is_positive = item > 0\n        condition = is_odd.bit_and(is_positive)\n        sum += condition * item\n    return sum\n", "model_name": "deepseek-v2.5"}
{"test_name": "two_sum", "response_0": "from Compiler.types import sint, Array\n\ndef two_sum(arr, target):\n    \"\"\"\n    Return whether the input array contains two elements (can be the same) whose sum equals to the target value. \n    \"\"\"\n    n = len(arr)\n    for i in range(n):\n        for j in range(n):\n            if arr[i] + arr[j] == target:\n                return sint(1)\n    return sint(0)\n", "response_1": "from Compiler.types import sint, Array\n\ndef two_sum(arr, target):\n    \"\"\"\n    Return whether the input array contains two elements (can be the same) whose sum equals to the target value. \n    \"\"\"\n    n = len(arr)\n    for i in range(n):\n        for j in range(n):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\n\n# Example usage:\n# arr = sint.Array(10)\n# target = sint(100)\n# result = two_sum(arr, target)\n", "model_name": "deepseek-v2.5"}
{"test_name": "seq_search", "response_0": "from Compiler import types\n\ndef seq_search(arr: types.Array, target: types.sint) -> types.sint:\n    \"\"\"\n    Do sequential search in the array for the target. \n    Return the index of the target, return -1 if target not found.\n    The array is guaranteed to have all different elements. \n    \"\"\"\n    result = types.sint(-1)\n    for i in range(len(arr)):\n        cond = arr[i] == target\n        result = cond.if_else(types.sint(i), result)\n    return result\n", "response_1": "def seq_search(arr, target):\n    \"\"\"\n    Do sequential search in the array for the target. \n    Return the index of the target, return -1 if target not found.\n    The array is guaranteed to have all different elements. \n    \"\"\"\n    for i in range(len(arr)):\n        if arr[i] == target:\n            return i\n    return -1\n", "model_name": "deepseek-v2.5"}
{"test_name": "choppy_array", "response_0": "from Compiler.types import sint, Array\n\ndef choppy_array(arr: Array):\n    \"\"\"\n    Return whether or not the input array is a \"choppy array\".\n    A \"choppy array\" is the following array: \n    The first element is the smallest, \n    the second is the largest of the remaining, \n    the third is the smallest of the remaining, \n    the fourth is the largest of the remaining, etc.\n    \"\"\"\n    for i in range(len(arr)):\n        for j in range(len(arr) - i):\n            condition1 = (i % 2).bit_and(arr[i + j] > arr[i])\n            condition2 = ((i % 2) == 0).bit_and(arr[i + j] < arr[i])\n            if condition1.reveal() or condition2.reveal():\n                return sint(0)\n    return sint(1)\n", "response_1": "from Compiler import types\n\ndef choppy_array(arr: types.Array):\n    \"\"\"\n    Return whether or not the input array is a \"choppy array\".\n    A \"choppy array\" is the following array: \n    The first element is the smallest, \n    the second is the largest of the remaining, \n    the third is the smallest of the remaining, \n    the fourth is the largest of the remaining, etc.\n    \"\"\"\n    for i in range(len(arr)):\n        for j in range(len(arr) - i):\n            if i % 2 == 1 and arr[i + j] > arr[i]:\n                return types.sint(0)\n            if i % 2 == 0 and arr[i + j] < arr[i]:\n                return types.sint(0)\n    return types.sint(1)\n", "model_name": "deepseek-v2.5"}
{"test_name": "array_process", "response_0": "from Compiler import types\n\ndef array_process(arr: types.Array, func):\n    \"\"\"\n    Process all elements in the input array with given function.\n    \"\"\"\n    for i in range(len(arr)):\n        arr[i] = func(arr[i])\n    return arr\n", "response_1": "def array_process(arr, func):\n    \"\"\"\n    Process all elements in the input array with given function.\n    \"\"\"\n    for i in range(len(arr)):\n        arr[i] = func(arr[i])\n    return arr\n", "model_name": "deepseek-v2.5"}
{"test_name": "normalize", "response_0": "from Compiler import types\nfrom Compiler.mpc_math import sqrt\n\ndef normalize(vec):\n    \"\"\"\n    Normalize the vector.\n    \"\"\"\n    sum = types.sfix(0)\n    for item in vec:\n        sum = sum + item ** 2\n    base = sqrt(sum)\n    for i in range(len(vec)):\n        vec[i] = vec[i] / base\n    return vec\n", "response_1": "from Compiler.types import sfix, Array\nimport Compiler.mpc_math as mpc_math\n\ndef normalize(vec):\n    \"\"\"\n    Normalize the vector.\n    \"\"\"\n    sum = sfix(0)\n    for item in vec:\n        sum += item ** 2\n    base = mpc_math.sqrt(sum)\n    for i in range(len(vec)):\n        vec[i] = vec[i] / base\n    return vec\n", "model_name": "deepseek-v2.5"}
{"test_name": "impatient_merchant", "response_0": "from Compiler import types\n\ndef impatient_merchant(days):\n    \"\"\"\n    You are given the prices of some goods in consecutive days. \n    Here's an impatient merchant who will buy the good at the first days, \n    and sell it until its price becomes higher than its original cost. \n    Then he will buy the good in the next day and repeat the above process. \n    The good left in the hand of the merchant in the last day will worth nothing.\n    You should calculate the net value the impatient merchant can earn.\n    \"\"\"\n    can_buy = types.sint(1)\n    net = types.sint(0)\n    orig_price = types.sint(0)\n\n    for i in range(len(days)):\n        buy_condition = can_buy.bit_and(1)\n        sell_condition = (days[i] > orig_price).bit_and(1)\n\n        net = net - (buy_condition * days[i])\n        orig_price = buy_condition * days[i] + (1 - buy_condition) * orig_price\n        can_buy = sell_condition + (1 - sell_condition) * can_buy\n\n        net = net + (sell_condition * days[i])\n\n    return net\n", "response_1": "from Compiler import types\n\ndef impatient_merchant(days):\n    \"\"\"\n    You are given the prices of some goods in consecutive days. \n    Here's an impatient merchant who will buy the good at the first days, \n    and sell it until its price becomes higher than its original cost. \n    Then he will buy the good in the next day and repeat the above process. \n    The good left in the hand of the merchant in the last day will worth nothing.\n    You should calculate the net value the impatient merchant can earn.\n    \"\"\"\n    can_buy = types.sint(1)\n    net = types.sint(0)\n    orig_price = types.sint(0)\n\n    for i in range(len(days)):\n        buy_condition = can_buy.bit_and(1)\n        sell_condition = days[i].greater_than(orig_price)\n\n        net = net.sub(buy_condition.if_else(days[i], 0))\n        orig_price = buy_condition.if_else(days[i], orig_price)\n        can_buy = buy_condition.bit_xor(1)\n\n        net = net.add(sell_condition.if_else(days[i], 0))\n        can_buy = can_buy.bit_or(sell_condition)\n\n    return net\n", "model_name": "deepseek-v2.5"}
{"test_name": "array_shift", "response_0": "from Compiler import types\n\ndef array_shift(a):\n    \"\"\"\n    Shift the array on index by 1. \n    For example, [0,1,2] will be shifted to [1,2,0]\n    \"\"\"\n    length = len(a)\n    temp = a[length - 1]\n    for i in range(length - 1):\n        a[length - i - 1] = a[length - i - 2]\n    a[0] = temp\n    return a\n", "response_1": "def array_shift(a):\n    \"\"\"\n    Shift the array on index by 1. \n    For example, [0,1,2] will be shifted to [1,2,0]\n    \"\"\"\n    temp = a[-1]\n    for i in range(len(a)-1, 0, -1):\n        a[i] = a[i-1]\n    a[0] = temp\n    return a\n", "model_name": "deepseek-v2.5"}
{"test_name": "array_double", "response_0": "def array_double(arr: sint.Array):\n    \"\"\"\n    Double all elements in the input array.\n    \"\"\"\n    for i in range(len(arr)):\n        arr[i] = arr[i] * 2\n    return arr\n", "response_1": "def array_double(arr):\n    \"\"\"\n    Double all elements in the input array.\n    \"\"\"\n    for i in range(len(arr)):\n        arr[i] = arr[i] * 2\n    return arr\n", "model_name": "deepseek-v2.5"}
{"test_name": "stop_at_zero", "response_0": "from Compiler import types\n\ndef stop_at_zero(array):\n    \"\"\"\n    Add 1 to all elements in the array, but stop if found an element equal to 0\n    \"\"\"\n    for i in range(len(array)):\n        if array[i] == 0:\n            break\n        array[i] += 1\n    return array\n", "response_1": "from Compiler import types\n\ndef stop_at_zero(array):\n    \"\"\"\n    Add 1 to all elements in the array, but stop if found an element equal to 0\n    \"\"\"\n    for i in range(len(array)):\n        if array[i] == 0:\n            break\n        array[i] += 1\n    return array\n", "model_name": "deepseek-v2.5"}
{"test_name": "array_not", "response_0": "from Compiler.types import sint, Array\n\ndef array_not(arr):\n    \"\"\"\n    Take opposite to all elements in the input array.\n    \"\"\"\n    for i in range(len(arr)):\n        arr[i] = arr[i].bit_not()\n    return arr\n", "response_1": "from Compiler.types import sfix, sint, Array\n\ndef array_not(arr: Array):\n    \"\"\"\n    Take opposite to all elements in the input array.\n    \"\"\"\n    for i in range(len(arr)):\n        arr[i] = arr[i].bit_not()\n    return arr\n", "model_name": "deepseek-v2.5"}
{"test_name": "array_process_then_clip", "response_0": "from Compiler.types import sfix, Array\n\ndef array_process_then_clip(arr, func):\n    \"\"\"\n    Process all elements in the input array with given function, \n    then clip the outcome into the range [-10, 10]\n    \"\"\"\n    for i in range(len(arr)):\n        arr[i] = func(arr[i])\n        if arr[i] > 10:\n            arr[i] = 10\n        if arr[i] < -10:\n            arr[i] = -10\n    return arr\n", "response_1": "from Compiler import types\n\ndef array_process_then_clip(arr, func):\n    \"\"\"\n    Process all elements in the input array with given function, \n    then clip the outcome into the range [-10, 10]\n    \"\"\"\n    for i in range(len(arr)):\n        arr[i] = func(arr[i])\n        arr[i] = types.sfix.max(arr[i], -10)\n        arr[i] = types.sfix.min(arr[i], 10)\n    return arr\n", "model_name": "deepseek-v2.5"}
{"test_name": "add_and_count_positive", "response_0": "from Compiler import types\n\ndef add_and_count_positive(array, k):\n    \"\"\"\n    Add k to all elements in the given array, and count the number of positive numbers in the output array.\n    Return both the output array and the count.\n    \"\"\"\n    count = types.sint(0)\n    for i in range(len(array)):\n        array[i] = array[i] + k\n        count = count + (array[i] > 0)\n    return array, count\n", "response_1": "from Compiler import types\n\ndef add_and_count_positive(array: types.Array, k: types.sfix):\n    \"\"\"\n    Add k to all elements in the given array, and count the number of positive numbers in the output array.\n    Return both the output array and the count.\n    \"\"\"\n    count = types.sfix(0)\n    for i in range(len(array)):\n        array[i] += k\n        if array[i] > 0:\n            count += 1\n    return array, count\n", "model_name": "deepseek-v2.5"}
{"test_name": "array_subtract", "response_0": "from Compiler.types import sint, Array\n\ndef array_subtract(a, b):\n    \"\"\"\n    Subtract the first array by the second one elementwise. \n    If one of the array is shorter than the other, it will be padded with 0.\n    \"\"\"\n    if len(a) > len(b):\n        ret = sint.Array(len(a))\n        for i in range(len(b)):\n            ret[i] = a[i] - b[i]\n        for i in range(len(a) - len(b)):\n            ret[len(b) + i] = a[len(b) + i]\n    else:\n        ret = sint.Array(len(b))\n        for i in range(len(a)):\n            ret[i] = a[i] - b[i]\n        for i in range(len(b) - len(a)):\n            ret[len(a) + i] = -b[len(a) + i]\n    return ret\n", "response_1": "from Compiler.types import sint, Array\n\ndef array_subtract(a, b):\n    \"\"\"\n    Subtract the first array by the second one elementwise.\n    If one of the array is shorter than the other, it will be padded with 0.\n    \"\"\"\n    if a.length() > b.length():\n        ret = sint.Array(a.length())\n        for i in range(b.length()):\n            ret[i] = a[i] - b[i]\n        for i in range(a.length() - b.length()):\n            ret[b.length() + i] = a[b.length() + i]\n        return ret\n    else:\n        ret = sint.Array(b.length())\n        for i in range(a.length()):\n            ret[i] = a[i] - b[i]\n        for i in range(b.length() - a.length()):\n            ret[a.length() + i] = -b[a.length() + i]\n        return ret\n", "model_name": "deepseek-v2.5"}
{"test_name": "lower_bound", "response_0": "from Compiler import types\n\ndef lower_bound(arr: types.Array, x: types.sfix) -> types.sint:\n    \"\"\"\n    Return the index of the largest element not bigger than x in arr.\n    If such element does not exist, return -1.\n    \"\"\"\n    ret = types.sint(-1)\n    distance = types.sfix(0)\n    found = types.sint(0)  # Using sint to represent boolean\n\n    @for_range(len(arr))\n    def loop(i):\n        cond1 = arr[i] <= x\n        cond2 = found.bit_not() | (x - arr[i] < distance)\n        cond = cond1.bit_and(cond2)\n        ret[:] = cond.if_else(types.sint(i), ret)\n        distance[:] = cond.if_else(x - arr[i], distance)\n        found[:] = cond.bit_or(found)\n\n    return ret\n", "response_1": "from Compiler import types\n\ndef lower_bound(arr: types.Array, x: types.sfix) -> types.cint:\n    ret = types.cint(-1)\n    distance = types.sfix(float('inf'))\n    found = types.sint(0)\n\n    @for_range(len(arr))\n    def _(i):\n        cond = arr[i] <= x\n        @if_(cond)\n        def _():\n            new_distance = x - arr[i]\n            @if_(~found.bit_or(new_distance < distance))\n            def _():\n                ret = i\n                distance = new_distance\n                found = types.sint(1)\n\n    return ret\n", "model_name": "deepseek-v2.5"}
{"test_name": "argmin", "response_0": "from Compiler.types import sint, Array\n\ndef argmin(a):\n    \"\"\"\n    Return the index of the min value of an array.\n    \"\"\"\n    n = len(a)\n    current = a[0]\n    index = sint(0)\n\n    for i in range(1, n):\n        cond = current <= a[i]\n        index = cond.if_else(index, sint(i))\n        current = cond.if_else(current, a[i])\n\n    return index\n", "response_1": "from Compiler import types\n\ndef argmin(a):\n    \"\"\"\n    Return the index of the minimum value of an array.\n    \"\"\"\n    current = a[0]\n    index = types.cint(0)\n    for i in range(len(a)):\n        index = types.if_else(current <= a[i], index, types.cint(i))\n        current = types.if_else(current <= a[i], current, a[i])\n    return index\n", "model_name": "deepseek-v2.5"}
{"test_name": "independent_robbery", "response_0": "from Compiler.types import sint, Array\n\ndef independent_robbery(houses):\n    n = len(houses)\n    dp = sint.Array(n)\n    dp.assign_all(0)\n\n    dp[0] = houses[0]\n    dp[1] = dp[1].max(dp[0])\n\n    for i in range(2, n):\n        dp[i] = (dp[i-2] + houses[i]).max(dp[i-1])\n\n    return dp[n-1]\n", "response_1": "from Compiler.types import sint, Array\n\ndef independent_robbery(houses):\n    n = len(houses)\n    dp = sint.Array(n)\n    dp.assign_all(0)\n    \n    dp[0] = houses[0]\n    dp[1] = dp[1].max(dp[0])\n    \n    for i in range(2, n):\n        dp[i] = (dp[i-2] + houses[i]).max(dp[i-1])\n    \n    return dp[n-1]\n", "model_name": "deepseek-v2.5"}
{"test_name": "sum_odd_and_odd", "response_0": "from Compiler import types\n\ndef sum_odd_and_odd(arr):\n    \"\"\"\n    A strange sum function\n    \"\"\"\n    sum = types.sint(0)\n    for i in range(len(arr)):\n        if i % 2 == 0:\n            continue\n        for j in range(i):\n            if j % 2 == 0:\n                continue\n            sum += arr[j]\n    return sum\n", "response_1": "from Compiler import types\n\ndef sum_odd_and_odd(arr):\n    \"\"\"\n    A strange sum function\n    \"\"\"\n    sum = types.sfix(0)\n    for i in range(1, len(arr), 2):\n        for j in range(1, i, 2):\n            sum += arr[j]\n    return sum\n", "model_name": "deepseek-v2.5"}
{"test_name": "is_monotonous", "response_0": "from Compiler.types import sint, Array\n\ndef is_monotonous(arr):\n    \"\"\"\n    Return whether or not the array is strictly monotonous.\n    \"\"\"\n    n = len(arr)\n    d = sint(0)\n    result = sint(1)  # Initialize result to True\n\n    for i in range(n - 1):\n        diff = arr[i + 1] - arr[i]\n        condition = (i > 0) * (diff * d <= 0)\n        result = result.bit_and(1 - condition)  # Update result\n        d = diff\n\n    return result\n", "response_1": "from Compiler import types\n\ndef is_monotonous(arr):\n    \"\"\"\n    Return whether or not the array is strictly monotonous.\n    \"\"\"\n    d = types.sint(0)\n    for i in range(len(arr) - 1):\n        diff = arr[i + 1] - arr[i]\n        if i > 0 and diff * d <= 0:\n            return types.sint(0)  # False\n        d = diff\n    return types.sint(1)  # True\n", "model_name": "deepseek-v2.5"}
{"test_name": "positive_count_negative_sum", "response_0": "from Compiler import types\n\ndef positive_count_negative_sum(arr: types.Array):\n    count = types.sint(0)\n    sum = types.sint(0)\n    for item in arr:\n        count += (item > 0)\n        sum += item * (item < 0)\n    return count, sum\n", "response_1": "from Compiler import types\n\ndef positive_count_negative_sum(arr):\n    \"\"\"\n    Traverse the array, return the number of all positive elements and the sum of all negative elements.\n    \"\"\"\n    count = types.sint(0)\n    sum = types.sint(0)\n    \n    for item in arr:\n        count += (item > 0)\n        sum += item * (item < 0)\n    \n    return count, sum\n", "model_name": "deepseek-v2.5"}
{"test_name": "sum_even", "response_0": "from Compiler import types\n\ndef sum_even(arr):\n    \"\"\"\n    Return the sum of all the even numbers in the array.\n    \"\"\"\n    sum = types.sint(0)\n    for item in arr:\n        if item % 2 == 0:\n            sum = sum + item\n    return sum\n", "response_1": "from Compiler import types\n\ndef sum_even(arr):\n    \"\"\"\n    Return the sum of all the even numbers in the array.\n    \"\"\"\n    sum = types.sfix(0)\n    for item in arr:\n        if not item % 2:\n            sum = sum + item\n    return sum\n", "model_name": "deepseek-v2.5"}
{"test_name": "one_norm", "response_0": "from Compiler.types import sfix, Array\nimport Compiler.mpc_math as mpc_math\n\ndef one_norm(vec):\n    \"\"\"\n    Return the one-norm of the vector.\n    \"\"\"\n    sum = sfix(0)\n    for item in vec:\n        sum = sum + mpc_math.abs(item)\n    return sum\n", "response_1": "from Compiler import types\n\ndef one_norm(vec):\n    \"\"\"\n    Return the one-norm of the vector.\n    \"\"\"\n    sum = types.sfix(0)\n    for item in vec:\n        sum = sum + abs(item)\n    return sum\n", "model_name": "deepseek-v2.5"}
{"test_name": "array_floor", "response_0": "from Compiler.types import sfix, Array\nimport Compiler.mpc_math as mpc_math\n\ndef array_floor(arr: Array(sfix)):\n    \"\"\"\n    Apply Gaussian floor function to all elements in the input array.\n    \"\"\"\n    ret = Array(len(arr), sfix)\n    for i in range(len(arr)):\n        ret[i] = mpc_math.floor(arr[i])\n    return ret\n", "response_1": "from Compiler.types import sfix, Array\nimport mpc_math\n\ndef array_floor(arr: Array):\n    \"\"\"\n    Apply Gaussian floor function to all elements in the input array. \n    \"\"\"\n    ret = Array(len(arr), sfix)\n    for i in range(len(arr)):\n        ret[i] = mpc_math.floor(arr[i])\n    return ret\n", "model_name": "deepseek-v2.5"}
{"test_name": "three_five", "response_0": "from Compiler import types\n\ndef three_five(arr):\n    has3 = types.sint(0)\n    has5 = types.sint(0)\n    \n    for item in arr:\n        has3 = has3.bit_or(item == 3)\n        has5 = has5.bit_or(item == 5)\n    \n    return (has3.bit_and(has5)) or ((has3.bit_not()).bit_and(has5.bit_not()))\n", "response_1": "from Compiler.types import sint, Array\n\ndef three_five(arr: Array):\n    \"\"\"\n    If the input array contains both/neither 3 and/or 5, return True, \n    otherwise return False.\n    \"\"\"\n    has3 = sint(0)\n    has5 = sint(0)\n    for item in arr:\n        has3 = has3.bit_or(item == 3)\n        has5 = has5.bit_or(item == 5)\n    return (has3.bit_and(has5)).bit_or((has3.bit_not()).bit_and(has5.bit_not()))\n", "model_name": "deepseek-v2.5"}
{"test_name": "num_above_average", "response_0": "from Compiler.types import sfix, sint\nfrom Compiler.library import tree_reduce\n\ndef num_above_average(arr):\n    \"\"\"\n    Return the number of elements in the array larger than or equal to the average value.\n    \"\"\"\n    sum = sfix(0)\n    count = sint(0)\n    length = len(arr)\n    \n    for i in range(length):\n        sum = sum + arr[i]\n    \n    avg = sum / length\n    \n    for item in arr:\n        if item >= avg:\n            count = count + 1\n    \n    return count\n", "response_1": "from Compiler.types import sint, sfix, Array\nfrom Compiler.library import tree_reduce\n\ndef num_above_average(arr):\n    \"\"\"\n    Return the number of elements in the array larger than or equal to the average value. \n    \"\"\"\n    sum = sfix(0)\n    count = sint(0)\n\n    # Calculate the sum of the array elements\n    for i in range(len(arr)):\n        sum += arr[i]\n\n    # Calculate the average\n    avg = sum / len(arr)\n\n    # Count elements larger than or equal to the average\n    for item in arr:\n        if item >= avg:\n            count += 1\n\n    return count\n", "model_name": "deepseek-v2.5"}
{"test_name": "clip", "response_0": "from Compiler.types import sfix, Array\n\ndef clip(arr: Array, upper_bound: sfix = sfix(1), lower_bound: sfix = sfix(-1)) -> Array:\n    \"\"\"\n    For the given array, clip the elements to the range [lower_bound, upper_bound]\n    \"\"\"\n    for i in range(len(arr)):\n        arr[i] = arr[i].max(lower_bound)\n        arr[i] = arr[i].min(upper_bound)\n    return arr\n", "response_1": "from Compiler import types\n\ndef clip(arr: types.Array, upper_bound: types.sfix = 1, lower_bound: types.sfix = -1):\n    \"\"\"\n    For the given array, clip the elements to the range [lower_bound, upper_bound]\n    \"\"\"\n    for i in range(len(arr)):\n        arr[i] = arr[i].max(lower_bound)\n        arr[i] = arr[i].min(upper_bound)\n    return arr\n", "model_name": "deepseek-v2.5"}
{"test_name": "sum_with_certain_element_skipped", "response_0": "from Compiler import types\n\ndef sum_with_certain_element_skipped(array):\n    \"\"\"\n    Compute partial sum of the array with all elements causing the partial sum to be in [5,10] skipped.\n    \"\"\"\n    sum = types.sfix(0)\n    for i in range(len(array)):\n        if types.sfix(5) <= sum + array[i] <= types.sfix(10):\n            continue\n        sum += array[i]\n    return sum\n", "response_1": "from Compiler import types\n\ndef sum_with_certain_element_skipped(array):\n    \"\"\"\n    Compute partial sum of the array with all elements causing the partial sum to be in [5,10] skipped.\n    \"\"\"\n    sum = types.sfix(0)\n    for i in range(len(array)):\n        temp_sum = sum + array[i]\n        skip_condition = (temp_sum >= types.sfix(5)) & (temp_sum <= types.sfix(10))\n        sum = types.if_else(skip_condition, sum, temp_sum)\n    return sum\n", "model_name": "deepseek-v2.5"}
{"test_name": "sum_of_odd_and_even", "response_0": "from Compiler.types import sint, cint, Array\n\ndef sum_of_odd_and_even(arr: Array):\n    \"\"\"\n    Return the sum of odd number and even number in the array.\n    The elements in the input array are guaranteed to be integers. \n    \"\"\"\n    odd_sum = sint(0)\n    even_sum = sint(0)\n    \n    for item in arr:\n        is_odd = item % 2\n        odd_sum += item * is_odd\n        even_sum += item * (1 - is_odd)\n    \n    return odd_sum, even_sum\n", "response_1": "from Compiler.types import sint, cint, Array\n\ndef sum_of_odd_and_even(arr: Array):\n    \"\"\"\n    Return the sum of odd number and even number in the array.\n    The elements in the input array are guaranteed to be integers. \n    \"\"\"\n    odd_sum = sint(0)\n    even_sum = sint(0)\n    for item in arr:\n        is_odd = item % 2\n        odd_sum += is_odd * item\n        even_sum += (1 - is_odd) * item\n    return odd_sum, even_sum\n", "model_name": "deepseek-v2.5"}
{"test_name": "distance", "response_0": "from Compiler import types\nimport mpc_math\n\ndef distance(vec1, vec2):\n    \"\"\"\n    Compute the Euclidean distance between the two vectors.\n    \"\"\"\n    sum = types.sfix(0)\n    for i in range(len(vec1)):\n        diff = vec1[i] - vec2[i]\n        sum = sum + diff * diff\n    return mpc_math.sqrt(sum)\n", "response_1": "from Compiler import types\nimport mpc_math\n\ndef distance(vec1, vec2):\n    \"\"\"\n    Compute the Euclidean distance between the two vectors.\n    \"\"\"\n    sum = types.sfix(0)\n    for i in range(len(vec1)):\n        diff = vec1[i] - vec2[i]\n        sum += diff * diff\n    return mpc_math.sqrt(sum)\n", "model_name": "deepseek-v2.5"}
{"test_name": "num_occurrence", "response_0": "from Compiler import types\n\ndef num_occurrence(arr: types.Array, target: types.sint) -> types.sint:\n    \"\"\"\n    Return the number of occurrence of the target in the given array.\n    \"\"\"\n    count = types.sint(0)\n    for item in arr:\n        count += (item == target)\n    return count\n", "response_1": "from Compiler import types\n\ndef num_occurrence(arr, target):\n    \"\"\"\n    Return the number of occurrence of the target in the given array.\n    \"\"\"\n    count = types.sint(0)\n    for item in arr:\n        cond = item == target\n        count = count + cond\n    return count\n", "model_name": "deepseek-v2.5"}
{"test_name": "palindrome", "response_0": "from Compiler import types\n\ndef palindrome(arr):\n    \"\"\"\n    Check whether the array is a palindrome.\n    \"\"\"\n    flag = types.sint(1)  # Initialize flag as a secret integer with value 1\n    n = len(arr)\n    for i in range(n):\n        flag = flag.bit_and(arr[i] == arr[n - 1 - i])  # Use bit_and for logical AND\n    return flag\n", "response_1": "from Compiler import types\n\ndef palindrome(arr):\n    \"\"\"\n    Check whether the array is a palindrome.\n    \"\"\"\n    flag = types.sint(1)  # Initialize flag as a secret integer with value 1\n    for i in range(len(arr)):\n        flag = flag.bit_and(arr[i] == arr[len(arr) - 1 - i])\n    return flag\n", "model_name": "deepseek-v2.5"}
{"test_name": "reverse_order_pair", "response_0": "from Compiler.types import sint, Array\n\ndef reverse_order_pair(arr):\n    \"\"\"\n    Count the number of reverse order pairs in the array. \n    \"\"\"\n    n = len(arr)\n    num = sint(0)\n    for i in range(n):\n        for j in range(i+1, n):\n            cond = arr[i] > arr[j]\n            num = num + cond\n    return num\n", "response_1": "from Compiler import types\n\ndef reverse_order_pair(arr: types.Array):\n    \"\"\"\n    Count the number of reverse order pairs in the array.\n    \"\"\"\n    num = types.sint(0)\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] > arr[j]:\n                num = num + types.sint(1)\n    return num\n", "model_name": "deepseek-v2.5"}
{"test_name": "sum_of_cubes", "response_0": "from Compiler import types\n\ndef sum_of_cubes(arr):\n    \"\"\"\n    Return the sum of cubes of elements in the array.\n    \"\"\"\n    ret = types.sfix(0)\n    for item in arr:\n        ret = ret + mpc_math.pow_fx(item, 3)\n    return ret\n", "response_1": "from Compiler import types\n\ndef sum_of_cubes(arr):\n    \"\"\"\n    Return the sum of cubes of elements in the array. \n    \"\"\"\n    ret = types.sfix(0)\n    for item in arr:\n        ret = ret + mpc_math.pow_fx(item, 3)\n    return ret\n", "model_name": "deepseek-v2.5"}
{"test_name": "max_element", "response_0": "from Compiler import library\n\ndef max_element(a):\n    \"\"\"\n    Return the max value of an array.\n    \"\"\"\n    current = a[0]\n    for item in a:\n        current = current.max(item)\n    \n    return current\n", "response_1": "from Compiler import types\n\ndef max_element(a):\n    \"\"\"\n    Return the max value of an array.\n    \"\"\"\n    current = a[0]\n    for i in range(len(a)):\n        current = current.max(a[i])\n    \n    return current\n", "model_name": "deepseek-v2.5"}
{"test_name": "array_if_else", "response_0": "from Compiler import types\n\ndef array_if_else(arr, predicator, if_func, else_func):\n    \"\"\"\n    For each element in the input array, \n    if the predicator returns True, then apply the if-function to the element, \n    otherwise apply the else-function to the element. \n    \"\"\"\n    for i in range(len(arr)):\n        cond = predicator(arr[i])\n        arr[i] = cond.if_else(if_func(arr[i]), else_func(arr[i]))\n    return arr\n", "response_1": "def array_if_else(arr, predicator, if_func, else_func):\n    \"\"\"\n    For each element in the input array, \n    if the predicator returns True, then apply the if-function to the element, \n    otherwise apply the else-function to the element. \n    \"\"\"\n    for i in range(len(arr)):\n        cond = predicator(arr[i])\n        arr[i] = cond.if_else(if_func(arr[i]), else_func(arr[i]))\n    return arr\n", "model_name": "deepseek-v2.5"}
{"test_name": "inf_norm", "response_0": "from Compiler import types\n\ndef inf_norm(vec):\n    \"\"\"\n    Return the infinite-norm of the vector.\n    \"\"\"\n    sum = types.sfix(0)\n    for item in vec:\n        sum = sum.max(abs(item))\n    return sum\n", "response_1": "from Compiler.types import sfix, sint\nimport Compiler.mpc_math as mpc_math\n\ndef inf_norm(vec):\n    \"\"\"\n    Return the infinite-norm of the vector.\n    \"\"\"\n    sum = sfix(0)\n    for item in vec:\n        sum = sum.max(mpc_math.abs(item))\n    return sum\n", "model_name": "deepseek-v2.5"}
{"test_name": "array_inc", "response_0": "def array_inc(arr):\n    \"\"\"\n    Increment all elements in the input array by 1\n    \"\"\"\n    for i in range(len(arr)):\n        arr[i] = arr[i] + 1\n    return arr\n", "response_1": "def array_inc(arr):\n    \"\"\"\n    Increment all elements in the input array by 1\n    \"\"\"\n    for i in range(len(arr)):\n        arr[i] = arr[i] + 1\n    return arr\n", "model_name": "deepseek-v2.5"}
{"test_name": "count_rises", "response_0": "from Compiler.types import sint, Array\n\ndef count_rises(arr):\n    \"\"\"\n    Count the number of rises in the array.\n    \"\"\"\n    count = sint(0)\n    for i in range(len(arr) - 1):\n        if arr[i] < arr[i + 1]:\n            count = count + sint(1)\n    return count\n", "response_1": "from Compiler import types\n\ndef count_rises(arr: types.Array):\n    \"\"\"\n    Count the number of rises in the array. \n    \"\"\"\n    count = types.sint(0)\n    for i in range(arr.length - 1):\n        if arr[i] < arr[i + 1]:\n            count += types.sint(1)\n    return count\n", "model_name": "deepseek-v2.5"}
{"test_name": "skip_at_zero", "response_0": "from Compiler import types\n\ndef skip_at_zero(array: types.Array):\n    \"\"\"\n    Add 1 to all elements in the array, but skip if found an element equal to 0\n    \"\"\"\n    for i in range(len(array)):\n        if array[i] == 0:\n            continue\n        array[i] += 1\n    return array\n", "response_1": "from Compiler import types\n\ndef skip_at_zero(array: types.Array):\n    \"\"\"\n    Add 1 to all elements in the array, but skip if found an element equal to 0\n    \"\"\"\n    for i in range(len(array)):\n        if array[i] == 0:\n            continue\n        array[i] += 1\n    return array\n", "model_name": "deepseek-v2.5"}
{"test_name": "array_intersect", "response_0": "from Compiler import types\n\ndef array_intersect(p, q):\n    \"\"\"\n    Return whether the two arrays share any common element.\n    \"\"\"\n    result = types.sint(0)\n    for i in range(len(p)):\n        for j in range(len(q)):\n            result = result.bit_or(p[i].equal(q[j]))\n            if result == 1:\n                break\n        if result == 1:\n            break\n    return result\n", "response_1": "from Compiler.types import sint, Array\n\ndef array_intersect(p, q):\n    \"\"\"\n    Return whether the two arrays share any common element.\n    \"\"\"\n    result = sint(0)\n    for i in range(len(p)):\n        for j in range(len(q)):\n            result = result.bit_or(p[i] == q[j])\n            if result.reveal():\n                return True\n    return False\n", "model_name": "deepseek-v2.5"}
{"test_name": "two_norm", "response_0": "from Compiler.types import sfix, Array\nfrom Compiler.mpc_math import sqrt_fx\n\ndef two_norm(vec):\n    \"\"\"\n    Return the two-norm of the vector.\n    \"\"\"\n    sum = sfix(0)\n    for item in vec:\n        sum = sum + item**2\n    return sqrt_fx(sum)\n", "response_1": "from Compiler.types import sfix\nimport Compiler.mpc_math as mpc_math\n\ndef two_norm(vec):\n    \"\"\"\n    Return the two-norm of the vector.\n    \"\"\"\n    sum = sfix(0)\n    for item in vec:\n        sum = sum + item**2\n    return mpc_math.sqrt(sum)\n", "model_name": "deepseek-v2.5"}
{"test_name": "sum_between", "response_0": "from Compiler.types import sint, Array\n\ndef sum_between(arr: Array, l: sint, u: sint) -> sint:\n    \"\"\"\n    Return the sum of elements in arr within range [l,u].\n    \"\"\"\n    sum = sint(0)\n    for item in arr:\n        cond = (l <= item) & (item <= u)\n        sum = sum + cond * item\n    return sum\n", "response_1": "from Compiler.types import sint, Array\n\ndef sum_between(arr: Array, l: sint, u: sint) -> sint:\n    \"\"\"\n    Return the sum of elements in arr within range [l,u].\n    \"\"\"\n    sum = sint(0)\n    for item in arr:\n        cond = (l <= item) & (item <= u)\n        sum = sum + item * cond\n    return sum\n", "model_name": "deepseek-v2.5"}
{"test_name": "largest_gap", "response_0": "from Compiler import types\n\ndef largest_gap(arr):\n    \"\"\"\n    Return the largest gap in the array.\n    The length of the input array is guaranteed to be at least 2.\n    \"\"\"\n    cur = types.sfix(0)\n    for i in range(len(arr) - 1):\n        diff = abs(arr[i + 1] - arr[i])\n        cur = types.sfix.max(cur, diff)\n    return cur\n", "response_1": "from Compiler import types\n\ndef largest_gap(arr):\n    \"\"\"\n    Return the largest gap in the array.\n    The length of the input array is guaranteed to be at least 2.\n    \"\"\"\n    cur = types.sfix(0)\n    for i in range(len(arr)-1):\n        diff = abs(arr[i+1] - arr[i])\n        if diff > cur:\n            cur = diff\n    return cur\n", "model_name": "deepseek-v2.5"}
{"test_name": "totally_dominate", "response_0": "from Compiler import types\n\ndef totally_dominate(a, b):\n    \"\"\"\n    Return whether array a \"totally dominates\" array b, \n    which means, any element in a is no smaller than any element in b. \n    \"\"\"\n    amin = a[0]\n    bmax = b[0]\n    \n    for i in range(len(a)):\n        amin = amin.max(a[i])\n    \n    for i in range(len(b)):\n        bmax = bmax.min(b[i])\n    \n    return amin.geq(bmax)\n", "response_1": "from Compiler.types import sint, Array\n\ndef totally_dominate(a, b):\n    \"\"\"\n    Return whether array a \"totally dominates\" array b, \n    which means, any element in a is no smaller than any element in b. \n    \"\"\"\n    amin = a[0]\n    bmax = b[0]\n    \n    for i in range(len(a)):\n        amin = amin.max(a[i])\n    \n    for i in range(len(b)):\n        bmax = bmax.min(b[i])\n    \n    return amin.geq(bmax)\n", "model_name": "deepseek-v2.5"}
{"test_name": "element_count", "response_0": "def element_count(arr, target):\n    \"\"\"\n    Count the number of times the target element occurs in the array.\n    \"\"\"\n    ret = sint(0)\n    for item in arr:\n        ret = ret + (item == target)\n    return ret\n", "response_1": "from Compiler import types\n\ndef element_count(arr: types.Array, target: types.sint) -> types.sint:\n    \"\"\"\n    Count the number of times the target element occurs in the array.\n    \"\"\"\n    ret = types.sint(0)\n    for item in arr:\n        cond = item == target\n        ret = cond.if_else(ret + 1, ret)\n    return ret\n", "model_name": "deepseek-v2.5"}
{"test_name": "is_subarray", "response_0": "from Compiler.types import sint, Array\n\ndef is_subarray(c: Array, d: Array) -> sint:\n    \"\"\"\n    Return whether the first array is a continuous subarray of the second array.\n    \"\"\"\n    n = len(d)\n    m = len(c)\n    result = sint(0)\n\n    for i in range(n):\n        flag = sint(1)\n        if m <= n - i:\n            for j in range(m):\n                flag = flag.bit_and(d[i + j] == c[j])\n            result = result.bit_or(flag)\n    \n    return result\n", "response_1": "from Compiler import types\n\ndef is_subarray(c, d):\n    \"\"\"\n    Return whether the first array is a continuous subarray of the second array.\n    \"\"\"\n    for i in range(len(d)):\n        if len(c) <= len(d) - i:\n            flag = types.sint(1)\n            for j in range(len(c)):\n                flag = flag.bit_and(d[i + j] == c[j])\n            if flag == 1:\n                return True\n    return False\n", "model_name": "deepseek-v2.5"}
{"test_name": "exists_5_or_7", "response_0": "from Compiler.types import sint, cint\n\ndef exists_5_or_7(arr):\n    \"\"\"\n    Check whether the array contains 5 or 7.\n    \"\"\"\n    result = sint(0)\n    for item in arr:\n        cond1 = item == cint(5)\n        cond2 = item == cint(7)\n        result = result.bit_or(cond1.bit_or(cond2))\n        if result == sint(1):\n            break\n    return result\n", "response_1": "from Compiler import types\n\ndef exists_5_or_7(arr):\n    \"\"\"\n    Check whether the array contains 5 or 7.\n    \"\"\"\n    result = types.sint(0)\n    for i in range(len(arr)):\n        cond1 = arr[i] == 5\n        cond2 = arr[i] == 7\n        result = result.bit_or(cond1.bit_or(cond2))\n        if result == 1:\n            break\n    return result\n", "model_name": "deepseek-v2.5"}
{"test_name": "variance", "response_0": "from Compiler import types\nimport mpc_math\n\ndef variance(arr):\n    \"\"\"\n    Return the variance of the array.\n    \"\"\"\n    n = len(arr)\n    average = types.sfix(0)\n    variance = types.sfix(0)\n\n    for item in arr:\n        average += item / n\n\n    for item in arr:\n        variance += mpc_math.pow_fx(item - average, 2) / n\n\n    return variance\n", "response_1": "from Compiler import types\n\ndef variance(arr):\n    \"\"\"\n    Return the variance of the array.\n    \"\"\"\n    length = len(arr)\n    average = types.sfix(0)\n    variance = types.sfix(0)\n\n    for item in arr:\n        average += item / length\n\n    for item in arr:\n        variance += (item - average) ** 2 / length\n\n    return variance\n", "model_name": "deepseek-v2.5"}
{"test_name": "is_ascending", "response_0": "from Compiler.types import sint, Array\n\ndef is_ascending(arr: Array):\n    \"\"\"\n    Return whether or not the array is in strictly ascending order.\n    If the length of input array is 1, you should return True.\n    \"\"\"\n    for i in range(len(arr) - 1):\n        if arr[i] >= arr[i + 1]:\n            return sint(0)\n    return sint(1)\n", "response_1": "from Compiler.types import sint, Array\n\ndef is_ascending(arr):\n    \"\"\"\n    Return whether or not the array is in strictly ascending order.\n    If the length of input array is 1, you should return True.\n    \"\"\"\n    if len(arr) == 1:\n        return sint(1)\n    \n    result = sint(1)\n    for i in range(len(arr)-1):\n        condition = arr[i] >= arr[i+1]\n        result = result.bit_and(1 - condition)\n    \n    return result\n", "model_name": "deepseek-v2.5"}
{"test_name": "xor_all", "response_0": "from Compiler.types import sint\n\ndef xor_all(arr):\n    \"\"\"\n    XOR all elements in the array and return the output.\n    The input array is guaranteed to contain only 0's and 1's.\n    \"\"\"\n    ret = arr[0]\n    for i in range(1, len(arr)):\n        ret = ret.bit_xor(arr[i])\n    return ret\n", "response_1": "from Compiler import types\n\ndef xor_all(arr):\n    \"\"\"\n    XOR all elements in the array and return the output.\n    The input array is guaranteed to contain only 0's and 1's.\n    \"\"\"\n    ret = arr[0]\n    for i in range(1, len(arr)):\n        ret = ret.bit_xor(arr[i])\n    return ret\n", "model_name": "deepseek-v2.5"}
{"test_name": "upper_bound", "response_0": "from Compiler import types\n\ndef upper_bound(arr: types.Array, x: types.sfix) -> types.cint:\n    ret = types.cint(-1)\n    distance = types.sfix(float('inf'))\n    found = types.sint(0)\n\n    @types.for_range(len(arr))\n    def loop(i):\n        cond = arr[i] > x\n        cond_and_not_found = cond.bit_and(found.bit_not())\n        cond_and_found = cond.bit_and(found)\n        cond_and_found_and_less_distance = cond_and_found.bit_and((arr[i] - x) < distance)\n\n        @types.if_(cond_and_not_found)\n        def if_not_found():\n            ret.assign(i)\n            distance.assign(arr[i] - x)\n            found.assign(1)\n\n        @types.elif_(cond_and_found_and_less_distance)\n        def if_found_and_less_distance():\n            ret.assign(i)\n            distance.assign(arr[i] - x)\n\n    return ret\n", "response_1": "from Compiler import types\n\ndef upper_bound(arr: types.Array, x: types.sfix) -> types.sint:\n    ret = types.sint(-1)\n    distance = types.sfix(0)\n    found = types.sint(0)\n\n    for i in range(len(arr)):\n        cond = arr[i] > x\n        new_distance = arr[i] - x\n        ret = cond.if_else(i, ret)\n        distance = cond.if_else(new_distance, distance)\n        found = cond.bit_or(found)\n\n    return ret\n", "model_name": "deepseek-v2.5"}
{"test_name": "array_process_then_sum", "response_0": "from Compiler import types\nimport mpc_math\n\ndef array_process_then_sum(arr, func):\n    \"\"\"\n    Process all elements in the input array with given function, \n    then sum up the processed elements.\n    \"\"\"\n    sum = types.sfix(0)\n    for i in range(len(arr)):\n        arr[i] = func(arr[i])\n        sum += arr[i]\n    return sum\n", "response_1": "from Compiler.types import sint, Array\n\ndef array_process_then_sum(arr, func):\n    \"\"\"\n    Process all elements in the input array with given function, \n    then sum up the processed elements.\n    \"\"\"\n    sum = sint(0)\n    for i in range(len(arr)):\n        arr[i] = func(arr[i])\n        sum += arr[i]\n    return sum\n", "model_name": "deepseek-v2.5"}
{"test_name": "average", "response_0": "from Compiler import types\n\ndef average(arr):\n    \"\"\"\n    Compute the average value of the array.\n    \"\"\"\n    sum = types.sfix(0)\n    length = len(arr)\n    for i in range(length):\n        sum += arr[i]\n    ret = sum / types.sfix(length)\n    return ret\n", "response_1": "from Compiler import types\n\ndef average(arr):\n    \"\"\"\n    Compute the average value of the array.\n    \"\"\"\n    sum = types.sfix(0)\n    length = len(arr)\n    for i in range(length):\n        sum += arr[i]\n    ret = sum / length\n    return ret\n", "model_name": "deepseek-v2.5"}
{"test_name": "array_filter", "response_0": "from Compiler import types\n\ndef array_filter(arr: types.Array, predicator):\n    \"\"\"\n    For each element in the input array, \n    if the predicator returns True, then preserve the element, \n    otherwise set the element to 0. \n    \"\"\"\n    for i in range(len(arr)):\n        arr[i] = arr[i].if_else(arr[i], types.sint(0)) if predicator(arr[i]) else types.sint(0)\n    return arr\n", "response_1": "def array_filter(arr, predicator):\n    \"\"\"\n    For each element in the input array, \n    if the predicator returns True, then preserve the element, \n    otherwise set the element to 0. \n    \"\"\"\n    for i in range(len(arr)):\n        arr[i] = arr[i].if_else(arr[i], 0) if predicator(arr[i]) else 0\n    return arr\n", "model_name": "deepseek-v2.5"}
{"test_name": "sum_up", "response_0": "from Compiler import types\n\ndef sum_up(array):\n    \"\"\"\n    The sum_up function\n    \"\"\"\n    sum = types.sfix(0)\n    for num in array:\n        sum += num\n    return sum\n", "response_1": "from Compiler.types import sint, Array\n\ndef sum_up(array: Array):\n    \"\"\"\n    The sum_up function\n    \"\"\"\n    sum = sint(0)\n    for num in array:\n        sum += num\n    return sum\n", "model_name": "deepseek-v2.5"}
{"test_name": "negative_to_zero", "response_0": "from Compiler import types\n\ndef negative_to_zero(array):\n    \"\"\"\n    Turn the negative elements in the array to zero\n    \"\"\"\n    for i in range(len(array)):\n        if array[i] >= 0:\n            continue\n        array[i] = 0\n    return array\n", "response_1": "from Compiler import types\n\ndef negative_to_zero(array: types.Array):\n    \"\"\"\n    Turn the negative elements in the array to zero\n    \"\"\"\n    for i in range(len(array)):\n        if array[i] >= 0:\n            continue\n        array[i] = 0\n    return array\n", "model_name": "deepseek-v2.5"}
{"test_name": "sum_only_positive_to_ten", "response_0": "from Compiler import types\n\ndef sum_only_positive_to_ten(array):\n    \"\"\"\n    Compute partial sum of the array with only the positive elements until the sum becomes no smaller than 10.\n    \"\"\"\n    sum = types.sfix(0)\n    for i in range(len(array)):\n        if array[i] <= 0:\n            continue\n        if sum >= 10:\n            break\n        sum = sum + array[i]\n    return sum\n", "response_1": "from Compiler import types\n\ndef sum_only_positive_to_ten(array: types.Array):\n    \"\"\"\n    Compute partial sum of the array with only the positive elements until the sum becomes no smaller than 10.\n    \"\"\"\n    sum = types.sfix(0)\n    for i in range(len(array)):\n        if array[i] <= types.sfix(0):\n            continue\n        if sum >= types.sfix(10):\n            break\n        sum = sum + array[i]\n    return sum\n", "model_name": "deepseek-v2.5"}
{"test_name": "bubble_sort", "response_0": "from Compiler.types import sint, Array\n\ndef bubble_sort(arr: Array):\n    \"\"\"\n    Perform bubble sort to the array.\n    \"\"\"\n    n = arr.length\n    for i in range(n - 1):\n        for j in range(n - 1 - i):\n            if arr[j] >= arr[j + 1]:\n                temp = arr[j]\n                arr[j] = arr[j + 1]\n                arr[j + 1] = temp\n    return arr\n", "response_1": "from Compiler.types import Array, sint\n\ndef bubble_sort(arr: Array):\n    \"\"\"\n    Perform bubble sort to the array.\n    \"\"\"\n    n = len(arr)\n    for i in range(n - 1):\n        for j in range(n - 1 - i):\n            if arr[j] >= arr[j + 1]:\n                temp = arr[j]\n                arr[j] = arr[j + 1]\n                arr[j + 1] = temp\n    return arr\n", "model_name": "deepseek-v2.5"}
