{"test_name": "next_integer", "response_0": "from Compiler import types\n\ndef next_integer(t: types.sfix) -> types.sfix:\n    \"\"\"\n    Return the minimum integer strictly bigger than the input value.\n    \"\"\"\n    import mpc_math\n    return mpc_math.floor(t) + 1\n", "response_1": "from Compiler import mpc_math\n\ndef next_integer(t):\n    \"\"\"\n    Return the minimum integer strictly bigger than the input value.\n    \"\"\"\n    return mpc_math.floor(t) + 1\n", "model_name": "deepseek-v2.5"}
{"test_name": "father_and_son", "response_0": "from Compiler import types\nimport mpc_math\n\ndef father_and_son(father_age: types.sfix, son_age: types.sfix) -> types.sfix:\n    \"\"\"\n    Given the age of father and son, \n    return before how many years or after how many years, the age of father is twice as the age of son.\n    \"\"\"\n    age_difference = father_age - son_age * 2\n    return mpc_math.abs(age_difference)\n", "response_1": "from Compiler import types\n\ndef father_and_son(father_age: types.sfix, son_age: types.sfix) -> types.sfix:\n    \"\"\"\n    Given the age of father and son, \n    return before how many years or after how many years, the age of father is twice as the age of son.\n    \"\"\"\n    return abs(father_age - son_age * 2)\n", "model_name": "deepseek-v2.5"}
{"test_name": "triangle_area", "response_0": "from Compiler.types import sfix\nfrom Compiler.library import mpc_math\n\ndef triangle_area(side, height):\n    \"\"\"\n    Given the length of one side and the corresponding height, compute the size of the triangle.\n    \"\"\"\n    return mpc_math.div_fx(mpc_math.mul_fx(side, height), sfix(2))\n", "response_1": "from Compiler.types import sfix\nimport Compiler.mpc_math as mpc_math\n\ndef triangle_area(side, height):\n    \"\"\"\n    Given the length of one side and the corresponding height, compute the size of the triangle.\n    \"\"\"\n    return mpc_math.divfx(mpc_math.mulfx(side, height), sfix(2))\n", "model_name": "deepseek-v2.5"}
{"test_name": "sin_plus_cos", "response_0": "from Compiler.types import sfix\nfrom Compiler.mpc_math import sin, cos\n\ndef sin_plus_cos(a):\n    \"\"\"\n    Return sin(a)+cos(a)\n    \"\"\"\n    return sin(a) + cos(a)\n", "response_1": "from Compiler import mpc_math\n\ndef sin_plus_cos(a):\n    \"\"\"\n    Return sin(a)+cos(a)\n    \"\"\"\n    return mpc_math.sin(a) + mpc_math.cos(a)\n", "model_name": "deepseek-v2.5"}
{"test_name": "sigmoid", "response_0": "from Compiler.types import sfix\nfrom Compiler.mpc_math import exp_fx\n\ndef sigmoid(x: sfix) -> sfix:\n    \"\"\"\n    sigmoid function\n    \"\"\"\n    return 1 / (1 + exp_fx(-x))\n", "response_1": "from Compiler.types import sfix\nimport Compiler.mpc_math as mpc_math\n\ndef sigmoid(x):\n    \"\"\"\n    sigmoid function\n    \"\"\"\n    return 1 / (1 + mpc_math.exp(-x))\n", "model_name": "deepseek-v2.5"}
{"test_name": "self_exponent", "response_0": "from Compiler.types import sfix\nimport Compiler.mpc_math as mpc_math\n\ndef self_exponent(k):\n    \"\"\"\n    Return the self-exponent k^k.\n    \"\"\"\n    return mpc_math.pow_fx(k, k)\n", "response_1": "from Compiler.types import sfix\nimport Compiler.mpc_math as mpc_math\n\ndef self_exponent(k: sfix) -> sfix:\n    \"\"\"\n    Return the self-exponent k^k.\n    \"\"\"\n    return mpc_math.pow_fx(k, k)\n", "model_name": "deepseek-v2.5"}
{"test_name": "silu", "response_0": "from Compiler import mpc_math\n\ndef silu(x):\n    \"\"\"\n    SiLU function\n    \"\"\"\n    return x / (1 + mpc_math.exp(-x))\n", "response_1": "from Compiler import mpc_math\n\ndef silu(x):\n    \"\"\"\n    SiLU function\n    \"\"\"\n    exp_neg_x = mpc_math.exp_fx(-x)\n    denominator = 1 + exp_neg_x\n    return x / denominator\n", "model_name": "deepseek-v2.5"}
{"test_name": "Gaussian_bracket", "response_0": "from Compiler.types import sfix\nimport Compiler.mpc_math as mpc_math\n\ndef Gaussian_bracket(x: sfix) -> sfix:\n    \"\"\"\n    Return the value of Gaussian large bracket.\n    \"\"\"\n    x_int = mpc_math.floor(x)\n    return x - x_int\n", "response_1": "from Compiler import mpc_math\n\ndef Gaussian_bracket(x):\n    \"\"\"\n    Return the value of Gaussian large bracket.\n    \"\"\"\n    x_int = mpc_math.floor(x)\n    return x - x_int\n", "model_name": "deepseek-v2.5"}
{"test_name": "asin_and_square", "response_0": "from Compiler.types import sfix\nimport Compiler.mpc_math as mpc_math\n\ndef asin_and_square(x: sfix) -> sfix:\n    \"\"\"\n    Take arcsin to the input, then compute the square of the outcome. \n    \"\"\"\n    asin_result = mpc_math.asin(x)\n    return mpc_math.pow_fx(asin_result, 2)\n", "response_1": "from Compiler.types import sfix\nimport Compiler.mpc_math as mpc_math\n\ndef asin_and_square(x: sfix) -> sfix:\n    \"\"\"\n    Take arcsin to the input, then compute the square of the outcome.\n    \"\"\"\n    asin_result = mpc_math.asin(x)\n    return mpc_math.pow_fx(asin_result, 2)\n", "model_name": "deepseek-v2.5"}
{"test_name": "cylinder_surface", "response_0": "from Compiler import mpc_math, types\n\ndef cylinder_surface(r: types.sfix, h: types.sfix) -> types.sfix:\n    \"\"\"\n    Given the radius and the height of a cylinder, return its surface area. \n    \"\"\"\n    pi = types.sfix(3.141592653589793)\n    r_squared = mpc_math.pow_fx(r, 2)\n    return 2 * pi * r_squared + 2 * pi * r * h\n", "response_1": "from Compiler import mpc_math\n\ndef cylinder_surface(r, h):\n    \"\"\"\n    Given the radius and the height of a cylinder, return its surface area.\n    \"\"\"\n    pi = 3.141592653589793\n    return 2 * pi * mpc_math.pow_fx(r, 2) + 2 * pi * r * h\n", "model_name": "deepseek-v2.5"}
{"test_name": "radian_to_degree", "response_0": "def radian_to_degree(r):\n    \"\"\"\n    Converting radian to degree\n    \"\"\"\n    import mpc_math\n    return r / mpc_math.pi * 180\n", "response_1": "from Compiler.types import sfix\nimport Compiler.mpc_math as mpc_math\n\ndef radian_to_degree(r: sfix) -> sfix:\n    \"\"\"\n    Converting radian to degree\n    \"\"\"\n    return r / mpc_math.pi_fx() * sfix(180)\n", "model_name": "deepseek-v2.5"}
{"test_name": "square_root", "response_0": "from Compiler.types import sfix\nfrom Compiler.mpc_math import sqrt_fx\n\ndef square_root(a: sfix) -> sfix:\n    \"\"\"\n    Return the square root of the input.\n    \"\"\"\n    return sqrt_fx(a)\n", "response_1": "from Compiler.types import sfix\nfrom Compiler.mpc_math import sqrt_fx\n\ndef square_root(a):\n    \"\"\"\n    return the square root of the input. \n    \"\"\"\n    return sqrt_fx(a)\n", "model_name": "deepseek-v2.5"}
{"test_name": "cosine_theorem", "response_0": "from Compiler.types import sfix\nimport Compiler.mpc_math as mpc_math\n\ndef cosine_theorem(a: sfix, b: sfix, rad: sfix) -> sfix:\n    \"\"\"\n    Given the two edges a, b and the angle rad between them, \n    use cosine theorem to compute the length of the third edge.\n    \"\"\"\n    a_squared = a * a\n    b_squared = b * b\n    cos_rad = mpc_math.cos(rad)\n    term = 2 * a * b * cos_rad\n    return mpc_math.sqrt(a_squared + b_squared - term)\n", "response_1": "from Compiler.types import sfix\nimport Compiler.mpc_math as mpc_math\n\ndef cosine_theorem(a, b, rad):\n    \"\"\"\n    Given the two edges a, b and the angle rad between them, \n    use cosine theorem to compute the length of the third edge.\n    \"\"\"\n    return mpc_math.sqrt(a**2 + b**2 - 2 * a * b * mpc_math.cos(rad))\n", "model_name": "deepseek-v2.5"}
{"test_name": "lights_states", "response_0": "from Compiler.types import sint\nimport mpc_math\n\ndef lights_states(num):\n    \"\"\"\n    Given the number of lights (all different), compute the total number of possible states. \n    (Each light has two states: on/off)\n    \"\"\"\n    return mpc_math.pow_fx(2, num)\n", "response_1": "from Compiler import mpc_math\n\ndef lights_states(num):\n    \"\"\"\n    Given the number of lights (all different), compute the total number of possible states.\n    (Each light has two states: on/off)\n    \"\"\"\n    return mpc_math.pow_fx(2, num)\n", "model_name": "deepseek-v2.5"}
{"test_name": "degree_to_radian", "response_0": "from Compiler import mpc_math\n\ndef degree_to_radian(d):\n    \"\"\"\n    Converting degree to radian\n    \"\"\"\n    return d * mpc_math.pi / 180\n", "response_1": "from Compiler import mpc_math\n\ndef degree_to_radian(d):\n    \"\"\"\n    Converting degree to radian\n    \"\"\"\n    return d * mpc_math.pi / 180\n", "model_name": "deepseek-v2.5"}
{"test_name": "Fah_to_Cel", "response_0": "from Compiler import types\n\ndef Fah_to_Cel(F):\n    \"\"\"\n    Convert Fahrenheit temperature to Celsius temperature.\n    \"\"\"\n    return (F - 32) / types.cfix(1.8)\n", "response_1": "from Compiler.types import sfix\n\ndef Fah_to_Cel(F):\n    \"\"\"\n    Convert Fahrenheit temperature to Celsius temperature.\n    \"\"\"\n    return (F - sfix(32)) / sfix(1.8)\n", "model_name": "deepseek-v2.5"}
{"test_name": "elliptic_area", "response_0": "from Compiler import mpc_math\n\ndef elliptic_area(a, b):\n    \"\"\"\n    Given the lengths of major axis and minor axis of the elliptic, return its area.\n    \"\"\"\n    return mpc_math.pi * a * b\n", "response_1": "from Compiler.types import sfix\nimport Compiler.mpc_math\n\ndef elliptic_area(a: sfix, b: sfix) -> sfix:\n    \"\"\"\n    Given the lengths of major axis and minor axis of the elliptic, return its area.\n    \"\"\"\n    return mpc_math.pi() * a * b\n", "model_name": "deepseek-v2.5"}
{"test_name": "floor", "response_0": "def floor(z):\n    \"\"\"\n    Return the maximum integer no bigger than the input.\n    \"\"\"\n    return z.floor()\n", "response_1": "from Compiler.types import sfix, cint\n\ndef floor(z):\n    \"\"\"\n    Return the maximum integer no bigger than the input.\n    \"\"\"\n    return cint(z)\n", "model_name": "deepseek-v2.5"}
{"test_name": "log_and_cube", "response_0": "from Compiler import mpc_math\n\ndef log_and_cube(x):\n    \"\"\"\n    take log (with base-2) to the input, then compute the cube of the outcome\n    \"\"\"\n    log_value = mpc_math.log_fx(x, 2)\n    return mpc_math.pow_fx(log_value, 3)\n", "response_1": "from Compiler import mpc_math\n\ndef log_and_cube(x):\n    \"\"\"\n    take log (with base-2) to the input, then compute the cube of the outcome\n    \"\"\"\n    log_result = mpc_math.log_fx(x, 2)\n    cube_result = mpc_math.pow_fx(log_result, 3)\n    return cube_result\n", "model_name": "deepseek-v2.5"}
{"test_name": "floor_and_square", "response_0": "from Compiler import types\nimport mpc_math\n\ndef floor_and_square(z):\n    \"\"\"\n    Calculate the maximum integer no bigger than the input. \n    Then return the square of the previous outcome. \n    \"\"\"\n    floor_z = mpc_math.floor(z)\n    return mpc_math.pow_fx(floor_z, 2)\n", "response_1": "from Compiler import types\nimport mpc_math\n\ndef floor_and_square(z: types.sfix):\n    \"\"\"\n    Calculate the maximum integer no bigger than the input. \n    Then return the square of the previous outcome. \n    \"\"\"\n    floor_z = mpc_math.floor(z)\n    return mpc_math.pow_fx(floor_z, 2)\n", "model_name": "deepseek-v2.5"}
{"test_name": "meters_to_feet", "response_0": "from Compiler.types import sfix\n\ndef meters_to_feet(m: sfix) -> sfix:\n    \"\"\"\n    Convert the length in meters to the length in feet.\n    \"\"\"\n    return m * sfix(3.2808)\n", "response_1": "from Compiler.types import sfix\n\ndef meters_to_feet(m):\n    \"\"\"\n    Convert the length in meters to the length in feet.\n    \"\"\"\n    return m * sfix(3.2808)\n", "model_name": "deepseek-v2.5"}
{"test_name": "sphere_area", "response_0": "from Compiler.types import sfix\nimport Compiler.mpc_math as mpc_math\n\ndef sphere_area(r):\n    \"\"\"\n    Return the area of a sphere surface with given radius r.\n    \"\"\"\n    return 4 * sfix(mpc_math.pi) * mpc_math.pow_fx(r, 2)\n", "response_1": "from Compiler import mpc_math\n\ndef sphere_area(r):\n    \"\"\"\n    Return the area of a sphere surface with given radius r.\n    \"\"\"\n    return 4 * mpc_math.pi() * mpc_math.pow_fx(r, 2)\n", "model_name": "deepseek-v2.5"}
{"test_name": "coarse_abs", "response_0": "from Compiler.types import sfix\nimport Compiler.mpc_math as mpc_math\n\ndef coarse_abs(x: sfix) -> sfix:\n    \"\"\"\n    Return the absolute value of x, and round it to zero.\n    \"\"\"\n    abs_x = mpc_math.abs(x)\n    return mpc_math.floor(abs_x)\n", "response_1": "from Compiler.types import sfix\nimport Compiler.mpc_math as mpc_math\n\ndef coarse_abs(x: sfix) -> sfix:\n    \"\"\"\n    Return the absolute value of x, and round it to zero.\n    \"\"\"\n    abs_x = mpc_math.abs(x)\n    return mpc_math.floor(abs_x)\n", "model_name": "deepseek-v2.5"}
{"test_name": "how_many_chickens", "response_0": "from Compiler import types\n\ndef how_many_chickens(heads, legs):\n    \"\"\"\n    Compute the number of chickens in the rabbit-chicken problem.\n    \"\"\"\n    return heads - (legs - heads * 2) // 2\n", "response_1": "from Compiler import types\n\ndef how_many_chickens(heads: types.sint, legs: types.sint) -> types.sint:\n    \"\"\"\n    Compute the number of chickens in the rabbit-chicken problem.\n    \"\"\"\n    return heads - (legs - heads * 2) // 2\n", "model_name": "deepseek-v2.5"}
{"test_name": "interest_calculator", "response_0": "from Compiler import mpc_math\n\ndef interest_calculator(capital, ratio, months):\n    \"\"\"\n    Given the initial capital, interest ratio and the number of months you deposit your money to the bank, \n    calculate the interest you can get. \n    \"\"\"\n    return (mpc_math.pow_fx(1 + ratio, months) - 1) * capital\n", "response_1": "from Compiler import *\n\ndef interest_calculator(capital, ratio, months):\n    \"\"\"\n    Given the initial capital, interest ratio and the number of months you deposit your money to the bank, \n    calculate the interest you can get. \n    \"\"\"\n    return (mpc_math.pow_fx(1 + ratio, months) - 1) * capital\n", "model_name": "deepseek-v2.5"}
{"test_name": "circle_area", "response_0": "from Compiler.types import sfix\nimport Compiler.mpc_math as mpc_math\n\ndef circle_area(r: sfix) -> sfix:\n    \"\"\"\n    Return the area of the circle with given radius.\n    \"\"\"\n    return mpc_math.pi() * mpc_math.pow_fx(r, 2)\n", "response_1": "from Compiler.types import sfix\nimport Compiler.mpc_math as mpc_math\n\ndef circle_area(r: sfix) -> sfix:\n    \"\"\"\n    Return the area of the circle with given radius.\n    \"\"\"\n    return mpc_math.pi() * mpc_math.pow_fx(r, 2)\n", "model_name": "deepseek-v2.5"}
{"test_name": "cube_and_square_root", "response_0": "from Compiler import mpc_math\n\ndef cube_and_square_root(x):\n    \"\"\"\n    take cube to the input, then compute the square root of the outcome\n    \"\"\"\n    return mpc_math.sqrt(mpc_math.pow_fx(x, 3))\n", "response_1": "from Compiler.types import sfix\nimport Compiler.mpc_math as mpc_math\n\ndef cube_and_square_root(x: sfix) -> sfix:\n    \"\"\"\n    take cube to the input, then compute the square root of the outcome\n    \"\"\"\n    cube = mpc_math.pow_fx(x, 3)\n    return mpc_math.sqrt(cube)\n", "model_name": "deepseek-v2.5"}
{"test_name": "round", "response_0": "from Compiler import types\nimport mpc_math\n\ndef round(x):\n    \"\"\"\n    Round x to the nearest integer.\n    \"\"\"\n    x_int = mpc_math.floor(x)\n    return x_int if (x - x_int) < 0.5 else x_int + 1\n", "response_1": "from Compiler.types import sfix\nimport Compiler.mpc_math as mpc_math\n\ndef round(x: sfix) -> sfix:\n    \"\"\"\n    Round x to the nearest integer.\n    \"\"\"\n    x_int = mpc_math.floor(x)\n    return x_int if (x - x_int) < sfix(0.5) else x_int + sfix(1)\n", "model_name": "deepseek-v2.5"}
{"test_name": "cryptic_adjustment", "response_0": "from Compiler.types import sfix\nimport Compiler.mpc_math as mpc_math\n\ndef cryptic_adjustment(origin):\n    \"\"\"\n    The professor want to adjust the pessimistic score of his students mid-term exam. \n    The adjustment formula is 10*sqrt(10*sqrt(origin))\n    \"\"\"\n    intermediate = mpc_math.sqrt(origin)\n    adjusted = mpc_math.sqrt(10 * intermediate)\n    return 10 * adjusted\n", "response_1": "from Compiler import mpc_math\n\ndef cryptic_adjustment(origin):\n    \"\"\"\n    The professor want to adjust the pessimistic score of his students mid-term exam. \n    The adjustment formula is 10*sqrt(10*sqrt(origin))\n    \"\"\"\n    return 10 * mpc_math.sqrt(10 * mpc_math.sqrt(origin))\n", "model_name": "deepseek-v2.5"}
{"test_name": "specific_pow", "response_0": "from Compiler.types import sfix\nimport Compiler.mpc_math as mpc_math\n\ndef specific_pow(x: sfix) -> sfix:\n    \"\"\"\n    Return x^(2.5).\n    \"\"\"\n    return mpc_math.pow_fx(x, sfix(2.5))\n", "response_1": "from Compiler.types import sfix\nimport Compiler.mpc_math as mpc_math\n\ndef specific_pow(x: sfix) -> sfix:\n    \"\"\"\n    Return x^(2.5).\n    \"\"\"\n    return mpc_math.pow_fx(x, sfix(2.5))\n", "model_name": "deepseek-v2.5"}
{"test_name": "soft_plus", "response_0": "from Compiler.types import sfix\nimport Compiler.mpc_math as mpc_math\n\ndef soft_plus(x: sfix) -> sfix:\n    \"\"\"\n    Softplus function\n    \"\"\"\n    return mpc_math.log_fx(1 + mpc_math.exp(x), base=sfix(1))\n", "response_1": "from Compiler.types import sfix\nimport Compiler.mpc_math as mpc_math\n\ndef soft_plus(x: sfix) -> sfix:\n    \"\"\"\n    Softplus function\n    \"\"\"\n    return mpc_math.log_fx(1 + mpc_math.exp(x))\n", "model_name": "deepseek-v2.5"}
{"test_name": "ball_volume", "response_0": "from Compiler.types import sfix\nimport Compiler.mpc_math as mpc_math\n\ndef ball_volume(r):\n    \"\"\"\n    Return the volume of the ball with given radius.\n    \"\"\"\n    return mpc_math.pi() * mpc_math.pow_fx(r, 3) * sfix(4) / sfix(3)\n", "response_1": "from Compiler.types import sfix\nimport Compiler.mpc_math as mpc_math\n\ndef ball_volume(r):\n    \"\"\"\n    Return the volume of the ball with given radius.\n    \"\"\"\n    return mpc_math.pi() * mpc_math.pow_fx(r, 3) * sfix(4) / sfix(3)\n", "model_name": "deepseek-v2.5"}
{"test_name": "Heron", "response_0": "from Compiler import mpc_math, types\n\ndef Heron(a, b, c):\n    \"\"\"\n    Given the lengths of three sides of the triangle, compute its size with Heron's formula.\n    \"\"\"\n    p = (a + b + c) / 2\n    return mpc_math.sqrt(p * (p - a) * (p - b) * (p - c))\n", "response_1": "from Compiler import mpc_math, types\n\ndef Heron(a, b, c):\n    \"\"\"\n    Given the lengths of three sides of the triangle, compute its size with Heron's formula.\n    \"\"\"\n    p = (a + b + c) / 2\n    return mpc_math.sqrt(p * (p - a) * (p - b) * (p - c))\n", "model_name": "deepseek-v2.5"}
{"test_name": "next_perfect_square", "response_0": "from Compiler import mpc_math\n\ndef next_perfect_square(x):\n    \"\"\"\n    Return the smallest perfect square number bigger than x. \n    The input x is guaranteed to be a positive integer. \n    \"\"\"\n    sqrt_x = mpc_math.sqrt(x)\n    floor_sqrt_x = mpc_math.floor(sqrt_x)\n    next_sqrt = floor_sqrt_x + 1\n    return mpc_math.pow_fx(next_sqrt, 2)\n", "response_1": "from Compiler import mpc_math\n\ndef next_perfect_square(x):\n    \"\"\"\n    Return the smallest perfect square number bigger than x. \n    The input x is guaranteed to be a positive integer. \n    \"\"\"\n    sqrt_x = mpc_math.sqrt(x)\n    floor_sqrt_x = mpc_math.floor(sqrt_x)\n    next_square = (floor_sqrt_x + 1) ** 2\n    return next_square\n", "model_name": "deepseek-v2.5"}
{"test_name": "pi_to_the_x", "response_0": "from Compiler import mpc_math\n\ndef pi_to_the_x(x):\n    \"\"\"\n    Return the value of pi^x.\n    \"\"\"\n    pi = sfix(3.141592653589793)\n    return mpc_math.pow_fx(pi, x)\n", "response_1": "from Compiler.types import sfix\nimport Compiler.mpc_math as mpc_math\n\ndef pi_to_the_x(x):\n    \"\"\"\n    Return the value of pi^x.\n    \"\"\"\n    pi = sfix(3.141592653589793)\n    return mpc_math.pow_fx(pi, x)\n", "model_name": "deepseek-v2.5"}
{"test_name": "spring_rocket", "response_0": "from Compiler import mpc_math, types\n\ndef spring_rocket(height: types.sfix, m: types.sfix, k: types.sfix) -> types.sfix:\n    g = types.sfix(9.8)\n    return mpc_math.sqrt(2 * m * g * height / k)\n", "response_1": "from Compiler import mpc_math\n\ndef spring_rocket(height, m, k):\n    g = 9.8\n    return mpc_math.sqrt(2 * m * g * height / k)\n", "model_name": "deepseek-v2.5"}
{"test_name": "cone_volume", "response_0": "from Compiler import mpc_math\nfrom Compiler import types\n\ndef cone_volume(r: types.sfix, h: types.sfix) -> types.sfix:\n    \"\"\"\n    Given the radius and height, compute the volume of the cone.\n    \"\"\"\n    return mpc_math.pi * r * r * h / 3\n", "response_1": "from Compiler.types import sfix\nimport Compiler.mpc_math as mpc_math\n\ndef cone_volume(r, h):\n    \"\"\"\n    Given the radius and height, compute the volume of the cone.\n    \"\"\"\n    return mpc_math.pi() * r * r * h / sfix(3)\n", "model_name": "deepseek-v2.5"}
{"test_name": "how_many_rabbits", "response_0": "from Compiler.types import sint\n\ndef how_many_rabbits(heads, legs):\n    \"\"\"\n    Compute the number of rabbits in the rabbit-chicken problem.\n    \"\"\"\n    return (legs - heads * 2) // 2\n", "response_1": "from Compiler import types\n\ndef how_many_rabbits(heads, legs):\n    \"\"\"\n    Compute the number of rabbits in the rabbit-chicken problem.\n    \"\"\"\n    return (legs - heads * 2) // 2\n\n# Example usage in MP-SPDZ\nheads = types.sint()\nlegs = types.sint()\nrabbits = how_many_rabbits(heads, legs)\n", "model_name": "deepseek-v2.5"}
