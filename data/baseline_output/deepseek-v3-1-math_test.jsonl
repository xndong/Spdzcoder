{"test_name": "next_integer", "response_0": "# Example usage in MP-SPDZ\nt = sfix(3.7)\nresult = next_integer(t)\nprint_ln(\"Next integer: %s\", result.reveal())\n", "prompt_token_0": 5101, "completion_token_0": 540, "response_1": "# Example usage\nt = sint.get_input_from(0)  # Assume t is a secret integer input\nresult = next_integer(t)\nprint_ln(\"Next integer: %s\", result.reveal())  # Reveal the result for output\n", "prompt_token_1": 5100, "completion_token_1": 503, "model_name": "deepseek-v3"}
{"test_name": "father_and_son", "response_0": "from Compiler.types import sint\n\ndef father_and_son(father_age, son_age):\n    \"\"\"\n    Given the age of father and son, \n    return before how many years or after how many years, the age of father is twice as the age of son.\n    \n    Parameters:\n        father_age (sint): The current age of the father.\n        son_age (sint): The current age of the son.\n    \n    Returns:\n        sint: The absolute difference between the father's age and twice the son's age.\n    \"\"\"\n    # Calculate twice the son's age\n    twice_son_age = son_age * 2\n    \n    # Calculate the difference between father's age and twice the son's age\n    difference = father_age - twice_son_age\n    \n    # Compute the absolute value of the difference\n    abs_difference = difference.if_else(difference, -difference)\n    \n    return abs_difference\n\n# Example usage:\n# father_age = sint.get_input_from(0)  # Secret input for father's age\n# son_age = sint.get_input_from(1)     # Secret input for son's age\n# result = father_and_son(father_age, son_age)\n# result.reveal()  # Reveal the result (only for testing purposes)\n", "prompt_token_0": 5190, "completion_token_0": 762, "response_1": "from Compiler.types import sint\n\ndef father_and_son(father_age, son_age):\n    \"\"\"\n    Given the age of father and son, \n    return before how many years or after how many years, the age of father is twice as the age of son.\n    \"\"\"\n    # Ensure inputs are of type sint\n    father_age = sint(father_age)\n    son_age = sint(son_age)\n    \n    # Calculate the difference between father's age and twice the son's age\n    difference = father_age - son_age * 2\n    \n    # Compute the absolute value of the difference\n    abs_difference = difference.if_else(difference, -difference)\n    \n    return abs_difference\n", "prompt_token_1": 5169, "completion_token_1": 530, "model_name": "deepseek-v3"}
{"test_name": "triangle_area", "response_0": "# Example usage\nside = sint.get_input_from(0)  # Secret input from party 0\nheight = sint.get_input_from(1)  # Secret input from party 1\n\narea = triangle_area(side, height)\n\n# The result is a secret value and can be used in further computations\n", "prompt_token_0": 5114, "completion_token_0": 520, "response_1": "# Example usage in an MP-SPDZ program\nside = sfix.get_input_from(0)  # Secret input for the side\nheight = sfix.get_input_from(1)  # Secret input for the height\n\narea = triangle_area(side, height)  # Compute the area\n\n# Output the result (this would typically be revealed at the end of the protocol)\nprint_ln(\"The area of the triangle is: %s\", area.reveal())\n", "prompt_token_1": 5107, "completion_token_1": 623, "model_name": "deepseek-v3"}
{"test_name": "sin_plus_cos", "response_0": "from Compiler.types import sfix\nfrom Compiler.library import print_ln\n\ndef sin_plus_cos(a):\n    \"\"\"\n    Return sin(a) + cos(a) where a is a secret fixed-point number.\n    \"\"\"\n    # Polynomial approximation for sin(x) = x - x^3/6 + x^5/120\n    sin_a = a - (a ** 3) / sfix(6) + (a ** 5) / sfix(120)\n    \n    # Polynomial approximation for cos(x) = 1 - x^2/2 + x^4/24\n    cos_a = sfix(1) - (a ** 2) / sfix(2) + (a ** 4) / sfix(24)\n    \n    # Return the sum of sin(a) and cos(a)\n    return sin_a + cos_a\n\n# Example usage\na = sfix.get_input_from(0)  # Assume input is in radians\nresult = sin_plus_cos(a)\nprint_ln(\"Result: %s\", result.reveal())\n", "prompt_token_0": 5103, "completion_token_0": 701, "response_1": "# Assuming 'a' is a secret fixed-point number (sfix)\na = sfix.get_input_from(0)  # Example: get input from party 0\nresult = sin_plus_cos(a)\n", "prompt_token_1": 5119, "completion_token_1": 615, "model_name": "deepseek-v3"}
{"test_name": "sigmoid", "response_0": "from Compiler.types import sfix\n\ndef sigmoid(x):\n    \"\"\"\n    sigmoid function using secure fixed-point arithmetic.\n    \"\"\"\n    # Compute the negative of x\n    neg_x = -x\n    \n    # Compute e^(-x) using the exponential function\n    exp_neg_x = sfix.exp(neg_x)\n    \n    # Compute 1 + e^(-x)\n    one_plus_exp_neg_x = 1 + exp_neg_x\n    \n    # Compute the reciprocal of (1 + e^(-x))\n    sigmoid_value = 1 / one_plus_exp_neg_x\n    \n    return sigmoid_value\n", "prompt_token_0": 5114, "completion_token_0": 596, "response_1": "# Example usage of the sigmoid function\nx = sfix.get_input_from(0)  # Assume x is provided as input from party 0\nresult = sigmoid(x)\nprint_ln(\"Sigmoid of x: %s\", result.reveal())  # Reveal the result for debugging\n", "prompt_token_1": 5136, "completion_token_1": 754, "model_name": "deepseek-v3"}
{"test_name": "self_exponent", "response_0": "k = sint(5)  # Example input\nresult = self_exponent(k)\n# The result is a secret integer representing 5^5 = 3125\n", "prompt_token_0": 5114, "completion_token_0": 484, "response_1": "from Compiler.types import sint\n\ndef self_exponent(k):\n    \"\"\"\n    Return the self-exponent k^k.\n    \n    Parameters:\n        k (sint): The secret integer to be self-exponentiated.\n    \n    Returns:\n        sint: The result of k^k.\n    \"\"\"\n    return k ** k\n", "prompt_token_1": 5116, "completion_token_1": 468, "model_name": "deepseek-v3"}
{"test_name": "silu", "response_0": "from Compiler.types import sfix\n\ndef silu(x):\n    \"\"\"\n    SiLU function implemented in MP-SPDZ.\n    \n    Parameters:\n        x (sfix): Secret fixed-point number input.\n    \n    Returns:\n        sfix: Result of the SiLU function.\n    \"\"\"\n    # Compute e^(-x) using the exponentiation operator\n    exp_neg_x = sfix(1) / (sfix(1) + (sfix(1) / (sfix(1) + x).exp())\n    \n    # Compute the SiLU function: x / (1 + e^(-x))\n    result = x / (sfix(1) + exp_neg_x)\n    \n    return result\n", "prompt_token_0": 5117, "completion_token_0": 621, "response_1": "# Example usage in an MP-SPDZ program\nx = sfix.get_input_from(0)  # Assume x is provided as input\nresult = silu(x)\nprint_ln(\"SiLU result: %s\", result.reveal())  # Reveal the result for output\n", "prompt_token_1": 5123, "completion_token_1": 626, "model_name": "deepseek-v3"}
{"test_name": "Gaussian_bracket", "response_0": "from Compiler.types import sfix\nfrom Compiler.library import print_ln\n\ndef Gaussian_bracket(x):\n    \"\"\"\n    Return the value of Gaussian large bracket.\n    \"\"\"\n    # Convert x to its nearest lower integer\n    x_int = x.floor()\n    \n    # Calculate the fractional part\n    fractional_part = x - x_int\n    \n    return fractional_part\n\n# Example usage\nx = sfix.get_random(0, 10)  # Random secret fixed-point number between 0 and 10\nresult = Gaussian_bracket(x)\nprint_ln(\"Fractional part: %s\", result.reveal())\n", "prompt_token_0": 5118, "completion_token_0": 582, "response_1": "# Example usage in MP-SPDZ\nx = sfix(3.7)\nresult = Gaussian_bracket(x)\n# result will hold the fractional part of 3.7, which is 0.7\n", "prompt_token_1": 5128, "completion_token_1": 517, "model_name": "deepseek-v3"}
{"test_name": "asin_and_square", "response_0": "from Compiler import types\n\ndef asin_and_square(x):\n    \"\"\"\n    Take arcsin to the input, then compute the square of the outcome.\n    \n    Parameters:\n        x (sfix): Secret fixed-point number representing the input.\n    \n    Returns:\n        sfix: The squared value of the arcsine of x.\n    \"\"\"\n    # Approximate arcsine using a Taylor series expansion\n    # asin(x) \u2248 x + (x^3)/6 + (3x^5)/40 + (5x^7)/112 + ...\n    # We will use the first few terms for simplicity\n    x_cubed = x ** 3\n    x_fifth = x ** 5\n    x_seventh = x ** 7\n    \n    asin_x = x + (x_cubed / 6) + (3 * x_fifth / 40) + (5 * x_seventh / 112)\n    \n    # Square the result\n    result = asin_x ** 2\n    \n    return result\n\n# Example usage:\n# x = sfix.get_input_from(0)  # Assuming input is provided by party 0\n# result = asin_and_square(x)\n# print_ln(\"Result: %s\", result.reveal())  # Reveal the result for debugging\n", "prompt_token_0": 5105, "completion_token_0": 699, "response_1": "from Compiler.types import sfix\n\ndef asin_and_square(x):\n    \"\"\"\n    Take arcsin to the input, then compute the square of the outcome.\n    \"\"\"\n    # Approximate arcsin using the first two terms of the Taylor series\n    arcsin_x = x + (x ** 3) / 6\n    \n    # Square the result\n    result = arcsin_x ** 2\n    \n    return result\n\n# Example usage:\n# x = sfix.get_input_from(0)  # Assume x is a secret input from party 0\n# output = asin_and_square(x)\n# print_ln(\"Result: %s\", output.reveal())\n", "prompt_token_1": 5124, "completion_token_1": 669, "model_name": "deepseek-v3"}
{"test_name": "cylinder_surface", "response_0": "from Compiler.types import sfix\nfrom Compiler.library import print_ln\n\ndef cylinder_surface(r, h):\n    \"\"\"\n    Given the radius and the height of a cylinder, return its surface area.\n    \"\"\"\n    # Define pi as a constant in sfix format\n    pi = sfix(3.141592653589793)\n    \n    # Calculate the surface area using the formula: 2 * pi * r^2 + 2 * pi * r * h\n    surface_area = 2 * pi * r**2 + 2 * pi * r * h\n    \n    return surface_area\n\n# Example usage:\n# Assuming r and h are secret inputs\nr = sfix.get_input_from(0)  # Secret input for radius\nh = sfix.get_input_from(1)  # Secret input for height\n\n# Compute the surface area\nresult = cylinder_surface(r, h)\n\n# Print the result (for debugging purposes, this will reveal the result)\nprint_ln(\"Surface Area: %s\", result.reveal())\n", "prompt_token_0": 5154, "completion_token_0": 730, "response_1": "from Compiler.types import sfix, cfix\nfrom Compiler.library import print_ln\n\ndef cylinder_surface(r, h):\n    \"\"\"\n    Given the radius and the height of a cylinder, return its surface area.\n    \n    Parameters:\n        r (sfix): The radius of the cylinder.\n        h (sfix): The height of the cylinder.\n    \n    Returns:\n        sfix: The surface area of the cylinder.\n    \"\"\"\n    # Define the constant pi\n    pi = cfix(3.141592653589793)\n    \n    # Calculate the surface area using the formula 2 * pi * r^2 + 2 * pi * r * h\n    surface_area = 2 * pi * r**2 + 2 * pi * r * h\n    \n    return surface_area\n\n# Example usage\nr = sfix.get_input_from(0)  # Secret input for radius\nh = sfix.get_input_from(1)  # Secret input for height\n\n# Compute the surface area\nresult = cylinder_surface(r, h)\n\n# Print the result (for debugging purposes)\nprint_ln(\"Surface Area: %s\", result.reveal())\n", "prompt_token_1": 5159, "completion_token_1": 806, "model_name": "deepseek-v3"}
{"test_name": "radian_to_degree", "response_0": "from Compiler.types import sfix\n\ndef radian_to_degree(r):\n    \"\"\"\n    Converting radian to degree using sfix for secret fixed-point arithmetic.\n    \"\"\"\n    # Define pi as a constant in sfix\n    pi = sfix(3.14159265358979323846)\n    \n    # Perform the conversion: r * 180 / pi\n    degree = r * sfix(180) / pi\n    \n    return degree\n", "prompt_token_0": 5086, "completion_token_0": 530, "response_1": "from Compiler.types import sfix\n\ndef radian_to_degree(r):\n    \"\"\"\n    Converting radian to degree\n    \"\"\"\n    # Define pi as a constant in sfix\n    pi = sfix(3.14159265358979323846)\n    \n    # Convert radian to degree\n    degree = (r / pi) * sfix(180)\n    \n    return degree\n", "prompt_token_1": 5103, "completion_token_1": 483, "model_name": "deepseek-v3"}
{"test_name": "square_root", "response_0": "a = sfix(16.0)\nresult = square_root(a)\n", "prompt_token_0": 5101, "completion_token_0": 636, "response_1": "from Compiler.types import sfix\n\ndef square_root(a):\n    \"\"\"\n    Compute the square root of a secret fixed-point number `a` using the Newton-Raphson method.\n    \n    Parameters:\n        a (sfix): The secret fixed-point number to compute the square root of.\n    \n    Returns:\n        sfix: The square root of `a`.\n    \"\"\"\n    # Initial guess for the square root\n    x = sfix(1.0)\n    \n    # Number of iterations for the Newton-Raphson method\n    num_iterations = 10\n    \n    # Newton-Raphson iteration\n    for _ in range(num_iterations):\n        x = (x + a / x) / 2\n    \n    return x\n", "prompt_token_1": 5088, "completion_token_1": 601, "model_name": "deepseek-v3"}
{"test_name": "cosine_theorem", "response_0": "from Compiler.types import sfix, sint\nfrom Compiler.library import print_ln\n\ndef cosine_theorem(a, b, rad):\n    \"\"\"\n    Given the two edges a, b and the angle rad between them, \n    use cosine theorem to compute the length of the third edge.\n    \n    Parameters:\n        a: sfix - length of the first edge\n        b: sfix - length of the second edge\n        rad: sfix - angle in radians between the two edges\n    \n    Returns:\n        sfix - length of the third edge\n    \"\"\"\n    # Compute a^2\n    a_squared = a * a\n    \n    # Compute b^2\n    b_squared = b * b\n    \n    # Compute 2 * a * b * cos(rad)\n    two_a_b_cos_rad = 2 * a * b * rad.cos()\n    \n    # Compute the length of the third edge using the cosine theorem\n    c_squared = a_squared + b_squared - two_a_b_cos_rad\n    \n    # Take the square root to get the final result\n    c = c_squared.sqrt()\n    \n    return c\n\n# Example usage:\n# Assuming a, b, and rad are provided as secret inputs\n# a = sfix.get_input_from(0)\n# b = sfix.get_input_from(1)\n# rad = sfix.get_input_from(2)\n# result = cosine_theorem(a, b, rad)\n# print_ln(\"The length of the third edge is: %s\", result.reveal())\n", "prompt_token_0": 5207, "completion_token_0": 818, "response_1": "from Compiler.types import sfix, sint\nfrom Compiler.library import print_ln, for_range\n\ndef cosine_theorem(a, b, rad):\n    \"\"\"\n    Given the two edges a, b and the angle rad between them, \n    use cosine theorem to compute the length of the third edge.\n    All inputs are secret types (sfix or sint).\n    \"\"\"\n    # Ensure a and b are of type sfix\n    a = sfix(a)\n    b = sfix(b)\n    rad = sfix(rad)\n    \n    # Compute a^2 and b^2\n    a_squared = a * a\n    b_squared = b * b\n    \n    # Compute 2 * a * b * cos(rad)\n    product = 2 * a * b\n    cos_rad = product * rad.cos()\n    \n    # Compute the third edge using the cosine theorem formula\n    third_edge_squared = a_squared + b_squared - cos_rad\n    third_edge = third_edge_squared.sqrt()\n    \n    return third_edge\n\n# Example usage (for testing purposes)\ndef main():\n    # Example inputs (secret values)\n    a = sfix(3.0)\n    b = sfix(4.0)\n    rad = sfix(1.0471975511965976)  # 60 degrees in radians\n    \n    # Compute the third edge\n    c = cosine_theorem(a, b, rad)\n    \n    # Reveal the result (for testing purposes)\n    c_revealed = c.reveal()\n    print_ln(\"The length of the third edge is: %s\", c_revealed)\n\n# Run the main function\nmain()\n", "prompt_token_1": 5191, "completion_token_1": 868, "model_name": "deepseek-v3"}
{"test_name": "lights_states", "response_0": "num_lights = sint(5)  # Example input\ntotal_states = lights_states(num_lights)\n# total_states will be 2^5 = 32, but it remains a secret integer\n", "prompt_token_0": 5134, "completion_token_0": 545, "response_1": "from Compiler.types import sint, cint\nfrom Compiler.library import print_ln\n\ndef lights_states(num):\n    \"\"\"\n    Given the number of lights (all different), compute the total number of possible states. \n    (Each light has two states: on/off)\n    \"\"\"\n    # Convert the input to a secret integer\n    num_sint = sint(num)\n    \n    # Compute 2^num using bitwise shift (equivalent to 1 << num)\n    # Since sint supports bitwise operations, we can use this approach\n    result = sint(1) << num_sint\n    \n    return result\n\n# Example usage\n# Assuming num is provided as input from party 0\nnum = sint.get_input_from(0)\nstates = lights_states(num)\nprint_ln(\"Number of possible states: %s\", states.reveal())\n", "prompt_token_1": 5135, "completion_token_1": 538, "model_name": "deepseek-v3"}
{"test_name": "degree_to_radian", "response_0": "from Compiler.types import sfix\n\ndef degree_to_radian(d):\n    \"\"\"\n    Converting degree to radian using secret fixed-point arithmetic.\n    The input `d` is a secret fixed-point number (sfix) representing the angle in degrees.\n    The function returns the corresponding angle in radians as a secret fixed-point number.\n    \"\"\"\n    # Define the constant pi as a clear fixed-point number\n    pi = sfix(math.pi)\n    \n    # Perform the conversion: radian = degree * (pi / 180)\n    radian = d * (pi / 180)\n    \n    return radian\n", "prompt_token_0": 5095, "completion_token_0": 543, "response_1": "# Example input in degrees (secret type)\ndegree = sfix(45)\n\n# Convert to radians\nradian = degree_to_radian(degree)\n\n# radian now holds the secret value of 45 degrees in radians\n", "prompt_token_1": 5094, "completion_token_1": 537, "model_name": "deepseek-v3"}
{"test_name": "Fah_to_Cel", "response_0": "# Example usage in an MP-SPDZ program\nF = sfix.get_input_from(0)  # Assume F is provided as a secret input\nC = Fah_to_Cel(F)\n# Now C holds the secret Celsius temperature\n", "prompt_token_0": 5088, "completion_token_0": 557, "response_1": "# Example usage in an MP-SPDZ program\nF = sfix.get_input_from(0)  # Get secret input from party 0\nC = Fah_to_Cel(F)           # Convert Fahrenheit to Celsius\n", "prompt_token_1": 5079, "completion_token_1": 480, "model_name": "deepseek-v3"}
{"test_name": "elliptic_area", "response_0": "from Compiler.library import print_ln\nfrom Compiler.types import sfix\n\ndef elliptic_area(a, b):\n    \"\"\"\n    Given the lengths of major axis and minor axis of the elliptic, return its area.\n    \"\"\"\n    # Define the constant pi as a secret fixed-point number\n    pi = sfix(3.14159265358979323846)\n    \n    # Calculate the area using the formula pi * a * b\n    area = pi * a * b\n    \n    return area\n\n# Example usage:\na = sfix.get_input_from(0)  # Secret input for major axis\nb = sfix.get_input_from(1)  # Secret input for minor axis\n\narea = elliptic_area(a, b)\nprint_ln(\"The area of the ellipse is: %s\", area.reveal())\n", "prompt_token_0": 5107, "completion_token_0": 563, "response_1": "from Compiler.library import *\nfrom Compiler.types import *\n\ndef elliptic_area(a, b):\n    \"\"\"\n    Given the lengths of major axis and minor axis of the elliptic, return its area.\n    The inputs a and b are secret fixed-point numbers (sfix).\n    \"\"\"\n    # Precompute pi as a secret fixed-point number\n    pi = sfix(3.141592653589793)\n    \n    # Compute the area of the ellipse: \u03c0 * a * b\n    area = pi * a * b\n    \n    return area\n\n# Example usage:\n# a = sfix.get_input_from(0)  # Secret input for major axis\n# b = sfix.get_input_from(1)  # Secret input for minor axis\n# result = elliptic_area(a, b)\n# print_ln(\"The area of the ellipse is: %s\", result.reveal())\n", "prompt_token_1": 5108, "completion_token_1": 666, "model_name": "deepseek-v3"}
{"test_name": "floor", "response_0": "# Example usage in an MP-SPDZ program\nz = sfix.get_input_from(0)  # Assume z is a secret fixed-point number provided by party 0\nresult = floor(z)\nprint_ln(\"The floor of z is: %s\", result.reveal())  # Reveal the result for output\n", "prompt_token_0": 5092, "completion_token_0": 556, "response_1": "from Compiler.types import sfix\n\ndef floor(z):\n    \"\"\"\n    Return the maximum integer no bigger than the input.\n    \n    Parameters:\n        z (sfix): The secret fixed-point number to floor.\n    \n    Returns:\n        sfix: The floored secret integer.\n    \"\"\"\n    # Convert the sfix value to its underlying integer representation\n    z_int = z.v\n    \n    # The floor operation is equivalent to truncating the fractional part\n    # Since sfix is represented as z_int / 2^f, we can compute the floor as z_int >> f\n    f = z.f\n    floored_value = z_int >> f\n    \n    # Convert the result back to sfix type\n    return sfix(floored_value, f)\n", "prompt_token_1": 5097, "completion_token_1": 628, "model_name": "deepseek-v3"}
{"test_name": "log_and_cube", "response_0": "from Compiler.types import sint\nfrom Compiler.library import *\n\ndef log_and_cube(x):\n    \"\"\"\n    take log (with base-2) to the input, then compute the cube of the outcome\n    \"\"\"\n    # Convert x to secret integer type\n    x = sint(x)\n    \n    # Compute the base-2 logarithm of x\n    # This is a placeholder for the actual log2 computation\n    # In practice, you would implement a secure log2 function\n    log2_x = sint(0)\n    for i in range(32):  # Assuming 32-bit integers\n        bit = (x >> i) & 1\n        log2_x += bit * i\n    \n    # Compute the cube of the log2 result\n    cube = log2_x * log2_x * log2_x\n    \n    return cube\n", "prompt_token_0": 5119, "completion_token_0": 627, "response_1": "# Example usage in MP-SPDZ\nx = sfix(8)  # Example input value\nresult = log_and_cube(x)\nprint_ln(\"Result: %s\", result.reveal())  # Reveal the result for output\n", "prompt_token_1": 5173, "completion_token_1": 643, "model_name": "deepseek-v3"}
{"test_name": "floor_and_square", "response_0": "# Assume z is a secret fixed-point number\nz = sfix.get_input_from(0)  # Get input from party 0\nresult = floor_and_square(z)\n", "prompt_token_0": 5111, "completion_token_0": 594, "response_1": "# Example usage\nz = sfix.get_input_from(0)  # Assume z is a secret input from party 0\nresult = floor_and_square(z)\n", "prompt_token_1": 5106, "completion_token_1": 479, "model_name": "deepseek-v3"}
{"test_name": "meters_to_feet", "response_0": "from Compiler.types import sfix\n\n# Example input in meters (secret)\nm = sfix.get_input_from(0)  # Assuming input is provided by party 0\n\n# Convert meters to feet\nfeet = meters_to_feet(m)\n\n# Output the result (still secret)\nprint_ln(\"Length in feet: %s\", feet.reveal())  # Reveal the result if needed\n", "prompt_token_0": 5110, "completion_token_0": 618, "response_1": "from Compiler.types import sfix, cfix\n\ndef meters_to_feet(m):\n    \"\"\"\n    Convert the length in meters to the length in feet.\n    The input `m` is a secret fixed-point number (sfix).\n    The function returns a secret fixed-point number (sfix) representing the length in feet.\n    \"\"\"\n    # Define the conversion factor as a clear fixed-point number\n    conversion_factor = cfix(3.2808)\n    \n    # Perform the conversion by multiplying the secret input with the clear conversion factor\n    feet = m * conversion_factor\n    \n    return feet\n", "prompt_token_1": 5117, "completion_token_1": 522, "model_name": "deepseek-v3"}
{"test_name": "sphere_area", "response_0": "from Compiler.types import sfix, cfix\nfrom Compiler.library import print_ln\n\ndef sphere_area(r):\n    \"\"\"\n    Return the area of a sphere surface with given radius r.\n    The radius r is a secret fixed-point number (sfix).\n    The result is also a secret fixed-point number (sfix).\n    \"\"\"\n    # Define the constant 4 * pi as a clear fixed-point number (cfix)\n    four_pi = cfix(4) * cfix(3.141592653589793)\n    \n    # Calculate the area using the formula 4 * pi * r^2\n    area = four_pi * r * r\n    \n    return area\n\n# Example usage:\n# r = sfix.get_input_from(0)  # Assume the radius is provided as input from party 0\n# area = sphere_area(r)\n# print_ln(\"The area of the sphere is %s\", area.reveal())\n", "prompt_token_0": 5110, "completion_token_0": 619, "response_1": "from Compiler.types import sfix, cfix\nfrom Compiler.library import print_ln\n\ndef sphere_area(r):\n    \"\"\"\n    Return the area of a sphere surface with given radius r.\n    The radius r is a secret fixed-point number (sfix).\n    \"\"\"\n    # Define the constant 4 * \u03c0 as a clear fixed-point number (cfix)\n    four_pi = cfix(4) * cfix(3.14159265358979323846)\n    \n    # Calculate the area using the formula 4 * \u03c0 * r\u00b2\n    area = four_pi * r * r\n    \n    # Return the computed area\n    return area\n\n# Example usage:\n# Assuming r is a secret input from party 0\nr = sfix.get_input_from(0)\narea = sphere_area(r)\n\n# Print the result (for debugging purposes)\nprint_ln(\"The area of the sphere is: %s\", area.reveal())\n", "prompt_token_1": 5088, "completion_token_1": 735, "model_name": "deepseek-v3"}
{"test_name": "coarse_abs", "response_0": "# Example usage\nx = sint.get_input_from(0)  # Assume x is a secret integer input from party 0\nresult = coarse_abs(x)\nprint_ln(\"The coarse absolute value of x is: %s\", result.reveal())\n", "prompt_token_0": 5115, "completion_token_0": 560, "response_1": "# Assume x is a secret integer obtained from some computation or input\nx = sint.get_input_from(0)\n\n# Compute the coarse absolute value\nresult = coarse_abs(x)\n\n# The result is a secret integer and can be used in further secure computations\n", "prompt_token_1": 5108, "completion_token_1": 522, "model_name": "deepseek-v3"}
{"test_name": "how_many_chickens", "response_0": "# Example usage in an MP-SPDZ program\nheads = sint.get_input_from(0)  # Secret input for heads\nlegs = sint.get_input_from(1)   # Secret input for legs\n\nchickens = how_many_chickens(heads, legs)\n\n# Output the result (still in secret form)\nprint_ln(\"Number of chickens: %s\", chickens.reveal())\n", "prompt_token_0": 5170, "completion_token_0": 697, "response_1": "from Compiler.types import sint\n\ndef how_many_chickens(heads, legs):\n    \"\"\"\n    Compute the number of chickens in the rabbit-chicken problem.\n    Both heads and legs are secret integers (sint).\n    \"\"\"\n    # Calculate the number of rabbits: (legs - heads * 2) // 2\n    rabbits = (legs - heads * 2) // 2\n    \n    # Calculate the number of chickens: heads - rabbits\n    chickens = heads - rabbits\n    \n    return chickens\n", "prompt_token_1": 5155, "completion_token_1": 453, "model_name": "deepseek-v3"}
{"test_name": "interest_calculator", "response_0": "def interest_calculator(capital, ratio, months):\n    \"\"\"\n    Given the initial capital, interest ratio and the number of months you deposit your money to the bank, \n    calculate the interest you can get. \n    All inputs are secret integers (sint).\n    \"\"\"\n    # Convert inputs to secret types\n    capital = sint(capital)\n    ratio = sint(ratio)\n    months = sint(months)\n\n    # Calculate (1 + ratio)\n    one = sint(1)\n    one_plus_ratio = one + ratio\n\n    # Calculate (1 + ratio)^months using exponentiation\n    # MP-SPDZ supports exponentiation with sint\n    power_result = one_plus_ratio ** months\n\n    # Calculate (power_result - 1)\n    interest_factor = power_result - one\n\n    # Calculate the total interest\n    interest = interest_factor * capital\n\n    return interest\n", "prompt_token_0": 5204, "completion_token_0": 598, "response_1": "from Compiler.types import sfix\n\ndef interest_calculator(capital, ratio, months):\n    \"\"\"\n    Given the initial capital, interest ratio and the number of months you deposit your money to the bank, \n    calculate the interest you can get. \n    \n    Parameters:\n        capital (sfix): The initial amount of money.\n        ratio (sfix): The monthly interest rate.\n        months (sint): The duration of the investment in months.\n    \n    Returns:\n        sfix: The calculated interest.\n    \"\"\"\n    # Convert months to sfix for compatibility with sfix operations\n    months_sfix = sfix(months)\n    \n    # Calculate (1 + ratio) ** months\n    one_plus_ratio = sfix(1) + ratio\n    power_result = one_plus_ratio ** months_sfix\n    \n    # Calculate (power_result - 1) * capital\n    interest = (power_result - sfix(1)) * capital\n    \n    return interest\n", "prompt_token_1": 5207, "completion_token_1": 690, "model_name": "deepseek-v3"}
{"test_name": "circle_area", "response_0": "from Compiler.types import sfix\n\ndef circle_area(r):\n    \"\"\"\n    Return the area of the circle with given radius.\n    The radius `r` is a secret fixed-point number (sfix).\n    The result is also a secret fixed-point number.\n    \"\"\"\n    # Define pi as a secret fixed-point number\n    pi = sfix(3.14159265358979323846)\n    \n    # Calculate the area using the formula \u03c0 * r^2\n    area = pi * r * r\n    \n    # Return the computed area\n    return area\n", "prompt_token_0": 5086, "completion_token_0": 452, "response_1": "from Compiler.types import sfix\nfrom Compiler.library import print_ln\n\ndef circle_area(r):\n    \"\"\"\n    Return the area of the circle with given radius.\n    The radius r is a secret fixed-point number (sfix).\n    The function computes the area as \u03c0 * r\u00b2 and returns it as an sfix.\n    \"\"\"\n    # Define \u03c0 as a clear fixed-point number (cfix)\n    pi = sfix(3.14159265358979323846)\n    \n    # Compute r\u00b2 (secret fixed-point multiplication)\n    r_squared = r * r\n    \n    # Compute the area as \u03c0 * r\u00b2\n    area = pi * r_squared\n    \n    # Return the computed area\n    return area\n\n# Example usage (assuming r is provided as a secret input)\n# r = sfix.get_input_from(0)  # Uncomment this line if r is provided as secret input\n# area = circle_area(r)\n# print_ln(\"The area of the circle is: %s\", area.reveal())  # Reveal the result for demonstration\n", "prompt_token_1": 5085, "completion_token_1": 654, "model_name": "deepseek-v3"}
{"test_name": "cube_and_square_root", "response_0": "# Example usage in an MP-SPDZ program\nx = sfix.get_input_from(0)  # Assume x is provided as secret input\nresult = cube_and_square_root(x)\n", "prompt_token_0": 5111, "completion_token_0": 509, "response_1": "# Assume x is a secret fixed-point number\nx = sfix.get_input_from(0)  # Example: Get input from party 0\n\n# Compute cube and square root\nresult = cube_and_square_root(x)\n\n# The result is a secret fixed-point number, and it can be used in further computations\n", "prompt_token_1": 5109, "completion_token_1": 549, "model_name": "deepseek-v3"}
{"test_name": "round", "response_0": "from Compiler.types import sfix\n\ndef round(x):\n    \"\"\"\n    Round x to the nearest integer.\n    \n    Parameters:\n        x (sfix): The secret fixed-point number to be rounded.\n    \n    Returns:\n        sfix: The nearest integer to x.\n    \"\"\"\n    # Get the integer part of x (largest integer less than or equal to x)\n    x_int = sfix(x.floor())\n    \n    # Get the fractional part of x\n    fractional_part = x - x_int\n    \n    # Check if the fractional part is less than 0.5\n    is_less_than_half = fractional_part < sfix(0.5)\n    \n    # If fractional part is less than 0.5, return x_int, else return x_int + 1\n    result = x_int + (1 - is_less_than_half)\n    \n    return result\n", "prompt_token_0": 5172, "completion_token_0": 627, "response_1": "x = sfix.get_input_from(0)  # Assume x is a secret input\nrounded_x = round(x)\n", "prompt_token_1": 5151, "completion_token_1": 612, "model_name": "deepseek-v3"}
{"test_name": "cryptic_adjustment", "response_0": "def cryptic_adjustment(origin):\n    \"\"\"\n    The professor wants to adjust the pessimistic score of his students' mid-term exam.\n    The adjustment formula is 10 * sqrt(10 * sqrt(origin)).\n    \"\"\"\n    # Convert the origin to sfix (secret fixed-point number)\n    origin_sfix = sfix(origin)\n    \n    # Calculate the inner square root: sqrt(origin)\n    inner_sqrt = origin_sfix.sqrt()\n    \n    # Multiply the inner square root by 10\n    inner_product = inner_sqrt * sfix(10)\n    \n    # Calculate the outer square root: sqrt(10 * sqrt(origin))\n    outer_sqrt = inner_product.sqrt()\n    \n    # Multiply the outer square root by 10 to get the final adjusted score\n    adjusted_score = outer_sqrt * sfix(10)\n    \n    return adjusted_score\n", "prompt_token_0": 5169, "completion_token_0": 652, "response_1": "def cryptic_adjustment(origin):\n    \"\"\"\n    The professor want to adjust the pessimistic score of his students mid-term exam. \n    The adjustment formula is 10*sqrt(10*sqrt(origin))\n    \"\"\"\n    # Convert the origin to a secret fixed-point number\n    origin_sfix = sfix(origin)\n    \n    # Compute the inner square root: sqrt(origin)\n    inner_sqrt = origin_sfix.sqrt()\n    \n    # Multiply the inner square root by 10\n    inner_mult = inner_sqrt * sfix(10)\n    \n    # Compute the outer square root: sqrt(10 * sqrt(origin))\n    outer_sqrt = inner_mult.sqrt()\n    \n    # Multiply the outer square root by 10 to get the final result\n    adjusted_score = outer_sqrt * sfix(10)\n    \n    return adjusted_score\n", "prompt_token_1": 5170, "completion_token_1": 575, "model_name": "deepseek-v3"}
{"test_name": "specific_pow", "response_0": "from Compiler.library import *\nfrom Compiler.types import *\n\ndef specific_pow(x):\n    \"\"\"\n    Return x^(2.5).\n    \"\"\"\n    # Convert the exponent 2.5 to sfix\n    exponent = sfix(2.5)\n    \n    # Calculate x^2.5 using the ** operator\n    result = x ** exponent\n    \n    return result\n\n# Example usage:\n# x = sfix.get_input_from(0)  # Assuming x is provided as secret input\n# result = specific_pow(x)\n# print_ln(\"Result: %s\", result.reveal())\n", "prompt_token_0": 5105, "completion_token_0": 623, "response_1": "# Assuming x is a secret fixed-point number\nx = sfix.get_input_from(0)  # Get input from party 0\nresult = specific_pow(x)\nprint_ln(\"x^2.5: %s\", result.reveal())  # Reveal the result to all parties\n", "prompt_token_1": 5097, "completion_token_1": 588, "model_name": "deepseek-v3"}
{"test_name": "soft_plus", "response_0": "from Compiler.types import sfix\n\ndef soft_plus(x):\n    \"\"\"\n    Softplus function implemented in MP-SPDZ.\n    The function computes log(1 + exp(x)) using secret fixed-point arithmetic.\n    \n    Parameters:\n        x (sfix): Secret fixed-point input.\n    \n    Returns:\n        sfix: The result of the Softplus function.\n    \"\"\"\n    # Compute e^x\n    exp_x = sfix.exp(x)\n    \n    # Compute 1 + e^x\n    one_plus_exp_x = sfix(1) + exp_x\n    \n    # Compute log(1 + e^x)\n    result = sfix.log(one_plus_exp_x)\n    \n    return result\n", "prompt_token_0": 5118, "completion_token_0": 573, "response_1": "from Compiler.types import sfix\n\ndef soft_plus(x):\n    \"\"\"\n    Softplus function implemented in MP-SPDZ.\n    \"\"\"\n    # Compute e^x using the exponential function\n    exp_x = x.exp()\n    \n    # Compute 1 + e^x\n    one_plus_exp_x = sfix(1) + exp_x\n    \n    # Compute the natural logarithm of (1 + e^x)\n    result = one_plus_exp_x.ln()\n    \n    return result\n", "prompt_token_1": 5119, "completion_token_1": 536, "model_name": "deepseek-v3"}
{"test_name": "ball_volume", "response_0": "from Compiler.types import sfix\nfrom Compiler.library import print_ln\n\ndef ball_volume(r):\n    \"\"\"\n    Return the volume of the ball with given radius.\n    \"\"\"\n    # Define the constant for pi\n    pi = sfix(math.pi)\n    \n    # Calculate the volume using the formula V = (4/3) * pi * r^3\n    volume = (sfix(4) / sfix(3)) * pi * (r ** 3)\n    \n    return volume\n\n# Example usage:\n# Assuming the radius is provided as a secret input\nradius = sfix.get_input_from(0)  # Get secret input from party 0\nvolume = ball_volume(radius)\n\n# Print the result (for debugging purposes, in real scenarios, you might not reveal it)\nprint_ln(\"Volume of the ball: %s\", volume.reveal())\n", "prompt_token_0": 5123, "completion_token_0": 675, "response_1": "from Compiler.library import *\nfrom Compiler.types import *\n\ndef ball_volume(r):\n    \"\"\"\n    Return the volume of the ball with given radius.\n    The radius `r` is a secret integer (sint).\n    The function returns the volume as a secret fixed-point number (sfix).\n    \"\"\"\n    # Define the constant \u03c0 as a clear fixed-point number (cfix)\n    pi = cfix(math.pi)\n    \n    # Convert the radius to a secret fixed-point number (sfix)\n    r_sfix = sfix(r)\n    \n    # Compute the volume using the formula (4/3) * \u03c0 * r\u00b3\n    volume = (sfix(4) / sfix(3)) * pi * (r_sfix ** 3)\n    \n    return volume\n", "prompt_token_1": 5112, "completion_token_1": 638, "model_name": "deepseek-v3"}
{"test_name": "Heron", "response_0": "def Heron(a, b, c):\n    \"\"\"\n    Given the lengths of three sides of the triangle, compute its size with Heron's formula.\n    All inputs are secret integers (sint) and the result is a secret fixed-point number (sfix).\n    \"\"\"\n    # Convert inputs to secret fixed-point numbers for precision\n    a = sfix(a)\n    b = sfix(b)\n    c = sfix(c)\n\n    # Compute the semi-perimeter p\n    p = (a + b + c) / 2\n\n    # Compute the product p * (p - a) * (p - b) * (p - c)\n    product = p * (p - a) * (p - b) * (p - c)\n\n    # Compute the square root of the product\n    area = product.sqrt()\n\n    # Return the area as a secret fixed-point number\n    return area\n", "prompt_token_0": 5171, "completion_token_0": 629, "response_1": "from Compiler.types import sfix\nfrom Compiler.library import sqrt\n\ndef Heron(a, b, c):\n    \"\"\"\n    Given the lengths of three sides of the triangle, compute its size with Heron's formula.\n    The inputs a, b, and c are secret fixed-point numbers (sfix).\n    \"\"\"\n    # Compute the semi-perimeter p\n    p = (a + b + c) / sfix(2)\n    \n    # Compute the area using Heron's formula\n    area = sqrt(p * (p - a) * (p - b) * (p - c))\n    \n    return area\n", "prompt_token_1": 5188, "completion_token_1": 692, "model_name": "deepseek-v3"}
{"test_name": "next_perfect_square", "response_0": "from Compiler.types import sint, cint\nfrom Compiler.library import function\n\n@function\ndef next_perfect_square(x):\n    \"\"\"\n    Return the smallest perfect square number bigger than x.\n    The input x is guaranteed to be a positive integer.\n    \"\"\"\n    # Compute the square root of x\n    sqrt_x = x.sqrt()\n    \n    # Floor the square root to the nearest integer\n    floor_sqrt = sqrt_x.floor()\n    \n    # Add 1 to the floored square root\n    next_sqrt = floor_sqrt + cint(1)\n    \n    # Square the result to get the next perfect square\n    next_square = next_sqrt * next_sqrt\n    \n    return next_square\n", "prompt_token_0": 5156, "completion_token_0": 619, "response_1": "from Compiler.library import *\n\ndef next_perfect_square(x):\n    \"\"\"\n    Return the smallest perfect square number bigger than x.\n    The input x is guaranteed to be a positive integer.\n    \"\"\"\n    # Function to compute the integer square root using binary search\n    def integer_sqrt(n):\n        low = sint(0)\n        high = n\n        while low < high:\n            mid = (low + high + 1) // 2\n            mid_sq = mid * mid\n            if mid_sq <= n:\n                low = mid\n            else:\n                high = mid - 1\n        return low\n\n    # Compute the integer square root of x\n    sqrt_x = integer_sqrt(x)\n\n    # Compute the next perfect square\n    next_square = (sqrt_x + 1) * (sqrt_x + 1)\n\n    return next_square\n\n# Example usage:\n# x = sint.get_input_from(0)  # Assuming x is provided as a secret input\n# result = next_perfect_square(x)\n# print_ln(\"The next perfect square is: %s\", result.reveal())\n", "prompt_token_1": 5160, "completion_token_1": 776, "model_name": "deepseek-v3"}
{"test_name": "pi_to_the_x", "response_0": "from Compiler.types import sfix, cfix\nfrom Compiler.library import for_range\n\ndef pi_to_the_x(x):\n    \"\"\"\n    Return the value of pi^x.\n    \n    Parameters:\n        x (sfix): The exponent to which pi is raised.\n    \n    Returns:\n        sfix: The result of pi^x.\n    \"\"\"\n    # Define pi as a clear fixed-point number\n    pi = cfix(math.pi)\n    \n    # Initialize the result as 1.0 (sfix)\n    result = sfix(1.0)\n    \n    # Use a loop to perform exponentiation\n    @for_range(x.size())\n    def _(i):\n        result = result * pi\n    \n    return result\n", "prompt_token_0": 5112, "completion_token_0": 701, "response_1": "# Example usage\nx = sfix.get_input_from(0)  # Assume x is provided as secret input\nresult = pi_to_the_x(x)\n", "prompt_token_1": 5103, "completion_token_1": 580, "model_name": "deepseek-v3"}
{"test_name": "spring_rocket", "response_0": "from Compiler.types import sfix, sint\nfrom Compiler.library import print_ln\n\ndef spring_rocket(height, m, k):\n    \"\"\"\n    You want to use a spring with stiffness coefficient k to bounce an object with mass m to the given height. \n    You should return the minimum length the spring should be compressed. \n    Assume g = 9.8\n    \"\"\"\n    g = sfix(9.8)\n    height = sfix(height)\n    m = sfix(m)\n    k = sfix(k)\n    \n    # Calculate the minimum compression length\n    compression_length = (2 * m * g * height / k).sqrt()\n    \n    return compression_length\n\n# Example usage\nheight = 10  # Desired height in meters\nm = 2       # Mass of the object in kg\nk = 100     # Stiffness coefficient of the spring in N/m\n\n# Convert inputs to secret types\nheight_secret = sfix(height)\nm_secret = sfix(m)\nk_secret = sfix(k)\n\n# Compute the result\nresult = spring_rocket(height_secret, m_secret, k_secret)\n\n# Print the result (in a real scenario, this would be revealed securely)\nprint_ln(\"Minimum compression length: %s\", result.reveal())\n", "prompt_token_0": 5248, "completion_token_0": 653, "response_1": "# Secret inputs (sfix)\nheight = sfix.get_input_from(0)  # Target height (secret)\nm = sfix.get_input_from(1)        # Mass of the object (secret)\nk = sfix.get_input_from(2)        # Stiffness coefficient of the spring (secret)\n\n# Compute the minimum compression length\ncompression_length = spring_rocket(height, m, k)\n\n# Output the result (still secret)\nprint_ln(\"Minimum compression length: %s\", compression_length.reveal())\n", "prompt_token_1": 5240, "completion_token_1": 717, "model_name": "deepseek-v3"}
{"test_name": "cone_volume", "response_0": "from Compiler.types import sfix\nfrom Compiler.library import print_ln\n\ndef cone_volume(r, h):\n    \"\"\"\n    Given the radius and height, compute the volume of the cone.\n    All inputs are secret types (sfix).\n    \"\"\"\n    # Define pi as a fixed-point constant\n    pi = sfix(3.14159265358979323846)\n    \n    # Compute the volume using the formula: (pi * r^2 * h) / 3\n    r_squared = r * r\n    volume = (pi * r_squared * h) / 3\n    \n    return volume\n\n# Example usage:\n# Assuming r and h are secret inputs from parties\nr = sfix.get_input_from(0)  # Secret input for radius from party 0\nh = sfix.get_input_from(1)  # Secret input for height from party 1\n\n# Compute the volume\nvolume = cone_volume(r, h)\n\n# Output the result (in a real scenario, this would be a secret output)\nprint_ln(\"The volume of the cone is: %s\", volume.reveal())\n", "prompt_token_0": 5142, "completion_token_0": 655, "response_1": "from Compiler.library import *\nfrom Compiler.types import *\n\ndef cone_volume(r, h):\n    \"\"\"\n    Given the radius and height, compute the volume of the cone.\n    \"\"\"\n    # Define the constant pi as a clear fixed-point number\n    pi = cfix(math.pi)\n    \n    # Compute the volume using the formula (\u03c0 * r\u00b2 * h) / 3\n    volume = (pi * r * r * h) / cfix(3)\n    \n    return volume\n\n# Example usage:\n# Assuming r and h are secret inputs (sfix)\nr = sfix.get_input_from(0)  # Secret radius\nh = sfix.get_input_from(1)  # Secret height\n\n# Compute the volume of the cone\nvolume = cone_volume(r, h)\n\n# Output the result (still in secret form)\nprint_ln(\"Volume of the cone: %s\", volume.reveal())\n", "prompt_token_1": 5131, "completion_token_1": 607, "model_name": "deepseek-v3"}
{"test_name": "how_many_rabbits", "response_0": "from Compiler.types import sint\n\ndef how_many_rabbits(heads, legs):\n    \"\"\"\n    Compute the number of rabbits in the rabbit-chicken problem.\n    All inputs and outputs are secret integers (sint).\n    \"\"\"\n    # Convert inputs to secret integers (sint)\n    heads = sint(heads)\n    legs = sint(legs)\n    \n    # Calculate the number of rabbits\n    rabbits = (legs - heads * 2) // 2\n    \n    return rabbits\n", "prompt_token_0": 5130, "completion_token_0": 405, "response_1": "# Example usage in an MP-SPDZ program\nheads = sint.get_input_from(0)  # Secret input for the number of heads\nlegs = sint.get_input_from(1)   # Secret input for the number of legs\n\nrabbits = how_many_rabbits(heads, legs)\n\n# The result can be used in further secure computations or revealed if necessary\nprint_ln(\"Number of rabbits: %s\", rabbits.reveal())\n", "prompt_token_1": 5152, "completion_token_1": 608, "model_name": "deepseek-v3"}
