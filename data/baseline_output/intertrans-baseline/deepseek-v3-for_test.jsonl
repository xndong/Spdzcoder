{"test_name": "multiply_first_five", "response_0": "def multiply_first_five(array):\n    \"\"\"\n    Multiply the first five elements in the array (if len(array)<5 then multiply all)\n    \"\"\"\n    prod = 1\n    for i in range(len(array)):\n        prod = prod * array[i]\n        if i >= 4:\n            break\n    return prod\n", "response_1": "def multiply_first_five(array):\n    \"\"\"\n    Multiply the first five elements in the array (if len(array)<5 then multiply all)\n    \"\"\"\n    prod = 1\n    for i in range(len(array)):\n        prod *= array[i]\n        if i >= 4:\n            break\n    return prod\n", "model_name": "deepseek-v3"}
{"test_name": "second_largest", "response_0": "program second_largest(arr):\n    # Initialize largest and second largest\n    largest = arr[0] if arr[0] >= arr[1] else arr[1]\n    second = arr[1] if arr[0] >= arr[1] else arr[0]\n    \n    # Iterate through the array to find the second largest\n    for i in range(len(arr)):\n        if i > 1:\n            # Compare current element with largest\n            cmp_largest = arr[i] >= largest\n            # Update second and largest if necessary\n            second = cmp_largest * largest + (1 - cmp_largest) * second\n            largest = cmp_largest * arr[i] + (1 - cmp_largest) * largest\n            # Compare current element with second\n            cmp_second = arr[i] >= second\n            # Update second if necessary\n            second = cmp_second * arr[i] + (1 - cmp_second) * second\n    \n    return second\n", "response_1": "def second_largest(arr):\n    \"\"\"\n    Return the second largest element in the array.\n    \"\"\"\n    # Initialize largest and second largest\n    largest = arr[0] if arr[0] >= arr[1] else arr[1]\n    second = arr[1] if arr[0] >= arr[1] else arr[0]\n\n    # Iterate through the array starting from the third element\n    for i in range(2, len(arr)):\n        # Update largest and second largest\n        if arr[i] >= largest:\n            second = largest\n            largest = arr[i]\n        else:\n            if arr[i] >= second:\n                second = arr[i]\n    \n    return second\n", "model_name": "deepseek-v3"}
{"test_name": "partial_sum", "response_0": "def partial_sum(arr):\n    \"\"\"\n    Compute the partial sum of the array.\n    \"\"\"\n    partial = sfix(0)\n    for i in range(len(arr)):\n        partial = partial + arr[i]\n        arr[i] = partial\n    return arr\n", "response_1": "def partial_sum(arr):\n    \"\"\"\n    Compute the partial sum of the array.\n    \"\"\"\n    partial = sfix(0)\n    for i in range(len(arr)):\n        partial = partial + arr[i]\n        arr[i] = partial\n    return arr\n", "model_name": "deepseek-v3"}
{"test_name": "max_adjacent_product", "response_0": "def max_adjacent_product(arr):\n    \"\"\"\n    Return the max product of adjacent elements in the array.\n    The input array is guaranteed to have length at least 2. \n    \"\"\"\n    # Initialize the current maximum product with the product of the first two elements\n    cur = arr[0] * arr[1]\n    \n    # Iterate through the array to find the maximum product of adjacent elements\n    for i in range(1, len(arr) - 1):\n        product = arr[i] * arr[i + 1]\n        # Update the current maximum product if the new product is greater\n        cur = if_else(product > cur, product, cur)\n    \n    return cur\n", "response_1": "def max_adjacent_product(arr):\n    \"\"\"\n    Return the max product of adjacent elements in the array.\n    The input array is guaranteed to have length at least 2.\n    \"\"\"\n    # Initialize the current maximum product with the product of the first two elements\n    cur = arr[0] * arr[1]\n    \n    # Iterate through the array to find the maximum product of adjacent elements\n    for i in range(len(arr) - 1):\n        # Compute the product of the current and next element\n        product = arr[i] * arr[i + 1]\n        \n        # Update the current maximum product if the new product is greater\n        if product > cur:\n            cur = product\n    \n    # Return the maximum product\n    return cur\n", "model_name": "deepseek-v3"}
{"test_name": "argmax", "response_0": "def argmax(a):\n    \"\"\"\n    Return the index of the max value of an array.\n    \"\"\"\n    current = a[0]\n    index = 0\n    for i in range(len(a)):\n        comp = current >= a[i]\n        index = comp.if_else(index, i)\n        current = comp.if_else(current, a[i])\n    return index\n", "response_1": "def argmax(a):\n    \"\"\"\n    Return the index of the max value of an array.\n    \"\"\"\n    current = a[0]\n    index = 0\n    for i in range(1, len(a)):\n        comp = current >= a[i]\n        index = comp.if_else(index, i)\n        current = comp.if_else(current, a[i])\n    return index\n", "model_name": "deepseek-v3"}
{"test_name": "count_distinct", "response_0": "def count_distinct(arr):\n    \"\"\"\n    Return the number of distinct values in the array.\n    \"\"\"\n    counter = sfix(0)\n    n = len(arr)\n    for i in range(n):\n        unique = sbit(True)\n        for j in range(i):\n            if arr[j] == arr[i]:\n                unique = sbit(False)\n        counter = counter + unique\n    return counter\n", "response_1": "def count_distinct(arr):\n    \"\"\"\n    Return the number of distinct values in the array.\n    \"\"\"\n    counter = sint(0)\n    n = len(arr)\n    for i in range(n):\n        unique = sint(1)\n        for j in range(i):\n            unique = unique * (1 - (arr[j] == arr[i]))\n        counter = counter + unique\n    return counter\n", "model_name": "deepseek-v3"}
{"test_name": "exists_true", "response_0": "def exists_true(arr):\n    \"\"\"\n    Check whether the boolean array contains a True.\n    \"\"\"\n    ret = False\n    for item in arr:\n        ret = ret or item\n    return ret\n", "response_1": "def exists_true(arr):\n    \"\"\"\n    Check whether the boolean array contains a True.\n    \"\"\"\n    ret = False\n    for item in arr:\n        ret = ret | item\n    return ret\n", "model_name": "deepseek-v3"}
{"test_name": "range", "response_0": "def range(arr):\n    \"\"\"\n    Return the range of the array.\n    \"\"\"\n    max_value = arr[0]\n    min_value = arr[0]\n    for item in arr:\n        max_value = max(max_value, item)\n        min_value = min(min_value, item)\n    return max_value - min_value\n", "response_1": "def range(arr):\n    \"\"\"\n    Return the range of the array.\n    \"\"\"\n    max_value = arr[0]\n    min_value = arr[0]\n    \n    for i in range(len(arr)):\n        item = arr[i]\n        max_value = if_else(max_value >= item, max_value, item)\n        min_value = if_else(min_value <= item, min_value, item)\n    \n    return max_value - min_value\n", "model_name": "deepseek-v3"}
{"test_name": "count_larger_than_5", "response_0": "def count_larger_than_5(arr):\n    \"\"\"\n    Count the number of elements in the given array larger than 5.\n    \"\"\"\n    counter = sfix(0)\n    for item in arr:\n        comparison = item > sfix(5)\n        counter = counter + comparison\n    return counter\n", "response_1": "def count_larger_than_5(arr):\n    \"\"\"\n    Count the number of elements in the given array larger than 5.\n    \"\"\"\n    counter = sint(0)  # Initialize counter as a secret integer\n    for item in arr:\n        comparison = item > 5  # Secret comparison\n        counter = counter + comparison  # Increment counter if item > 5\n    return counter\n", "model_name": "deepseek-v3"}
{"test_name": "exists_dominator", "response_0": "def exists_dominator(arr):\n    \"\"\"\n    Check whether there exists a dominator in the given array, \n    whose absolute value is strictly larger than the sum of the absolute values of all other elements. \n    \"\"\"\n    max = sfix(0)\n    sum = sfix(0)\n    \n    for item in arr:\n        abs_item = abs(item)\n        max = max_if_else(abs_item > max, abs_item, max)\n        sum = sum + abs_item\n    \n    return (2 * max) > sum\n", "response_1": "from util import if_else\nfrom Compiler.types import sint, cint\nfrom Compiler.library import for_range\n\ndef exists_dominator(arr):\n    \"\"\"\n    Check whether there exists a dominator in the given array, \n    whose absolute value is strictly larger than the sum of the absolute values of all other elements.\n    \"\"\"\n    max_val = sint(0)\n    total_sum = sint(0)\n    \n    @for_range(len(arr))\n    def _(i):\n        nonlocal max_val, total_sum\n        abs_item = abs(arr[i])\n        max_val = if_else(abs_item > max_val, abs_item, max_val)\n        total_sum = total_sum + abs_item\n    \n    return 2 * max_val > total_sum\n", "model_name": "deepseek-v3"}
{"test_name": "greedy_picker", "response_0": "from Compiler import types\n\ndef greedy_picker(items, captivity):\n    \"\"\"\n    There is a greedy picker with a bag picking items. \n    Once the picker sees an item that his bag has space for, he will pick up the item (which will take some space) and put it into his bag. \n    You should compute how many items the greedy picker can finally get with the greedy strategy. \n    \"\"\"\n    # Initialize the number of items picked to 0\n    num = types.sint(0)\n    \n    # Iterate over the items\n    for item in items:\n        # Check if the item can fit in the bag\n        can_fit = item <= captivity\n        # Update the captivity and num if the item can fit\n        captivity = captivity - item * can_fit\n        num = num + can_fit\n    \n    return num\n", "response_1": "def greedy_picker(items, captivity):\n    \"\"\"\n    There is a greedy picker with a bag picking items. \n    Once the picker sees an item that his bag has space for, he will pick up the item (which will take some space) and put it into his bag. \n    You should compute how many items the greedy picker can finally get with the greedy strategy. \n    \"\"\"\n    num = sfix(0)\n    for item in items:\n        can_pick = item <= captivity\n        captivity = captivity - item * can_pick\n        num = num + can_pick\n    return num\n", "model_name": "deepseek-v3"}
{"test_name": "scalar_add_array", "response_0": "def scalar_add_array(s, l):\n    \"\"\"\n    Add all the elements in the array to the scalar and return the result.\n    \"\"\"\n    for item in l:\n        s = s + item\n    return s\n", "response_1": "def scalar_add_array(s, l):\n    \"\"\"\n    Add all the elements in the array to the scalar and return the result.\n    \"\"\"\n    for item in l:\n        s = s + item\n    return s\n", "model_name": "deepseek-v3"}
{"test_name": "is_equidistant_seq", "response_0": "def is_equidistant_seq(arr):\n    \"\"\"\n    Return whether or not the array is an equidistant sequence.\n    If the array has length 1 or 0, return True.\n    \"\"\"\n    n = len(arr)\n    if n <= 1:\n        return True\n    \n    d = sfix(0)\n    for i in range(n - 1):\n        if i > 0 and (arr[i + 1] - arr[i]) != d:\n            return False\n        d = arr[i + 1] - arr[i]\n    return True\n", "response_1": "def is_equidistant_seq(arr):\n    \"\"\"\n    Return whether or not the array is an equidistant sequence.\n    If the array has length 1 or 0, return True.\n    \"\"\"\n    n = len(arr)\n    if n <= 1:\n        return True\n    \n    d = arr[1] - arr[0]\n    for i in range(1, n-1):\n        if arr[i+1] - arr[i] != d:\n            return False\n    return True\n", "model_name": "deepseek-v3"}
{"test_name": "inner_product", "response_0": "def inner_product(vec1, vec2):\n    \"\"\"\n    Compute the inner product of the two secret-shared arrays.\n    \"\"\"\n    sum = sfix(0)\n    for i in range(len(vec1)):\n        sum = sum + vec1[i] * vec2[i]\n    return sum\n", "response_1": "def inner_product(vec1, vec2):\n    \"\"\"\n    Compute the inner product of the two arrays.\n    \"\"\"\n    sum = sfix(0)\n    for i in range(len(vec1)):\n        sum = sum + vec1[i] * vec2[i]\n    return sum\n", "model_name": "deepseek-v3"}
{"test_name": "more_distinct_nonnegative", "response_0": "def more_distinct_nonnegative(arr):\n    \"\"\"\n    Return whether the array has more distinct nonnegative elements than distinct negative elements.\n    \"\"\"\n    nonnegative_counter = 0\n    negative_counter = 0\n    n = len(arr)\n    \n    for i in range(n):\n        unique = True\n        for j in range(i):\n            if arr[j] == arr[i]:\n                unique = False\n        if unique:\n            if arr[i] >= 0:\n                nonnegative_counter = nonnegative_counter + 1\n            else:\n                negative_counter = negative_counter + 1\n    \n    return nonnegative_counter > negative_counter\n", "response_1": "from Compiler.library import *\n\ndef more_distinct_nonnegative(arr):\n    \"\"\"\n    Return whether the array has more distinct nonnegative elements than distinct negative elements. \n    \"\"\"\n    nonnegative_counter = sint(0)\n    negative_counter = sint(0)\n    n = len(arr)\n    \n    for i in range(n):\n        unique = sint(1)\n        for j in range(i):\n            if arr[j] == arr[i]:\n                unique = sint(0)\n        nonnegative_counter += (arr[i] >= 0) * unique\n        negative_counter += (arr[i] < 0) * unique\n    \n    return nonnegative_counter > negative_counter\n", "model_name": "deepseek-v3"}
{"test_name": "flip_positives", "response_0": "def flip_positives(array):\n    \"\"\"\n    Flip the positive elements in the array\n    \"\"\"\n    for i in range(len(array)):\n        # Check if the element is positive\n        is_positive = array[i] > 0\n        \n        # If positive, flip the sign\n        array[i] = array[i] * (-1) * is_positive + array[i] * (1 - is_positive)\n    \n    return array\n", "response_1": "def flip_positives(array):\n    \"\"\"\n    Flip the positive elements in the array\n    \"\"\"\n    for i in range(len(array)):\n        # Check if the element is positive\n        is_positive = array[i] > 0\n        # If positive, flip the sign\n        array[i] = array[i] * (-1) * is_positive + array[i] * (1 - is_positive)\n    return array\n", "model_name": "deepseek-v3"}
{"test_name": "divide_and_plus", "response_0": "def divide_and_plus(x):\n    \"\"\"\n    Repeat the following to the input for 4 times:\n    divide by 2, then plus 1\n    \"\"\"\n    for _ in range(4):\n        x = x / 2\n        x = x + 1\n    return x\n", "response_1": "def divide_and_plus(x):\n    \"\"\"\n    Repeat the following to the input for 4 times:\n    divide by 2, then plus 1\n    \"\"\"\n    for _ in range(4):\n        x = x / 2\n        x = x + 1\n    return x\n", "model_name": "deepseek-v3"}
{"test_name": "array_log2", "response_0": "def array_log2(arr):\n    \"\"\"\n    Take logarithm with base two to all elements in the input array using fixed-point arithmetic.\n    \"\"\"\n    # Assuming arr is a list of sfix (secure fixed-point) values\n    log2_approximation = 1.4426950408889634  # Approximation of 1 / log(2)\n\n    for i in range(len(arr)):\n        # Compute natural logarithm using the approximation ln(x) = log2(x) * ln(2)\n        # Then log2(x) = ln(x) / ln(2)\n        # Here we use the approximation log2(x) = ln(x) * log2_approximation\n        arr[i] = sfix.log(arr[i]) * sfix(log2_approximation)\n    \n    return arr\n", "response_1": "from util import if_else\nfrom Compiler import types\n\ndef array_log2(arr):\n    \"\"\"\n    Take logarithm with base two to all elements in the input array.\n    \"\"\"\n    log2 = lambda x: if_else(x > 0, x.log2(), 0)\n    result = types.Array(len(arr), types.sfix)\n    for i in range(len(arr)):\n        result[i] = log2(arr[i])\n    return result\n", "model_name": "deepseek-v3"}
{"test_name": "sum_to_ten", "response_0": "def sum_to_ten(array):\n    \"\"\"\n    Compute partial sum of the array until the sum becomes no smaller than 10.\n    \"\"\"\n    sum = 0\n    for i in range(len(array)):\n        sum += array[i]\n        if sum >= 10:\n            break\n    return sum\n", "response_1": "def sum_to_ten(array):\n    \"\"\"\n    Compute partial sum of the array until the sum becomes no smaller than 10.\n    \"\"\"\n    sum = sfix(0)\n    for i in range(len(array)):\n        sum += array[i]\n        if sum >= 10:\n            break\n    return sum\n", "model_name": "deepseek-v3"}
{"test_name": "choppy_plus_minus", "response_0": "def choppy_plus_minus(arr):\n    \"\"\"\n    Return the array with the following modification of the input array:\n    For the element with odd index, increment the element by 1, \n    for the element with even index, decrement the element by 1.\n    \"\"\"\n    for i in range(len(arr)):\n        if i % 2 == 1:\n            arr[i] = arr[i] + 1\n        else:\n            arr[i] = arr[i] - 1\n    return arr\n", "response_1": "from util import if_else\nfrom Compiler.types import Array, sint\n\ndef choppy_plus_minus(arr):\n    \"\"\"\n    Return the array with the following modification of the input array:\n    For the element with odd index, increment the element by 1, \n    for the element with even index, decrement the element by 1. \n    \"\"\"\n    for i in range(len(arr)):\n        is_odd = i % 2\n        arr[i] = if_else(is_odd, arr[i] + 1, arr[i] - 1)\n    return arr\n", "model_name": "deepseek-v3"}
{"test_name": "min_element", "response_0": "def min_element(a):\n    \"\"\"\n    Return the minimum value of an array.\n    \"\"\"\n    current = a[0]\n    for item in a:\n        current = if_else(current <= item, current, item)\n    \n    return current\n", "response_1": "def min_element(a):\n    \"\"\"\n    Return the minimum value of an array.\n    \"\"\"\n    current = a[0]\n    for i in range(len(a)):\n        current = if_else(current <= a[i], current, a[i])\n    \n    return current\n", "model_name": "deepseek-v3"}
{"test_name": "soft_max", "response_0": "def soft_max(arr):\n    \"\"\"\n    Return the array of soft-max of the input array.\n    \"\"\"\n    denominator = sfix(0)\n    for item in arr:\n        denominator = denominator + sfix(math.e) ** item\n    \n    brr = Array(len(arr), sfix)\n    for i in range(len(arr)):\n        brr[i] = (sfix(math.e) ** arr[i]) / denominator\n    \n    return brr\n", "response_1": "def soft_max(arr):\n    \"\"\"\n    Return the array of soft-max of the input array.\n    \"\"\"\n    denominator = sfix(0)\n    for item in arr:\n        denominator = denominator + exp(item)\n    \n    brr = Array(len(arr), sfix)\n    for i in range(len(arr)):\n        brr[i] = exp(arr[i]) / denominator\n    \n    return brr\n", "model_name": "deepseek-v3"}
{"test_name": "count_reverse_pair_with_break", "response_0": "program count_reverse_pair_with_break\n\ndef count_reverse_pair_with_break(arr):\n    \"\"\"\n    Count the number of reverse pairs before we find an element bigger than 10\n    \"\"\"\n    count = 0\n    flag = 0\n    for i in range(1, len(arr)):\n        if flag == 0:\n            if arr[i] > 10:\n                flag = 1\n            else:\n                for j in range(i):\n                    if arr[j] > arr[i]:\n                        count += 1\n    return count\n", "response_1": "program count_reverse_pair_with_break_secret:\n    # Define the function for a secret array\n    def count_reverse_pair_with_break_secret(arr: sint):\n        # Initialize the count to 0\n        count = sint(0)\n        # Loop through the array starting from the second element\n        for i in range(1, len(arr)):\n            # Check if the current element is greater than 10\n            if arr[i] > 10:\n                # Break the loop if the condition is met\n                break\n            # Loop through the elements before the current element\n            for j in range(i):\n                # Check if the previous element is greater than the current element\n                if arr[j] > arr[i]:\n                    # Increment the count if the condition is met\n                    count += 1\n        # Return the count\n        return count\n", "model_name": "deepseek-v3"}
{"test_name": "sum_unique", "response_0": "from Compiler.library import *\nfrom Compiler.types import *\n\ndef sum_unique(arr):\n    \"\"\"\n    Return the sum of unique elements in the array.\n    \"\"\"\n    sum = sfix(0)\n    n = len(arr)\n    \n    for i in range(n):\n        unique = sbit(True)\n        for j in range(n):\n            if j != i:\n                unique = unique * (arr[j] != arr[i])\n        sum = sum + arr[i] * unique\n    \n    return sum\n", "response_1": "def sum_unique(arr):\n    \"\"\"\n    Return the sum of unique elements in the array.\n    \"\"\"\n    sum = sfix(0)\n    n = len(arr)\n    for i in range(n):\n        unique = sbit(True)\n        for j in range(n):\n            if j != i:\n                unique = unique * (arr[j] != arr[i])\n        sum = sum + arr[i] * unique\n    return sum\n", "model_name": "deepseek-v3"}
{"test_name": "check_sum", "response_0": "def check_sum(array, target):\n    \"\"\"\n    Check whether the sum of the array equals the target value.\n    \"\"\"\n    sum = sfix(0)\n    for num in array:\n        sum = sum + num\n    return sum == target\n", "response_1": "def check_sum(array, target):\n    \"\"\"\n    Check whether the sum of the array equals the target value.\n    \"\"\"\n    sum = sfix(0)\n    for num in array:\n        sum = sum + num\n    return sum == target\n", "model_name": "deepseek-v3"}
{"test_name": "prod", "response_0": "def prod(array):\n    \"\"\"\n    Multiply together all elements in the array.\n    \"\"\"\n    prod = sfix(1)  # Initialize the product as a secure fixed-point number with value 1\n    for num in array:\n        prod = prod * num  # Multiply each element in the array with the current product\n    return prod\n", "response_1": "def prod(array):\n    \"\"\"\n    Multiply together all elements in the array.\n    \"\"\"\n    prod = 1\n    for num in array:\n        prod = prod * num\n    return prod\n", "model_name": "deepseek-v3"}
{"test_name": "sum_till_negative", "response_0": "def sum_till_negative(array):\n    \"\"\"\n    Sum from the first element in the array until a negative one occurs\n    \"\"\"\n    sum = 0\n    for i in range(len(array)):\n        if array[i] < 0:\n            break\n        sum += array[i]\n    return sum\n", "response_1": "def sum_till_negative(array):\n    \"\"\"\n    Sum from the first element in the array until a negative one occurs\n    \"\"\"\n    sum = sfix(0)\n    for i in range(len(array)):\n        if array[i] < sfix(0):\n            break\n        sum += array[i]\n    return sum\n", "model_name": "deepseek-v3"}
{"test_name": "count_satisfied", "response_0": "def count_satisfied(arr, predicator):\n    \"\"\"\n    Count the number of elements in the array that satisfy the predicator.\n    \"\"\"\n    sum = 0\n    for i in range(len(arr)):\n        sum += predicator(arr[i])\n    return sum\n", "response_1": "def count_satisfied(arr, predicator):\n    \"\"\"\n    Count the number of elements in the array satisfies the predicator.\n    \"\"\"\n    sum = 0\n    for i in range(len(arr)):\n        sum += predicator(arr[i]).if_else(1, 0)\n    return sum\n", "model_name": "deepseek-v3"}
{"test_name": "standard_deviation", "response_0": "from util import if_else\nfrom Compiler.types import sfix, sint, Array\nfrom Compiler.library import print_ln, for_range\n\ndef standard_deviation(arr):\n    \"\"\"\n    Return the standard deviation of the array.\n    \"\"\"\n    n = len(arr)\n    average = sfix(0)\n    variance = sfix(0)\n\n    # Calculate the average\n    for i in range(n):\n        average += arr[i] / n\n\n    # Calculate the variance\n    for i in range(n):\n        variance += (arr[i] - average) ** 2 / n\n\n    # Return the standard deviation\n    return variance.sqrt()\n", "response_1": "from util import if_else\nfrom Compiler import types\nfrom Compiler.library import print_ln, for_range\n\ndef standard_deviation(arr):\n    \"\"\"\n    Return the standard deviation of the array.\n    \"\"\"\n    n = len(arr)\n    average = types.sfix(0)\n    variance = types.sfix(0)\n    \n    # Calculate the average\n    for i in range(n):\n        average = average + arr[i] / n\n    \n    # Calculate the variance\n    for i in range(n):\n        variance = variance + (arr[i] - average) ** 2 / n\n    \n    # Return the standard deviation\n    return variance.sqrt()\n", "model_name": "deepseek-v3"}
{"test_name": "dominate", "response_0": "def dominate(a, b):\n    \"\"\"\n    Return whether array a \"dominates\" array b, \n    which means, every element in a is no smaller than the corresponding element in b. \n    \"\"\"\n    ret = True\n    for i in range(len(a)):\n        ret = ret & (a[i] >= b[i])\n    return ret\n", "response_1": "def dominate(a, b):\n    \"\"\"\n    Return whether array a \"dominates\" array b, \n    which means, every element in a is no smaller than the corresponding element in b.\n    \"\"\"\n    ret = True\n    for i in range(len(a)):\n        ret = ret and (a[i] >= b[i])\n    return ret\n", "model_name": "deepseek-v3"}
{"test_name": "rescale", "response_0": "def rescale(brr):\n    \"\"\"\n    To rescale the array such that the array can be fitted into [-1,1]\n    The input is guaranteed to be nonempty with nonzero element.\n    \"\"\"\n    max_abs = sfix(0)\n    for item in brr:\n        abs_item = abs(item)\n        max_abs = if_else(abs_item > max_abs, abs_item, max_abs)\n    for i in range(len(brr)):\n        brr[i] = brr[i] / max_abs\n    return brr\n", "response_1": "def rescale(brr):\n    \"\"\"\n    To rescale the array such that the array can be fitted into [-1,1]\n    The input is guaranteed to be nonempty with nonzero element.\n    \"\"\"\n    max_abs = sfix(0)\n    for item in brr:\n        abs_item = abs(item)\n        if abs_item > max_abs:\n            max_abs = abs_item\n    for i in range(len(brr)):\n        brr[i] = brr[i] / max_abs\n    return brr\n", "model_name": "deepseek-v3"}
{"test_name": "array_minus7", "response_0": "def array_minus7(arr):\n    \"\"\"\n    Subtract all elements in the input array by 7.\n    \"\"\"\n    for i in range(len(arr)):\n        arr[i] = arr[i] - 7\n    return arr\n", "response_1": "def array_minus7(arr):\n    \"\"\"\n    Subtract all elements in the input array by 7.\n    \"\"\"\n    result = Array(len(arr), sint)\n    for i in range(len(arr)):\n        result[i] = arr[i] - 7\n    return result\n", "model_name": "deepseek-v3"}
{"test_name": "traverse_and_sum", "response_0": "from Compiler.types import sint, cint\nfrom Compiler.library import for_range\n\ndef traverse_and_sum(arr1, arr2):\n    \"\"\"\n    Traverse all pairs of elements from the two inputs, \n    compute the product of the two elements and sum all of them up.\n    \"\"\"\n    sum = sint(0)\n    n = len(arr1)\n    m = len(arr2)\n    \n    @for_range(n)\n    def _(i):\n        @for_range(m)\n        def _(j):\n            sum.iadd(arr1[i] * arr2[j])\n    \n    return sum\n", "response_1": "def traverse_and_sum(arr1, arr2):\n    \"\"\"\n    Traverse all pairs of elements from the two inputs, \n    compute the product of the two elements and sum all of them up. \n    \"\"\"\n    sum = sfix(0)\n    for i in range(len(arr1)):\n        for j in range(len(arr2)):\n            sum = sum + arr1[i] * arr2[j]\n    return sum\n", "model_name": "deepseek-v3"}
{"test_name": "longest_nondec_subseq", "response_0": "def longest_nondec_subseq(a):\n    \"\"\"\n    Return the length of the longest non-decreasing subsequence in the input array.\n    \"\"\"\n    max_length = sint(0)\n    cur_length = sint(0)\n    n = len(a)\n    \n    for i in range(n):\n        if i == 0:\n            cur_length = sint(1)\n        else:\n            if a[i] >= a[i-1]:\n                cur_length = cur_length + sint(1)\n            else:\n                max_length = max(max_length, cur_length)\n                cur_length = sint(1)\n    \n    max_length = max(max_length, cur_length)\n    return max_length\n", "response_1": "def longest_nondec_subseq(a):\n    \"\"\"\n    Return the length of the longest non-decreasing subsequence in the input array.\n    \"\"\"\n    max_length = sint(0)\n    cur_length = sint(0)\n    n = len(a)\n    \n    for i in range(n):\n        if i == 0:\n            cur_length = sint(1)\n        else:\n            if a[i] >= a[i-1]:\n                cur_length = cur_length + sint(1)\n            else:\n                max_length = if_else(max_length >= cur_length, max_length, cur_length)\n                cur_length = sint(1)\n    \n    max_length = if_else(max_length >= cur_length, max_length, cur_length)\n    return max_length\n", "model_name": "deepseek-v3"}
{"test_name": "sum_but_skip_biggest", "response_0": "from util import if_else\n\ndef sum_but_skip_biggest(array):\n    \"\"\"\n    Compute partial sum of the array but skip the biggest element in until now every time.\n    \"\"\"\n    sum = 0\n    biggest = array[0]\n    \n    @for_range(len(array))\n    def _(i):\n        nonlocal sum, biggest\n        current = array[i]\n        is_bigger = current >= biggest\n        biggest = if_else(is_bigger, current, biggest)\n        sum = if_else(is_bigger, sum, sum + current)\n    \n    return sum\n", "response_1": "def sum_but_skip_biggest(array):\n    \"\"\"\n    Compute partial sum of the array but skip the biggest element in until now every time.\n    \"\"\"\n    sum = 0\n    biggest = array[0]\n    for i in range(len(array)):\n        if array[i] >= biggest:\n            biggest = array[i]\n        else:\n            sum += array[i]\n    return sum\n", "model_name": "deepseek-v3"}
{"test_name": "second_test", "response_0": "def second_test(arr):\n    \"\"\"\n    Return whether or not the first element in the array is smaller than exactly one element.\n    \"\"\"\n    count = 0\n    for i in range(1, len(arr)):\n        comparison = arr[0] < arr[i]\n        count = count + comparison\n    result = (count == 1)\n    return result\n", "response_1": "def second_test(arr):\n    \"\"\"\n    Return whether or not the first element in the array is smaller than exactly one element.\n    \"\"\"\n    count = 0\n    for i in range(1, len(arr)):\n        if arr[0] < arr[i]:\n            count = count + 1\n    return count == 1\n", "model_name": "deepseek-v3"}
{"test_name": "Manhattan_distance", "response_0": "def Manhattan_distance(a, b):\n    \"\"\"\n    Compute the Manhattan distance of the two vectors.\n    \"\"\"\n    ret = sfix(0)\n    for i in range(len(a)):\n        diff = a[i] - b[i]\n        ret = ret + sfix.abs(diff)\n    return ret\n", "response_1": "from Compiler.library import *\nfrom Compiler.types import *\n\ndef Manhattan_distance(a, b):\n    \"\"\"\n    Compute the Manhattan distance of the two vectors.\n    \"\"\"\n    ret = sfix(0)\n    for i in range(len(a)):\n        ret = ret + abs(a[i] - b[i])\n    return ret\n", "model_name": "deepseek-v3"}
{"test_name": "deal_with_only_positive", "response_0": "from util import if_else\nfrom Compiler.library import print_ln\n\ndef deal_with_only_positive(array):\n    \"\"\"\n    Add and subtract the positive elements in the array to the partial sum\n    Non-positive elements are skipped\n    \"\"\"\n    sign = sint(1)\n    sum = sint(0)\n    n = len(array)\n    \n    for i in range(n):\n        is_positive = array[i] > 0\n        sum = if_else(is_positive, sum + sign * array[i], sum)\n        sign = if_else(is_positive, -sign, sign)\n    \n    return sum\n", "response_1": "def deal_with_only_positive(array):\n    \"\"\"\n    Add and subtract the positive elements in the array to the partial sum\n    Non-positive elements are skipped\n    \"\"\"\n    sign = sint(1)\n    sum = sint(0)\n    for i in range(len(array)):\n        if array[i] <= 0:\n            continue\n        sum = sum + sign * array[i]\n        sign = -sign\n    return sum\n", "model_name": "deepseek-v3"}
{"test_name": "compare_and_return", "response_0": "from Compiler.library import *\n\ndef compare_and_return(arr, brr):\n    \"\"\"\n    Compare the elements in arrays `arr` and `brr`, and return the first index `i` with arr[i]==brr[i].\n    If no such index exists, return -1.\n    \"\"\"\n    ret = -1\n    n = len(arr)\n    for i in range(n):\n        # Compare the elements at index i\n        match = arr[i] == brr[i]\n        # If a match is found and `ret` is still -1, update `ret`\n        ret = match.if_else(i, ret)\n        # Break the loop if a match is found\n        break_loop = match.if_else(1, 0)\n        if break_loop:\n            break\n    return ret\n", "response_1": "from Compiler.library import *\n\ndef compare_and_return(arr, brr):\n    \"\"\"\n    Compare the elements in arrays `arr` and `brr`, and return the first index `i` with arr[i]==brr[i]\n    \"\"\"\n    ret = -1\n    for i in range(len(arr)):\n        eq = arr[i] == brr[i]\n        @if_(eq)\n        def _():\n            ret.update(i)\n            break_point()\n    return ret\n", "model_name": "deepseek-v3"}
{"test_name": "sum_odd_positive", "response_0": "def sum_odd_positive(arr):\n    \"\"\"\n    Return the sum of all the odd positive numbers in the array.\n    \"\"\"\n    sum = sfix(0)\n    for item in arr:\n        if (item % 2 == 1) and (item > 0):\n            sum = sum + item\n    return sum\n", "response_1": "def sum_odd_positive(arr):\n    \"\"\"\n    Return the sum of all the odd positive numbers in the array.\n    \"\"\"\n    sum = 0\n    for item in arr:\n        if (item % 2 == 1) and (item > 0):\n            sum = sum + item\n    return sum\n", "model_name": "deepseek-v3"}
{"test_name": "two_sum", "response_0": "# Define the function to check if two elements in the array sum to the target value\ndef two_sum(arr, target):\n    \"\"\"\n    Return whether the input array contains two elements (can be the same) whose sum equals to the target value.\n    \"\"\"\n    n = len(arr)\n    result = False\n    for i in range(n):\n        for j in range(n):\n            # Check if the sum of arr[i] and arr[j] equals the target\n            sum_ij = arr[i] + arr[j]\n            # Use comparison to check if sum_ij equals target\n            condition = sum_ij == target\n            # Update the result using logical OR\n            result = result or condition\n    return result\n", "response_1": "def two_sum(arr, target):\n    \"\"\"\n    Return whether the input array contains two elements (can be the same) whose sum equals to the target value.\n    \"\"\"\n    n = len(arr)\n    for i in range(n):\n        for j in range(n):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\n", "model_name": "deepseek-v3"}
{"test_name": "seq_search", "response_0": "def seq_search(arr, target):\n    \"\"\"\n    Do sequential search in the array for the target.\n    Return the index of the target, return -1 if target not found.\n    The array is guaranteed to have all different elements.\n    \"\"\"\n    index = -1\n    for i in range(len(arr)):\n        match = arr[i] == target\n        index = match.if_else(i, index)\n    return index\n", "response_1": "def seq_search(arr, target):\n    \"\"\"\n    Do sequential search in the array for the target. \n    Return the index of the target, return -1 if target not found.\n    The array is guaranteed to have all different elements. \n    \"\"\"\n    result = -1\n    for i in range(len(arr)):\n        # Compare the current element with the target\n        match = arr[i] == target\n        # Update the result if the current element matches the target\n        result = match.if_else(i, result)\n    return result\n", "model_name": "deepseek-v3"}
{"test_name": "choppy_array", "response_0": "def choppy_array(arr):\n    \"\"\"\n    Return whether or not the input array is a \"choppy array\".\n    A \"choppy array\" is the following array: \n    The first element is the smallest, \n    the second is the largest of the remaining, \n    the third is the smallest of the remaining, \n    the fourth is the largest of the remaining, etc.\n    \"\"\"\n    n = len(arr)\n    for i in range(n):\n        for j in range(n - i):\n            if i % 2 == 1:\n                if arr[i + j] > arr[i]:\n                    return False\n            else:\n                if arr[i + j] < arr[i]:\n                    return False\n    return True\n", "response_1": "def choppy_array(arr):\n    \"\"\"\n    Return whether or not the input array is a \"choppy array\".\n    A \"choppy array\" is the following array: \n    The first element is the smallest, \n    the second is the largest of the remaining, \n    the third is the smallest of the remaining, \n    the fourth is the largest of the remaining, etc.\n    \"\"\"\n    n = len(arr)\n    result = True\n    for i in range(n):\n        for j in range(n - i):\n            if i % 2 == 1:\n                if arr[i + j] > arr[i]:\n                    result = False\n                    break\n            else:\n                if arr[i + j] < arr[i]:\n                    result = False\n                    break\n        if not result:\n            break\n    return result\n", "model_name": "deepseek-v3"}
{"test_name": "array_process", "response_0": "def array_process(arr, func):\n    \"\"\"\n    Process all elements in the input array with the given function.\n    \"\"\"\n    for i in range_(len(arr)):\n        arr[i] = func(arr[i])\n    return arr\n", "response_1": "def array_process(arr, func):\n    \"\"\"\n    Process all elements in the input array with given function.\n    \"\"\"\n    for i in range(len(arr)):\n        arr[i] = func(arr[i])\n    return arr\n", "model_name": "deepseek-v3"}
{"test_name": "normalize", "response_0": "def normalize(vec):\n    \"\"\"\n    Normalize the vector.\n    \"\"\"\n    # Calculate the sum of squares\n    sum_squares = sfix(0)\n    for item in vec:\n        sum_squares = sum_squares + item * item\n\n    # Calculate the square root of the sum of squares\n    base = sfix.sqrt(sum_squares)\n\n    # Normalize the vector\n    for i in range(len(vec)):\n        vec[i] = vec[i] / base\n\n    return vec\n", "response_1": "def normalize(vec):\n    \"\"\"\n    Normalize the vector.\n    \"\"\"\n    sum = sfix(0)\n    for item in vec:\n        sum = sum + item * item\n    base = sfix.sqrt(sum)\n    for i in range(len(vec)):\n        vec[i] = vec[i] / base\n    return vec\n", "model_name": "deepseek-v3"}
{"test_name": "impatient_merchant", "response_0": "program impatient_merchant(days):\n    # Initialize variables\n    can_buy = sbit(True)\n    net = sint(0)\n    orig_price = sint(0)\n    \n    # Loop through the days\n    for i in range(len(days)):\n        # Check if the merchant can buy\n        if can_buy:\n            net = net - days[i]\n            orig_price = days[i]\n            can_buy = sbit(False)\n        else:\n            # Check if the current day's price is higher than the original price\n            if days[i] > orig_price:\n                net = net + days[i]\n                can_buy = sbit(True)\n    \n    # Return the net value\n    return net\n", "response_1": "from Compiler import types\n\ndef impatient_merchant(days):\n    \"\"\"\n    You are given the prices of some goods in consecutive days. \n    Here's an impatient merchant who will buy the good at the first days, \n    and sell it until its price becomes higher than its original cost. \n    Then he will buy the good in the next day and repeat the above process. \n    The good left in the hand of the merchant in the last day will worth nothing.\n    You should calculate the net value the impatient merchant can earn.\n    \"\"\"\n    can_buy = types.sint(1)  # 1 represents True, 0 represents False\n    net = types.sint(0)\n    orig_price = types.sint(0)\n    \n    for i in range(len(days)):\n        if can_buy == 1:\n            net = net - days[i]\n            orig_price = days[i]\n            can_buy = types.sint(0)\n        else:\n            if days[i] > orig_price:\n                net = net + days[i]\n                can_buy = types.sint(1)\n    \n    return net\n", "model_name": "deepseek-v3"}
{"test_name": "array_shift", "response_0": "def array_shift(a):\n    \"\"\"\n    Shift the array on index by 1. \n    For example, [0,1,2] will be shifted to [1,2,0]\n    \"\"\"\n    n = len(a)\n    temp = a[n-1]\n    for i in range(n-1):\n        a[n-i-1] = a[n-i-2]\n    a[0] = temp\n    return a\n", "response_1": "def array_shift(a):\n    \"\"\"\n    Shift the array on index by 1.\n    For example, [0,1,2] will be shifted to [1,2,0]\n    \"\"\"\n    n = len(a)\n    temp = a[n-1]\n    for i in range(n-1):\n        a[n-i-1] = a[n-i-2]\n    a[0] = temp\n    return a\n", "model_name": "deepseek-v3"}
{"test_name": "array_double", "response_0": "def array_double(arr):\n    \"\"\"\n    Double all elements in the input array.\n    \"\"\"\n    n = len(arr)\n    for i in range(n):\n        arr[i] = arr[i] * 2\n    return arr\n", "response_1": "def array_double(arr):\n    \"\"\"\n    Double all elements in the input array.\n    \"\"\"\n    for i in range(len(arr)):\n        arr[i] = arr[i] * 2\n    return arr\n", "model_name": "deepseek-v3"}
{"test_name": "stop_at_zero", "response_0": "def stop_at_zero(array):\n    \"\"\"\n    Add 1 to all elements in the array, but stop if found an element equal to 0\n    \"\"\"\n    for i in range(len(array)):\n        if array[i] == 0:\n            break\n        array[i] = array[i] + 1\n    return array\n", "response_1": "def stop_at_zero(array):\n    \"\"\"\n    Add 1 to all elements in the array, but stop if found an element equal to 0\n    \"\"\"\n    n = len(array)\n    stop = 0  # Flag to indicate if we should stop\n    for i in range(n):\n        # Check if we should continue\n        continue_loop = (1 - stop)\n        # Check if the current element is 0\n        is_zero = (array[i] == 0)\n        # Update the stop flag\n        stop = stop + (is_zero * continue_loop)\n        # Add 1 to the element if we haven't stopped\n        array[i] = array[i] + (1 * continue_loop)\n    return array\n", "model_name": "deepseek-v3"}
{"test_name": "array_not", "response_0": "from Compiler import types\n\ndef array_not(arr):\n    \"\"\"\n    Take opposite to all elements in the input array.\n    \"\"\"\n    for i in range(len(arr)):\n        arr[i] = 1 - arr[i]  # In MP-SPDZ, logical NOT can be represented as 1 - value\n    return arr\n", "response_1": "def array_not(arr):\n    \"\"\"\n    Take opposite to all elements in the input array.\n    :param arr: Array of secret-shared bits.\n    :return: Array of secret-shared bits with each element negated.\n    \"\"\"\n    result = Array(len(arr), sbit)\n    for i in range(len(arr)):\n        result[i] = arr[i] ^ 1  # XOR with 1 to negate the bit\n    return result\n", "model_name": "deepseek-v3"}
{"test_name": "array_process_then_clip", "response_0": "def array_process_then_clip(arr, func):\n    \"\"\"\n    Process all elements in the input array with given function, \n    then clip the outcome into range [-10,10]\n    \"\"\"\n    for i in range(len(arr)):\n        arr[i] = func(arr[i])\n        arr[i] = if_else(arr[i] > 10, 10, arr[i])\n        arr[i] = if_else(arr[i] < -10, -10, arr[i])\n    return arr\n", "response_1": "def array_process_then_clip(arr, func):\n    \"\"\"\n    Process all elements in the input array with given function, \n    then clip the outcome into range [-10,10]\n    \"\"\"\n    for i in range(len(arr)):\n        arr[i] = func(arr[i])\n        arr[i] = if_else(arr[i] > 10, 10, arr[i])\n        arr[i] = if_else(arr[i] < -10, -10, arr[i])\n    return arr\n", "model_name": "deepseek-v3"}
{"test_name": "add_and_count_positive", "response_0": "from Compiler import types\n\ndef add_and_count_positive(array, k):\n    \"\"\"\n    Add k to all elements in the given array, and count the number of positive numbers in the output array.\n    Return both the output array and the count.\n    \"\"\"\n    # Initialize the count to 0\n    count = types.sint(0)\n    \n    # Iterate over the array\n    for i in range(len(array)):\n        # Add k to each element\n        array[i] = array[i] + k\n        \n        # Check if the element is positive\n        is_positive = array[i] > 0\n        \n        # Increment the count if the element is positive\n        count = count + is_positive\n    \n    # Return the modified array and the count\n    return array, count\n", "response_1": "def add_and_count_positive(array, k):\n    \"\"\"\n    Add k to all elements in the given array, and count the number of positive numbers in the output array. \n    Return both the output array and the count. \n    \"\"\"\n    count = sint(0)\n    output_array = Array(len(array), sint)\n    \n    for i in range(len(array)):\n        output_array[i] = array[i] + k\n        if output_array[i] > 0:\n            count = count + 1\n    \n    return output_array, count\n", "model_name": "deepseek-v3"}
{"test_name": "array_subtract", "response_0": "def array_subtract(a, b):\n    \"\"\"\n    Subtract the first array by the second one elementwise. \n    If one of the arrays is shorter than the other, it will be padded with 0.\n    \"\"\"\n    len_a = len(a)\n    len_b = len(b)\n    \n    if len_a > len_b:\n        ret = Array(len_a, sint(0))\n        for i in range(len_b):\n            ret[i] = a[i] - b[i]\n        for i in range(len_a - len_b):\n            ret[len_b + i] = a[len_b + i]\n    else:\n        ret = Array(len_b, sint(0))\n        for i in range(len_a):\n            ret[i] = a[i] - b[i]\n        for i in range(len_b - len_a):\n            ret[len_a + i] = -b[len_a + i]\n    \n    return ret\n", "response_1": "def array_subtract(a, b):\n    \"\"\"\n    Subtract the first array by the second one elementwise.\n    If one of the arrays is shorter than the other, it will be padded with 0.\n    \"\"\"\n    len_a = len(a)\n    len_b = len(b)\n    max_len = max(len_a, len_b)\n    \n    # Pad the shorter array with 0s\n    padded_a = a + [0] * (max_len - len_a)\n    padded_b = b + [0] * (max_len - len_b)\n    \n    # Perform elementwise subtraction\n    result = [padded_a[i] - padded_b[i] for i in range(max_len)]\n    \n    return result\n", "model_name": "deepseek-v3"}
{"test_name": "lower_bound", "response_0": "def lower_bound(arr, x):\n    \"\"\"\n    Return the index of the largest element not bigger than x in arr.\n    If such element does not exist, return -1.\n    \"\"\"\n    ret = -1\n    distance = 0\n    found = False\n    for i in range(len(arr)):\n        cond = arr[i] <= x\n        cond_found = cond * (not found)\n        cond_distance = cond * (x - arr[i] < distance)\n        update = cond_found + cond_distance\n        ret = update * i + (1 - update) * ret\n        distance = update * (x - arr[i]) + (1 - update) * distance\n        found = update * True + (1 - update) * found\n    return ret\n", "response_1": "def lower_bound(arr, x):\n    \"\"\"\n    Return the index of the largest element not bigger than x in arr.\n    If such element does not exist, return -1.\n    \"\"\"\n    ret = sint(-1)\n    distance = sint(0)\n    found = sint(0)\n    \n    for i in range(len(arr)):\n        cond = arr[i] <= x\n        new_distance = x - arr[i]\n        update = cond * ((~found) | (new_distance < distance))\n        ret = ret * (~update) + i * update\n        distance = distance * (~update) + new_distance * update\n        found = found | cond\n    \n    return ret\n", "model_name": "deepseek-v3"}
{"test_name": "argmin", "response_0": "def argmin(a):\n    \"\"\"\n    Return the index of the min value of an array.\n    \"\"\"\n    current = a[0]\n    index = 0\n    for i in range(len(a)):\n        cond = current <= a[i]\n        index = cond.if_else(index, i)\n        current = cond.if_else(current, a[i])\n    return index\n", "response_1": "def argmin(a):\n    \"\"\"\n    Return the index of the minimum value of an array.\n    \"\"\"\n    current = a[0]\n    index = 0\n    for i in range(len(a)):\n        condition = current <= a[i]\n        index = if_else(condition, index, i)\n        current = if_else(condition, current, a[i])\n    return index\n", "model_name": "deepseek-v3"}
{"test_name": "independent_robbery", "response_0": "from Compiler.library import *\nfrom Compiler.types import *\n\ndef independent_robbery(houses):\n    \"\"\"\n    Use dynamic programming to solve the \"independent robbery\" problem in MP-SPDZ.\n    The robber wants to rob some houses along a street, each of which has some amount of money in it (guaranteed to be nonnegative). \n    The robber cannot rob two consecutive houses, we want to know the max amount of money he can get. \n    The number of houses is guaranteed to be no smaller than 3.\n    \"\"\"\n    n = len(houses)\n    dp = Array(n, sint)\n    \n    dp[0] = houses[0]\n    dp[1] = dp[1].if_else(dp[1] >= dp[0], dp[0])\n    \n    @for_range(2, n)\n    def _(i):\n        dp[i] = (dp[i-2] + houses[i]).if_else(dp[i-2] + houses[i] >= dp[i-1], dp[i-1])\n    \n    return dp[n-1]\n", "response_1": "def independent_robbery(houses):\n    \"\"\"\n    Use dynamic programming to solve the \"independent robbery\" problem:\n    The robber wants to rob some houses along a street, each of which has some amount of money in it (guaranteed to be nonnegative). \n    The robber cannot rob two consecutive houses, we want to know the max amount of money he can get. \n    The number of houses is guaranteed to be no smaller than 3.\n    \"\"\"\n    n = len(houses)\n    dp = Array(n, sint)  # Initialize an array of secret integers\n    \n    dp[0] = houses[0]\n    dp[1] = if_else(dp[1] >= dp[0], dp[1], dp[0])\n    \n    for i in range(2, n):\n        dp[i] = if_else(dp[i-2] + houses[i] >= dp[i-1], dp[i-2] + houses[i], dp[i-1])\n    \n    return dp[n-1]\n", "model_name": "deepseek-v3"}
{"test_name": "sum_odd_and_odd", "response_0": "from Compiler import types\n\ndef sum_odd_and_odd(arr):\n    \"\"\"\n    A strange sum function in MP-SPDZ\n    \"\"\"\n    sum = types.sint(0)\n    n = len(arr)\n    for i in range(n):\n        if i % 2 == 0:\n            continue\n        for j in range(i):\n            if j % 2 == 0:\n                continue\n            sum += arr[j]\n    return sum\n", "response_1": "from Compiler.library import *\nfrom Compiler.types import *\n\ndef sum_odd_and_odd(arr):\n    \"\"\"\n    A strange sum function\n    \"\"\"\n    sum = sfix(0)\n    n = len(arr)\n    \n    @for_range(n)\n    def _(i):\n        if i % 2 == 0:\n            return\n        @for_range(i)\n        def _(j):\n            if j % 2 == 0:\n                return\n            sum.iadd(arr[j])\n    \n    return sum\n", "model_name": "deepseek-v3"}
{"test_name": "is_monotonous", "response_0": "def is_monotonous(arr):\n    \"\"\"\n    Return whether or not the array is strictly monotonous.\n    \"\"\"\n    n = len(arr)\n    d = sfix(0)\n    result = sbit(True)\n    \n    for i in range(n-1):\n        diff = arr[i+1] - arr[i]\n        if i > 0:\n            condition = (diff * d) <= 0\n            result = result & (condition == False)\n        d = diff\n    \n    return result\n", "response_1": "def is_monotonous(arr):\n    \"\"\"\n    Return whether or not the array is strictly monotonous.\n    \"\"\"\n    n = len(arr)\n    d = sint(0)\n    result = sint(1)  # Assume the array is monotonous initially\n\n    for i in range(n - 1):\n        diff = arr[i + 1] - arr[i]\n        if i > 0:\n            result = result * (diff * d > 0)\n        d = diff\n\n    return result\n", "model_name": "deepseek-v3"}
{"test_name": "positive_count_negative_sum", "response_0": "def positive_count_negative_sum(arr):\n    \"\"\"\n    Traverse the array, return the number of all positive elements and the sum of all negative elements.\n    \"\"\"\n    count = sint(0)\n    sum = sint(0)\n    for item in arr:\n        count = count + (item > 0).if_else(1, 0)\n        sum = sum + (item < 0).if_else(item, 0)\n    return count, sum\n", "response_1": "def positive_count_negative_sum(arr):\n    \"\"\"\n    Traverse the array, return the number of all positive elements and the sum of all negative elements.\n    \"\"\"\n    count = sint(0)\n    sum = sint(0)\n    for item in arr:\n        is_positive = item > 0\n        is_negative = item < 0\n        count = count + is_positive\n        sum = sum + item * is_negative\n    return count, sum\n", "model_name": "deepseek-v3"}
{"test_name": "sum_even", "response_0": "def sum_even(arr):\n    \"\"\"\n    Return the sum of all the even numbers in the array.\n    \"\"\"\n    sum = sfix(0)\n    for item in arr:\n        if item % 2 == 0:\n            sum = sum + item\n    return sum\n", "response_1": "def sum_even(arr):\n    \"\"\"\n    Return the sum of all the even numbers in the array.\n    \"\"\"\n    sum = 0\n    for item in arr:\n        is_even = item % 2 == 0\n        sum = sum + is_even * item\n    return sum\n", "model_name": "deepseek-v3"}
{"test_name": "one_norm", "response_0": "def one_norm(vec):\n    \"\"\"\n    Return the one-norm of the vector.\n    \"\"\"\n    sum = sfix(0)\n    for item in vec:\n        sum = sum + abs(item)\n    return sum\n", "response_1": "def one_norm(vec):\n    \"\"\"\n    Return the one-norm of the vector.\n    \"\"\"\n    sum = sfix(0)\n    for item in vec:\n        sum = sum + abs(item)\n    return sum\n", "model_name": "deepseek-v3"}
{"test_name": "array_floor", "response_0": "def array_floor(arr):\n    \"\"\"\n    Apply Gaussian floor function to all elements in the input array.\n    \"\"\"\n    ret = Array(len(arr), sfix)  # Initialize an array of the same length as arr with sfix type\n    for i in range(len(arr)):\n        ret[i] = floor(arr[i])  # Apply the floor function to each element\n    return ret\n", "response_1": "def array_floor(arr):\n    \"\"\"\n    Apply Gaussian floor function to all elements in the input array.\n    \"\"\"\n    ret = Array(len(arr), sint)\n    for i in range(len(arr)):\n        ret[i] = arr[i].floor()\n    return ret\n", "model_name": "deepseek-v3"}
{"test_name": "three_five", "response_0": "def three_five(arr):\n    \"\"\"\n    If the input array contain both/neither 3 and/or 5, return True, \n    otherwise return False. \n    \"\"\"\n    has3 = False\n    has5 = False\n    for item in arr:\n        has3 = has3 or (item == 3)\n        has5 = has5 or (item == 5)\n    return (has3 and has5) or ((not has3) and (not has5))\n", "response_1": "def three_five(arr):\n    \"\"\"\n    If the input array contain both/neither 3 and/or 5, return True, \n    otherwise return False. \n    \"\"\"\n    has3 = False\n    has5 = False\n    for item in arr:\n        has3 = has3 or (item == 3)\n        has5 = has5 or (item == 5)\n    return (has3 and has5) or ((not has3) and (not has5))\n", "model_name": "deepseek-v3"}
{"test_name": "num_above_average", "response_0": "from Compiler import types\n\ndef num_above_average(arr):\n    \"\"\"\n    Return the number of elements in the array larger than or equal to the average value.\n    \"\"\"\n    sum = types.sint(0)\n    count = types.sint(0)\n    for i in range(len(arr)):\n        sum = sum + arr[i]\n    avg = sum / len(arr)\n    for item in arr:\n        count = count + (item >= avg).if_else(1, 0)\n    return count\n", "response_1": "def num_above_average(arr):\n    \"\"\"\n    Return the number of elements in the array larger than or equal to the average value.\n    \"\"\"\n    sum = sfix(0)\n    count = sint(0)\n    n = len(arr)\n    \n    # Calculate the sum of the array elements\n    for i in range(n):\n        sum = sum + arr[i]\n    \n    # Calculate the average\n    avg = sum / n\n    \n    # Count the number of elements above or equal to the average\n    for item in arr:\n        if item >= avg:\n            count = count + 1\n    \n    return count\n", "model_name": "deepseek-v3"}
{"test_name": "clip", "response_0": "def clip(arr, upper_bound=1, lower_bound=-1):\n    \"\"\"\n    For the given array, clip the elements to the range [lower_bound, upper_bound]\n    \"\"\"\n    for i in range(len(arr)):\n        arr[i] = mux(arr[i] < lower_bound, lower_bound, arr[i])\n        arr[i] = mux(arr[i] > upper_bound, upper_bound, arr[i])\n    return arr\n", "response_1": "def clip(arr, upper_bound=1, lower_bound=-1):\n    \"\"\"\n    For the given array, clip the elements to the range [lower_bound, upper_bound]\n    \"\"\"\n    for i in range(len(arr)):\n        arr[i] = if_else(arr[i] < lower_bound, lower_bound, arr[i])\n        arr[i] = if_else(arr[i] > upper_bound, upper_bound, arr[i])\n    return arr\n", "model_name": "deepseek-v3"}
{"test_name": "sum_with_certain_element_skipped", "response_0": "def sum_with_certain_element_skipped(array):\n    \"\"\"\n    Compute partial sum of the array with all elements causing the partial sum to be in [5,10] skipped.\n    \"\"\"\n    sum = sint(0)\n    for i in range(len(array)):\n        temp_sum = sum + array[i]\n        condition = (temp_sum >= 5) * (temp_sum <= 10)\n        sum = if_else(condition, sum, temp_sum)\n    return sum\n", "response_1": "def sum_with_certain_element_skipped(array):\n    \"\"\"\n    Compute partial sum of the array with all elements causing the partial sum to be in [5,10] skipped.\n    \"\"\"\n    sum = 0\n    for i in range(len(array)):\n        potential_sum = sum + array[i]\n        skip = (potential_sum >= 5) * (potential_sum <= 10)\n        sum += array[i] * (1 - skip)\n    return sum\n", "model_name": "deepseek-v3"}
{"test_name": "sum_of_odd_and_even", "response_0": "def sum_of_odd_and_even(arr):\n    \"\"\"\n    Return the sum of odd number and even number in the array.\n    The elements in the input array are guaranteed to be integers.\n    \"\"\"\n    odd_sum = sint(0)\n    even_sum = sint(0)\n    for item in arr:\n        is_odd = item % 2\n        odd_sum += is_odd * item\n        even_sum += (1 - is_odd) * item\n    return odd_sum, even_sum\n", "response_1": "def sum_of_odd_and_even(arr):\n    \"\"\"\n    Return the sum of odd number and even number in the array.\n    The elements in the input array are guaranteed to be integers.\n    \"\"\"\n    odd_sum = sfix(0)\n    even_sum = sfix(0)\n    \n    for item in arr:\n        # Check if the item is odd\n        is_odd = item % 2\n        # Update the sums based on whether the item is odd or even\n        odd_sum = odd_sum + is_odd * item\n        even_sum = even_sum + (1 - is_odd) * item\n    \n    return odd_sum, even_sum\n", "model_name": "deepseek-v3"}
{"test_name": "distance", "response_0": "def distance(vec1, vec2):\n    \"\"\"\n    Compute the Euclidean distance between the two vectors.\n    \"\"\"\n    sum_squares = sfix(0)\n    for i in range(len(vec1)):\n        diff = vec1[i] - vec2[i]\n        sum_squares = sum_squares + diff * diff\n    return sum_squares.sqrt()\n", "response_1": "def distance(vec1, vec2):\n    \"\"\"\n    Compute the Euclidean distance between the two vectors.\n    \"\"\"\n    sum = 0\n    for i in range(len(vec1)):\n        diff = vec1[i] - vec2[i]\n        sum = sum + diff * diff\n    return sqrt(sum)\n", "model_name": "deepseek-v3"}
{"test_name": "num_occurrence", "response_0": "def num_occurrence(arr, target):\n    \"\"\"\n    Return the number of occurrence of the target in the given array.\n    \"\"\"\n    count = sfix(0)  # Initialize count as a secret-shared fixed-point number\n    for item in arr:\n        # Compare each item with the target and add to count if they are equal\n        count += (item == target).if_else(sfix(1), sfix(0))\n    return count\n", "response_1": "def num_occurrence(arr, target):\n    \"\"\"\n    Return the number of occurrence of the target in the given array.\n    \"\"\"\n    count = sint(0)  # Initialize count as a secure integer\n    for item in arr:\n        # Compare each item with the target securely\n        count = count + (item == target).if_else(sint(1), sint(0))\n    return count\n", "model_name": "deepseek-v3"}
{"test_name": "palindrome", "response_0": "def palindrome(arr):\n    \"\"\"\n    Check whether the array is a palindrome.\n    \"\"\"\n    n = len(arr)\n    flag = sbit(True)\n    for i in range(n):\n        flag = flag & (arr[i] == arr[n - 1 - i])\n    return flag\n", "response_1": "from Compiler import types\n\ndef palindrome(arr):\n    \"\"\"\n    Check whether the array is a palindrome.\n    \"\"\"\n    n = len(arr)\n    flag = types.sint(1)  # Initialize flag as a secret-shared value (1 represents True)\n    \n    for i in range(n):\n        # Compare the i-th element with the (n-1-i)-th element\n        comparison = arr[i] == arr[n - 1 - i]\n        # Update the flag by ANDing it with the comparison result\n        flag = flag * comparison\n    \n    return flag\n", "model_name": "deepseek-v3"}
{"test_name": "reverse_order_pair", "response_0": "def reverse_order_pair(arr):\n    \"\"\"\n    Count the number of reverse order pairs in the array.\n    \"\"\"\n    num = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                num = num + 1\n    return num\n", "response_1": "def reverse_order_pair(arr):\n    \"\"\"\n    Count the number of reverse order pairs in the array.\n    \"\"\"\n    num = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            comparison = arr[i] > arr[j]\n            num = num + comparison\n    return num\n", "model_name": "deepseek-v3"}
{"test_name": "sum_of_cubes", "response_0": "from Compiler.library import print_ln\nfrom Compiler.types import sint\n\ndef sum_of_cubes(arr):\n    \"\"\"\n    Return the sum of cubes of elements in the array.\n    \"\"\"\n    ret = sint(0)\n    for item in arr:\n        ret = ret + item * item * item\n    return ret\n\n# Example usage (not part of the MP-SPDZ code)\n# arr = [sint(1), sint(2), sint(3)]\n# result = sum_of_cubes(arr)\n# print_ln(\"Sum of cubes: %s\", result.reveal())\n", "response_1": "def sum_of_cubes(arr):\n    \"\"\"\n    Return the sum of cubes of elements in the array.\n    \"\"\"\n    ret = sfix(0)  # Initialize the result as a secret-shared fixed-point number\n    for item in arr:\n        ret = ret + item * item * item  # Compute the cube of the item and add to the result\n    return ret\n", "model_name": "deepseek-v3"}
{"test_name": "max_element", "response_0": "def max_element(a):\n    \"\"\"\n    Return the max value of an array.\n    \"\"\"\n    current = a[0]\n    for item in a:\n        # Use the 'if_else' function to perform the comparison\n        current = if_else(current >= item, current, item)\n    \n    return current\n", "response_1": "def max_element(a):\n    \"\"\"\n    Return the max value of an array.\n    \"\"\"\n    current = a[0]\n    for i in range(1, len(a)):\n        current = if_else(current >= a[i], current, a[i])\n    \n    return current\n", "model_name": "deepseek-v3"}
{"test_name": "array_if_else", "response_0": "def array_if_else(arr, predicator, if_func, else_func):\n    \"\"\"\n    For each element in the input array, \n    if the predicator returns True, then apply the if-function to the element, \n    otherwise apply the else-function to the element. \n    \"\"\"\n    for i in range(len(arr)):\n        # Evaluate the predicator on the current element\n        pred = predicator(arr[i])\n        \n        # Apply the if_func or else_func based on the predicator result\n        arr[i] = pred.if_else(if_func(arr[i]), else_func(arr[i]))\n    \n    return arr\n", "response_1": "def array_if_else(arr, predicator, if_func, else_func):\n    \"\"\"\n    For each element in the input array, \n    if the predicator returns True, then apply the if-function to the element, \n    otherwise apply the else-function to the element. \n    \"\"\"\n    for i in range(len(arr)):\n        arr[i] = if_func(arr[i]) if predicator(arr[i]) else else_func(arr[i])\n    return arr\n", "model_name": "deepseek-v3"}
{"test_name": "inf_norm", "response_0": "def inf_norm(vec):\n    \"\"\"\n    Return the infinite-norm of the vector.\n    \"\"\"\n    max_abs = sfix(0)\n    for item in vec:\n        abs_item = abs(item)\n        max_abs = max_abs if max_abs >= abs_item else abs_item\n    return max_abs\n", "response_1": "from Compiler.types import sint, cint\nfrom Compiler.library import for_range\n\ndef inf_norm(vec):\n    \"\"\"\n    Return the infinite-norm of the vector.\n    \"\"\"\n    max_val = sint(0)\n    @for_range(len(vec))\n    def _(i):\n        nonlocal max_val\n        abs_item = abs(vec[i])\n        max_val = max(max_val, abs_item)\n    return max_val\n", "model_name": "deepseek-v3"}
{"test_name": "array_inc", "response_0": "def array_inc(arr):\n    \"\"\"\n    Increment all elements in the input array by 1\n    \"\"\"\n    for i in range(len(arr)):\n        arr[i] = arr[i] + sfix(1)\n    return arr\n", "response_1": "from Compiler import types\n\ndef array_inc(arr):\n    \"\"\"\n    Increment all elements in the input array by 1\n    \"\"\"\n    n = arr.length\n    for i in range(n):\n        arr[i] = arr[i] + types.sint(1)\n    return arr\n", "model_name": "deepseek-v3"}
{"test_name": "count_rises", "response_0": "def count_rises(arr):\n    \"\"\"\n    Count the number of rises in the array.\n    \"\"\"\n    count = sint(0)\n    n = len(arr)\n    for i in range(n - 1):\n        count = count + (arr[i] < arr[i + 1])\n    return count\n", "response_1": "def count_rises(arr):\n    \"\"\"\n    Count the number of rises in the array.\n    \"\"\"\n    count = sint(0)\n    n = len(arr)\n    for i in range(n - 1):\n        if arr[i] < arr[i + 1]:\n            count = count + 1\n    return count\n", "model_name": "deepseek-v3"}
{"test_name": "skip_at_zero", "response_0": "def skip_at_zero(array):\n    \"\"\"\n    Add 1 to all elements in the array, but skip if found an element equal to 0\n    \"\"\"\n    for i in range(len(array)):\n        # Check if the element is not zero\n        is_not_zero = array[i] != 0\n        # Add 1 to the element if it is not zero\n        array[i] = array[i] + is_not_zero * 1\n    return array\n", "response_1": "def skip_at_zero(array):\n    \"\"\"\n    Add 1 to all elements in the array, but skip if found an element equal to 0\n    \"\"\"\n    for i in range(len(array)):\n        # Check if the element is not zero\n        if array[i] != 0:\n            array[i] = array[i] + 1\n    return array\n", "model_name": "deepseek-v3"}
{"test_name": "array_intersect", "response_0": "def array_intersect(p, q):\n    \"\"\"\n    Return whether the two arrays share any common element.\n    \"\"\"\n    n = len(p)\n    m = len(q)\n    for i in range(n):\n        for j in range(m):\n            if p[i] == q[j]:\n                return True\n    return False\n", "response_1": "def array_intersect(p, q):\n    \"\"\"\n    Return whether the two arrays share any common element.\n    \"\"\"\n    result = False\n    for i in range(len(p)):\n        for j in range(len(q)):\n            result = result or (p[i] == q[j])\n    return result\n", "model_name": "deepseek-v3"}
{"test_name": "two_norm", "response_0": "def two_norm(vec):\n    \"\"\"\n    Return the two-norm of the vector.\n    \"\"\"\n    sum = sfix(0)\n    for item in vec:\n        sum = sum + item * item\n    return sum.sqrt()\n", "response_1": "from Compiler.library import *\nfrom Compiler.types import *\n\ndef two_norm(vec):\n    \"\"\"\n    Return the two-norm of the vector.\n    \"\"\"\n    sum = sfix(0)\n    for item in vec:\n        sum = sum + item * item\n    return sum.sqrt()\n", "model_name": "deepseek-v3"}
{"test_name": "sum_between", "response_0": "def sum_between(arr, l, u):\n    \"\"\"\n    Return the sum of elements in arr within range [l,u].\n    \"\"\"\n    sum = sfix(0)\n    for item in arr:\n        condition = (l <= item) * (item <= u)\n        sum = sum + condition * item\n    return sum\n", "response_1": "def sum_between(arr, l, u):\n    \"\"\"\n    Return the sum of elements in arr within range [l,u].\n    \"\"\"\n    sum = sfix(0)\n    for item in arr:\n        cond = (item >= l) * (item <= u)\n        sum += item * cond\n    return sum\n", "model_name": "deepseek-v3"}
{"test_name": "largest_gap", "response_0": "def largest_gap(arr):\n    \"\"\"\n    Return the largest gap in the array.\n    The length of the input array is guaranteed to be at least 2.\n    \"\"\"\n    cur = sfix(0)\n    for i in range(len(arr)-1):\n        gap = abs(arr[i+1] - arr[i])\n        cur = gap.if_else(gap, cur, gap > cur)\n    return cur\n", "response_1": "from Compiler import types\n\ndef largest_gap(arr):\n    \"\"\"\n    Return the largest gap in the array.\n    The length of the input array is guaranteed to be at least 2.\n    \"\"\"\n    # Initialize the current maximum gap to 0\n    cur = types.sint(0)\n    \n    # Iterate over the array to find the largest gap\n    for i in range(len(arr)-1):\n        # Compute the absolute difference between consecutive elements\n        diff = abs(arr[i+1] - arr[i])\n        \n        # Update the current maximum gap if the current difference is larger\n        cur = (diff > cur).if_else(diff, cur)\n    \n    # Return the largest gap found\n    return cur\n", "model_name": "deepseek-v3"}
{"test_name": "totally_dominate", "response_0": "def totally_dominate(a, b):\n    \"\"\"\n    Return whether array a \"totally dominates\" array b,\n    which means, any element in a is no smaller than any element in b.\n    \"\"\"\n    amin = a[0]\n    bmax = b[0]\n    \n    for i in range(len(a)):\n        amin = min(amin, a[i])\n    \n    for i in range(len(b)):\n        bmax = max(bmax, b[i])\n    \n    return amin >= bmax\n", "response_1": "def totally_dominate(a, b):\n    \"\"\"\n    Return whether array a \"totally dominates\" array b,\n    which means, any element in a is no smaller than any element in b.\n    \"\"\"\n    amin = a[0]\n    bmax = b[0]\n    \n    for i in range(len(a)):\n        amin = if_else(a[i] < amin, a[i], amin)\n    \n    for i in range(len(b)):\n        bmax = if_else(b[i] > bmax, b[i], bmax)\n    \n    return amin >= bmax\n", "model_name": "deepseek-v3"}
{"test_name": "element_count", "response_0": "def element_count(arr, target):\n    \"\"\"\n    Count the number of times the target element occurs in the array.\n    \"\"\"\n    ret = sint(0)\n    for item in arr:\n        ret += (item == target).if_else(sint(1), sint(0))\n    return ret\n", "response_1": "def element_count(arr, target):\n    \"\"\"\n    Count the number of times the target element occurs in the array.\n    \"\"\"\n    ret = 0\n    for item in arr:\n        if item == target:\n            ret = ret + 1\n    return ret\n", "model_name": "deepseek-v3"}
{"test_name": "is_subarray", "response_0": "def is_subarray(c, d):\n    \"\"\"\n    Return whether the first array is a continuous subarray of the second array.\n    Both c and d are secret-shared arrays.\n    \"\"\"\n    len_c = len(c)\n    len_d = len(d)\n    \n    for i in range(len_d):\n        if len_c <= len_d - i:\n            flag = sbit(True)\n            for j in range(len_c):\n                flag = flag * (d[i + j] == c[j])\n            if flag.reveal():\n                return sbit(True)\n    return sbit(False)\n", "response_1": "def is_subarray(c, d):\n    \"\"\"\n    Return whether the first array is a continuous subarray of the second array.\n    \"\"\"\n    len_c = len(c)\n    len_d = len(d)\n    result = False\n\n    for i in range(len_d):\n        if len_c <= len_d - i:\n            flag = True\n            for j in range(len_c):\n                flag = flag * (d[i + j] == c[j])\n            result = result + flag\n\n    return result != 0\n", "model_name": "deepseek-v3"}
{"test_name": "exists_5_or_7", "response_0": "def exists_5_or_7(arr):\n    \"\"\"\n    Check whether the array contains 5 or 7.\n    \"\"\"\n    result = False\n    for item in arr:\n        result = result or (item == 5) or (item == 7)\n    return result\n", "response_1": "def exists_5_or_7(arr):\n    \"\"\"\n    Check whether the array contains 5 or 7.\n    \"\"\"\n    result = False\n    for item in arr:\n        # Check if item is equal to 5 or 7\n        is_5 = item == 5\n        is_7 = item == 7\n        # Combine the results using OR\n        is_5_or_7 = is_5 or is_7\n        # Update the result using OR\n        result = result or is_5_or_7\n    return result\n", "model_name": "deepseek-v3"}
{"test_name": "variance", "response_0": "def variance(arr):\n    \"\"\"\n    Return the variance of the array.\n    \"\"\"\n    n = len(arr)\n    average = sfix(0)\n    variance = sfix(0)\n    \n    # Calculate the average\n    for item in arr:\n        average = average + item / n\n    \n    # Calculate the variance\n    for item in arr:\n        variance = variance + (item - average) ** 2 / n\n    \n    return variance\n", "response_1": "program variance\n\ndef variance(arr):\n    # Calculate the average\n    average = sfix(0)\n    for item in arr:\n        average = average + item / len(arr)\n    \n    # Calculate the variance\n    variance = sfix(0)\n    for item in arr:\n        variance = variance + (item - average) ** 2 / len(arr)\n    \n    return variance\n", "model_name": "deepseek-v3"}
{"test_name": "is_ascending", "response_0": "def is_ascending(arr):\n    \"\"\"\n    Return whether or not the array is in strictly ascending order.\n    If the length of input array is 1, you should return True.\n    \"\"\"\n    n = len(arr)\n    if n == 1:\n        return True\n    for i in range(n-1):\n        if arr[i] >= arr[i+1]:\n            return False\n    return True\n", "response_1": "def is_ascending(arr):\n    \"\"\"\n    Return whether or not the array is in strictly ascending order.\n    If the length of input array is 1, you should return True.\n    \"\"\"\n    n = len(arr)\n    if n == 1:\n        return True\n    for i in range(n - 1):\n        if arr[i] >= arr[i + 1]:\n            return False\n    return True\n", "model_name": "deepseek-v3"}
{"test_name": "xor_all", "response_0": "def xor_all(arr):\n    \"\"\"\n    XOR all elements in the array and return the output.\n    The input array is guaranteed to contain only 0's and 1's.\n    \"\"\"\n    ret = arr[0]\n    for i in range(1, len(arr)):\n        ret = ret ^ arr[i]\n    return ret\n", "response_1": "def xor_all(arr):\n    \"\"\"\n    XOR all elements in the array and return the output.\n    The input array is guaranteed to contain only 0's and 1's.\n    \"\"\"\n    ret = arr[0]\n    for i in range(1, len(arr)):\n        ret = ret ^ arr[i]\n    return ret\n", "model_name": "deepseek-v3"}
{"test_name": "upper_bound", "response_0": "def upper_bound(arr, x):\n    \"\"\"\n    Return the index of the smallest element bigger than x in arr.\n    If such element does not exist, return -1.\n    \"\"\"\n    ret = -1\n    distance = 0\n    found = False\n    for i in range(len(arr)):\n        cond = arr[i] > x\n        if cond:\n            new_distance = arr[i] - x\n            if not found or new_distance < distance:\n                ret = i\n                distance = new_distance\n                found = True\n    return ret\n", "response_1": "def upper_bound(arr, x):\n    \"\"\"\n    Return the index of the smallest element bigger than x in arr.\n    If such element does not exist, return -1.\n    \"\"\"\n    ret = -1\n    distance = 0\n    found = False\n    for i in range(len(arr)):\n        condition = arr[i] > x\n        if condition:\n            if not found or arr[i] - x < distance:\n                ret = i\n                distance = arr[i] - x\n                found = True\n    return ret\n", "model_name": "deepseek-v3"}
{"test_name": "array_process_then_sum", "response_0": "def array_process_then_sum(arr, func):\n    \"\"\"\n    Process all elements in the input array with given function, \n    then sum up the processed elements.\n    \"\"\"\n    sum = sfix(0)\n    for i in range(len(arr)):\n        arr[i] = func(arr[i])\n        sum = sum + arr[i]\n    return sum\n", "response_1": "def array_process_then_sum(arr, func):\n    \"\"\"\n    Process all elements in the input array with given function, \n    then sum up the processed elements.\n    \"\"\"\n    sum = sfix(0)  # Initialize sum as a secure fixed-point number\n    for i in range(len(arr)):\n        arr[i] = func(arr[i])  # Process each element with the given function\n        sum = sum + arr[i]  # Accumulate the sum\n    return sum\n", "model_name": "deepseek-v3"}
{"test_name": "average", "response_0": "def average(arr):\n    \"\"\"\n    Compute the average value of the array.\n    \"\"\"\n    sum = 0\n    length = len(arr)\n    for i in range(length):\n        sum = sum + arr[i]\n    ret = sum / length\n    return ret\n", "response_1": "def average(arr):\n    \"\"\"\n    Compute the average value of the array.\n    \"\"\"\n    sum = sfix(0)\n    length = len(arr)\n    for i in range(length):\n        sum = sum + arr[i]\n    ret = sum / sfix(length)\n    return ret\n", "model_name": "deepseek-v3"}
{"test_name": "array_filter", "response_0": "def array_filter(arr, predicator):\n    \"\"\"\n    For each element in the input array, \n    if the predicator returns True, then preserve the element, \n    otherwise set the element to 0.\n    \"\"\"\n    result = Array(len(arr), sfix)\n    for i in range(len(arr)):\n        result[i] = arr[i] * predicator(arr[i])\n    return result\n", "response_1": "def array_filter(arr, predicator):\n    \"\"\"\n    For each element in the input array, \n    if the predicator returns True, then preserve the element, \n    otherwise set the element to 0.\n    \"\"\"\n    # Initialize a list to store the results\n    result = [None] * len(arr)\n    \n    # Iterate over the array\n    for i in range(len(arr)):\n        # Apply the predicator to the current element\n        condition = predicator(arr[i])\n        \n        # Use a conditional assignment to set the result\n        result[i] = condition * arr[i] + (1 - condition) * 0\n    \n    return result\n", "model_name": "deepseek-v3"}
{"test_name": "sum_up", "response_0": "def sum_up(array):\n    \"\"\"\n    The sum_up function in MP-SPDZ\n    \"\"\"\n    sum = sint(0)\n    for num in array:\n        sum = sum + num\n    return sum\n", "response_1": "def sum_up(array):\n    \"\"\"\n    The sum_up function\n    \"\"\"\n    sum = sfix(0)\n    for num in array:\n        sum = sum + num\n    return sum\n", "model_name": "deepseek-v3"}
{"test_name": "negative_to_zero", "response_0": "def negative_to_zero(array):\n    \"\"\"\n    Turn the negative elements in the array to zero\n    \"\"\"\n    n = len(array)\n    for i in range(n):\n        # Check if the element is negative\n        is_negative = array[i] < 0\n        # If negative, set to zero, otherwise keep the original value\n        array[i] = is_negative.if_else(0, array[i])\n    return array\n", "response_1": "from Compiler import types\n\ndef negative_to_zero(array):\n    \"\"\"\n    Turn the negative elements in the array to zero\n    \"\"\"\n    for i in range(len(array)):\n        # Check if the element is negative\n        is_negative = array[i] < 0\n        # If it is negative, set it to zero, otherwise keep the original value\n        array[i] = is_negative.if_else(types.sint(0), array[i])\n    return array\n", "model_name": "deepseek-v3"}
{"test_name": "sum_only_positive_to_ten", "response_0": "def sum_only_positive_to_ten(array):\n    \"\"\"\n    Compute partial sum of the array with only the positive elements until the sum becomes no smaller than 10.\n    \"\"\"\n    sum = 0\n    for i in range(len(array)):\n        if array[i] <= 0:\n            continue\n        if sum >= 10:\n            break\n        sum = sum + array[i]\n    return sum\n", "response_1": "from Compiler.library import if_, break_loop, for_range\nfrom Compiler.types import sint\n\ndef sum_only_positive_to_ten(array):\n    \"\"\"\n    Compute partial sum of the array with only the positive elements until the sum becomes no smaller than 10.\n    \"\"\"\n    sum = sint(0)\n    n = len(array)\n    \n    @for_range(n)\n    def _(i):\n        is_positive = array[i] > 0\n        sum_less_than_ten = sum < 10\n        \n        @if_(is_positive & sum_less_than_ten)\n        def _():\n            sum.update(sum + array[i])\n        \n        @if_(sum >= 10)\n        def _():\n            break_loop()\n    \n    return sum\n", "model_name": "deepseek-v3"}
{"test_name": "bubble_sort", "response_0": "def bubble_sort(arr):\n    \"\"\"\n    Perform bubble sort on the array.\n    \"\"\"\n    n = len(arr)\n    for i in range(n - 1):\n        for j in range(n - 1 - i):\n            if arr[j] >= arr[j + 1]:\n                # Swap arr[j] and arr[j + 1]\n                temp = arr[j]\n                arr[j] = arr[j + 1]\n                arr[j + 1] = temp\n    return arr\n", "response_1": "def bubble_sort(arr):\n    \"\"\"\n    Perform bubble sort on the array.\n    \"\"\"\n    n = len(arr)\n    for i in range(n - 1):\n        for j in range(n - 1 - i):\n            if arr[j] >= arr[j + 1]:\n                # Swap arr[j] and arr[j + 1]\n                temp = arr[j]\n                arr[j] = arr[j + 1]\n                arr[j + 1] = temp\n    return arr\n", "model_name": "deepseek-v3"}
