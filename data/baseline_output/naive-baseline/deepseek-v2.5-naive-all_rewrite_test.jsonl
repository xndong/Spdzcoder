{"test_name": "move_to_end", "response_0": "def move_to_end(arr, index):\n    \"\"\"\n    Move the element with given index in the array to the end of the array.\n    The index is guaranteed to be legal.\n    \"\"\"\n    n = len(arr)\n    new_arr = Array(n, sint)\n\n    # Copy elements before the index\n    for i in range(index):\n        new_arr[i] = arr[i]\n\n    # Copy elements after the index\n    for i in range(index + 1, n):\n        new_arr[i - 1] = arr[i]\n\n    # Move the element at the given index to the end\n    new_arr[n - 1] = arr[index]\n\n    return new_arr\n", "response_1": "def move_to_end(arr, index):\n    \"\"\"\n    Move the element with given index in the array to the end of the array.\n    The index is guaranteed to be legal.\n    \"\"\"\n    n = len(arr)\n    new_arr = Array(n, sint)\n    \n    # Copy elements before the index\n    for i in range(index):\n        new_arr[i] = arr[i]\n    \n    # Copy elements after the index\n    for i in range(index + 1, n):\n        new_arr[i - 1] = arr[i]\n    \n    # Append the element at the given index to the end\n    new_arr[n - 1] = arr[index]\n    \n    return new_arr\n", "model_name": "deepseek-v2.5"}
{"test_name": "second_largest", "response_0": "def second_largest(arr):\n    \"\"\"\n    Return the second largest element in the array.\n    \"\"\"\n    n = len(arr)\n    for i in range(2, n):\n        if arr[i] > arr[0] or arr[i] > arr[1]:\n            idx = arr[0] < arr[1]\n            arr[idx] = arr[i]\n    return arr[0] if arr[0] < arr[1] else arr[1]\n\n# Example usage in MP-SPDZ\nn = 5\narr = Array(n, sint)\narr.input_from(0)  # Assuming the array is input from party 0\n\n# Call the function\nresult = second_largest(arr)\nprint_ln(\"The second largest element is: %s\", result.reveal())\n", "response_1": "fromCompiler import *\n\ndef second_largest(arr):\n    \"\"\"\n    Return the second largest element in the array.\n    \"\"\"\n    for i in range(2, len(arr)):\n        if arr[i] > arr[0] or arr[i] > arr[1]:\n            idx = 0 if arr[0] < arr[1] else 1\n            arr[idx] = arr[i]\n    return arr[0] if arr[0] < arr[1] else arr[1]\n\n# Example usage in MP-SPDZ\ndef main():\n    arr = Array(10, sint)  # Example array of size 10 with secret integers\n    arr = arr.input_from(0)  # Input values from party 0\n\n    # Call the second_largest function\n    result = second_largest(arr)\n\n    # Output the result\n    print_ln(\"The second largest element is: %s\", result.reveal())\n", "model_name": "deepseek-v2.5"}
{"test_name": "exists_true", "response_0": "def exists_true(arr):\n    \"\"\"\n    Check whether the boolean array contains a True.\n    \"\"\"\n    ret = arr.any()\n    return ret\n", "response_1": "def exists_true(arr):\n    \"\"\"\n    Check whether the boolean array contains a True.\n    \"\"\"\n    ret = arr.any()\n    return ret\n", "model_name": "deepseek-v2.5"}
{"test_name": "array_indicator", "response_0": "def array_indicator(arr, predicator):\n    \"\"\"\n    Return an array with the same size of the input array.\n    For each element in the input array,\n    the corresponding value in the returned array is set to be the value of the predicator.\n    \"\"\"\n    ret = Array(len(arr), sint)\n    for i in range(len(arr)):\n        ret[i] = predicator(arr[i])\n    return ret\n", "response_1": "def array_indicator(arr, predicator):\n    \"\"\"\n    Return an array with the same size of the input array.\n    For each element in the input array,\n    the corresponding value in the returned array is set to be the value of the predicator.\n    \"\"\"\n    ret = Array(len(arr), sint)\n    for i in range(len(arr)):\n        ret[i] = predicator(arr[i])\n    return ret\n", "model_name": "deepseek-v2.5"}
{"test_name": "inner_product", "response_0": "fromCompiler import *\n\ndef inner_product(vec1, vec2):\n    \"\"\"\n    Compute the inner product of the two arrays.\n    \"\"\"\n    # Ensure that the vectors have the same length\n    assert len(vec1) == len(vec2), \"Vectors must have the same length\"\n    \n    # Compute the element-wise product\n    lst = [x * y for x, y in zip(vec1, vec2)]\n    \n    # Sum the products\n    summation = sum(lst)\n    \n    return summation\n\n# Example usage in MP-SPDZ\nif __name__ == \"__main__\":\n    # Define secure vectors (using sint for secret integers)\n    vec1 = [sint(x) for x in [1, 2, 3]]\n    vec2 = [sint(x) for x in [4, 5, 6]]\n    \n    # Compute the inner product\n    result = inner_product(vec1, vec2)\n    \n    # Print the result (MP-SPDZ provides a secure print function)\n    print_ln(\"Inner product result: %s\", result.reveal())\n", "response_1": "def inner_product(vec1, vec2):\n    \"\"\"\n    Compute the inner product of the two arrays in MP-SPDZ.\n    \"\"\"\n    # Ensure the vectors have the same length\n    assert len(vec1) == len(vec2), \"Vectors must have the same length\"\n\n    # Compute the element-wise product\n    lst = [vec1[i] * vec2[i] for i in range(len(vec1))]\n\n    # Sum the products\n    summation = sum(lst)\n\n    return summation\n", "model_name": "deepseek-v2.5"}
{"test_name": "array_shift_2", "response_0": "from Compiler import types\n\ndef array_shift(a):\n    \"\"\"\n    Shift the array on index by 1.\n    For example, [0,1,2] will be shifted to [1,2,0]\n    \"\"\"\n    n = len(a)\n    shifted_array = types.Array(n, types.sint)\n    for i in range(n):\n        shifted_array[i] = a[(i - 1) % n]\n    return shifted_array\n", "response_1": "def array_shift(a):\n    \"\"\"\n    Shift the array on index by 1.\n    For example, [0,1,2] will be shifted to [1,2,0]\n    \"\"\"\n    n = len(a)\n    array = Array(n, sint)\n    for i in range(n):\n        array[i] = a[(i - 1) % n]\n    return array\n", "model_name": "deepseek-v2.5"}
{"test_name": "array_greater_than_scalar", "response_0": "fromCompiler import *\n\ndef array_greater_than_scalar(arr, bound):\n    \"\"\"\n    Given an input array and a bound,\n    return an array indicating whether each element is greater than the bound.\n    \"\"\"\n    ret = Array(len(arr), sint)\n    for i in range(len(arr)):\n        ret[i] = arr[i] > bound\n    return ret\n", "response_1": "def array_greater_than_scalar(arr, bound):\n    \"\"\"\n    Given an input array and a bound,\n    return an array indicating whether each element is greater than the bound.\n    \"\"\"\n    ret = Array(len(arr), sfix)\n    for i in range(len(arr)):\n        ret[i] = arr[i] > bound\n    return ret\n", "model_name": "deepseek-v2.5"}
{"test_name": "count_rises_2", "response_0": "def count_rises(arr):\n    \"\"\"\n    Count the number of rises in the array.\n    \"\"\"\n    n = len(arr)\n    flag = Array(n - 1, sint)\n    for i in range(n - 1):\n        flag[i] = arr[i] < arr[i + 1]\n    count = sint()\n    for i in range(n - 1):\n        count += flag[i]\n    return count\n", "response_1": "from Compiler import mpc_math\n\ndef count_rises(arr):\n    \"\"\"\n    Count the number of rises in the array.\n    \"\"\"\n    n = len(arr)\n    flag = Array(n - 1, sint)\n    \n    for i in range(n - 1):\n        flag[i] = arr[i] < arr[i + 1]\n    \n    count = mpc_math.sum(flag)\n    return count\n", "model_name": "deepseek-v2.5"}
{"test_name": "choppy_plus_minus", "response_0": "def choppy_plus_minus(arr):\n    \"\"\"\n    Return the array with the following modification of the input array:\n    For the element with odd index, increment the element by 1,\n    for the element with even index, decrement the element by 1.\n    \"\"\"\n    n = len(arr)\n    for i in range(n):\n        if i % 2 == 1:\n            arr[i] = arr[i] + 1\n        else:\n            arr[i] = arr[i] - 1\n    return arr\n\n# Example usage in MP-SPDZ\n# arr = Array(n, sint)  # Assuming `n` is the length of the array and `sint` is the secret integer type\n# choppy_plus_minus(arr)\n", "response_1": "def choppy_plus_minus(arr):\n    \"\"\"\n    Return the array with the following modification of the input array:\n    For the element with odd index, increment the element by 1,\n    for the element with even index, decrement the element by 1.\n    \"\"\"\n    n = len(arr)\n    for i in range(n):\n        if i % 2 == 1:\n            arr[i] = arr[i] + 1\n        else:\n            arr[i] = arr[i] - 1\n    return arr\n", "model_name": "deepseek-v2.5"}
{"test_name": "how_many_roots", "response_0": "fromCompiler import *\n\ndef how_many_roots(a, b, c):\n    \"\"\"\n    Given coefficients a, b and c of a quadratic function,\n    return the number of its roots.\n    a, b and c can be zero, but they will not all be zero.\n    \"\"\"\n    # Check if 'a' is zero\n    a_is_zero = a == cint(0)\n    b_is_zero = b == cint(0)\n\n    # If 'a' is zero, check if 'b' is zero\n    result_if_a_zero = if_else(b_is_zero, cint(0), cint(1))\n\n    # Calculate the discriminant\n    discriminant = b * b - cint(4) * a * c\n\n    # Check if discriminant is greater than zero\n    discriminant_gt_zero = discriminant > cint(0)\n    discriminant_eq_zero = discriminant == cint(0)\n\n    # If discriminant is greater than zero, there are 2 roots\n    result_if_discriminant_gt_zero = cint(2)\n\n    # If discriminant is equal to zero, there is 1 root\n    result_if_discriminant_eq_zero = cint(1)\n\n    # If discriminant is less than zero, there are 0 roots\n    result_if_discriminant_lt_zero = cint(0)\n\n    # Combine all conditions\n    result = if_else(a_is_zero, result_if_a_zero,\n                     if_else(discriminant_gt_zero, result_if_discriminant_gt_zero,\n                             if_else(discriminant_eq_zero, result_if_discriminant_eq_zero,\n                                     result_if_discriminant_lt_zero)))\n\n    return result\n\n# Example usage\na = cint(1)\nb = cint(-3)\nc = cint(2)\n\nprint_ln(\"Number of roots: %s\", how_many_roots(a, b, c).reveal())\n", "response_1": "def how_many_roots(a, b, c):\n    \"\"\"\n    Given coefficients a, b and c of a quadratic function,\n    return the number of its roots.\n    a, b and c can be zero, but they will not all be zero.\n    \"\"\"\n    # Check if a is zero\n    a_is_zero = a == 0\n    b_is_zero = b == 0\n    \n    # If a is zero, return 0 if b is zero, else return 1\n    result_if_a_zero = if_else(b_is_zero, 0, 1)\n    \n    # Compute the discriminant\n    discriminant = b**2 - 4 * a * c\n    \n    # Check if discriminant is greater than zero\n    discriminant_gt_zero = discriminant > 0\n    # Check if discriminant is equal to zero\n    discriminant_eq_zero = discriminant == 0\n    \n    # If discriminant is greater than zero, return 2\n    # If discriminant is equal to zero, return 1\n    # Otherwise, return 0\n    result_if_a_non_zero = if_else(discriminant_gt_zero, 2, if_else(discriminant_eq_zero, 1, 0))\n    \n    # Return the result based on whether a is zero or not\n    return if_else(a_is_zero, result_if_a_zero, result_if_a_non_zero)\n", "model_name": "deepseek-v2.5"}
{"test_name": "count_satisfied", "response_0": "def count_satisfied(arr, predicator):\n    \"\"\"\n    Count the number of elements in the array that satisfy the predicator.\n    \"\"\"\n    flag = Array(len(arr), sint)\n    for i in range(len(arr)):\n        flag[i] = predicator(arr[i])\n    \n    summation = sum(flag)\n    return summation\n", "response_1": "def count_satisfied(arr, predicator):\n    \"\"\"\n    Count the number of elements in the array that satisfy the predicator.\n    \"\"\"\n    flag = Array(len(arr), sint)\n    for i in range(len(arr)):\n        flag[i] = sint(predicator(arr[i]))\n    \n    summation = sint()\n    for i in range(len(arr)):\n        summation = summation + flag[i]\n    \n    return summation\n", "model_name": "deepseek-v2.5"}
{"test_name": "traverse_and_sum", "response_0": "def traverse_and_sum(arr1, arr2):\n    \"\"\"\n    Traverse all pairs of elements from the two inputs,\n    compute the product of the two elements and sum all of them up.\n    \"\"\"\n    ret = Array(len(arr1), sint)\n    for i in range(len(arr1)):\n        ret[i] = arr1[i] * arr2[i]\n    \n    total_sum = sint(0)\n    for i in range(len(arr1)):\n        total_sum += ret[i]\n    \n    return total_sum\n", "response_1": "def traverse_and_sum(arr1, arr2):\n    \"\"\"\n    Traverse all pairs of elements from the two inputs,\n    compute the product of the two elements and sum all of them up.\n    \"\"\"\n    n = len(arr1)\n    products = [sint(0)] * n\n    for i in range(n):\n        products[i] = arr1[i] * arr2[i]\n    \n    ret = sint(0)\n    for product in products:\n        ret += product\n    \n    return ret\n", "model_name": "deepseek-v2.5"}
{"test_name": "array_round", "response_0": "def array_round(arr):\n    \"\"\"\n    Round every element in the array to the nearest integer.\n    \"\"\"\n    ret = [sint.round(e) for e in arr]\n    return ret\n", "response_1": "def array_round(arr):\n    \"\"\"\n    Round every element in the array to the nearest integer.\n    \"\"\"\n    ret = Array(len(arr), sint)\n    for i in range(len(arr)):\n        ret[i] = arr[i].round()\n    return ret\n", "model_name": "deepseek-v2.5"}
{"test_name": "array_greater_eq", "response_0": "def array_greater_eq(arr, brr):\n    \"\"\"\n    For the two input arrays arr and brr, return an array ret with the same size.\n    For index i, if arr[i] >= brr[i], ret[i] will be set to 1, otherwise ret[i] will be set to 0.\n    The two input arrays are guaranteed to have the same length.\n    \"\"\"\n    n = len(arr)\n    ret = Array(n, sint)\n    for i in range(n):\n        ret[i] = arr[i] >= brr[i]\n    return ret\n", "response_1": "def array_greater_eq(arr, brr):\n    \"\"\"\n    For the two input arrays arr and brr, return an array ret with the same size.\n    For index i, if arr[i] >= brr[i], ret[i] will be set to 1, otherwise ret[i] will be set to 0.\n    The two input arrays are guaranteed to have the same length.\n    \"\"\"\n    n = len(arr)\n    ret = Array(n, sint)\n    for i in range(n):\n        ret[i] = arr[i] >= brr[i]\n    return ret\n", "model_name": "deepseek-v2.5"}
{"test_name": "indicate_negative", "response_0": "def indicate_negative(arr):\n    \"\"\"\n    For the given array, return an array with the same size.\n    If one element in the input array is negative,\n    then the corresponding element in the returned array will be 1,\n    otherwise the element in the returned array will be 0.\n    \"\"\"\n    ret = Array(len(arr), sint)\n    for i in range(len(arr)):\n        ret[i] = arr[i] < 0\n    return ret\n", "response_1": "def indicate_negative(arr):\n    \"\"\"\n    For the given array, return an array with the same size.\n    If one element in the input array is negative,\n    then the corresponding element in the returned array will be 1,\n    otherwise the element in the returned array will be 0.\n    \"\"\"\n    ret = Array(len(arr), sint)\n    for i in range(len(arr)):\n        ret[i] = arr[i] < 0\n    return ret\n", "model_name": "deepseek-v2.5"}
{"test_name": "array_subtract_2", "response_0": "def array_subtract(a, b):\n    \"\"\"\n    Subtract the first array by the second one elementwise.\n    If one of the array is shorter than the other, it will be padded with 0.\n    \"\"\"\n    from Compiler import types\n\n    # Determine the length of the longer array\n    len_a = len(a)\n    len_b = len(b)\n    max_len = max(len_a, len_b)\n\n    # Pad the shorter array with zeros\n    if len_a < max_len:\n        a += [types.cint(0)] * (max_len - len_a)\n    if len_b < max_len:\n        b += [types.cint(0)] * (max_len - len_b)\n\n    # Perform element-wise subtraction\n    ret = [x - y for x, y in zip(a, b)]\n\n    return ret\n", "response_1": "from Compiler import mpc_math\n\ndef array_subtract(a, b):\n    \"\"\"\n    Subtract the first array by the second one elementwise.\n    If one of the array is shorter than the other, it will be padded with 0.\n    \"\"\"\n    len_a = len(a)\n    len_b = len(b)\n    pad_length = abs(len_a - len_b)\n    \n    # Determine which array is shorter and pad it with zeros\n    if len_a < len_b:\n        a += [sint(0)] * pad_length\n    else:\n        b += [sint(0)] * pad_length\n    \n    # Perform element-wise subtraction\n    ret = [x - y for x, y in zip(a, b)]\n    return ret\n", "model_name": "deepseek-v2.5"}
{"test_name": "array_process", "response_0": "def array_process(arr, func):\n    \"\"\"\n    Process all elements in the input array with given function.\n    \"\"\"\n    n = len(arr)\n    result = [sint(0)] * n  # Initialize an array of secret integers\n    for i in range(n):\n        result[i] = func(arr[i])\n    return result\n", "response_1": "from Compiler import types\n\ndef array_process(arr, func):\n    \"\"\"\n    Process all elements in the input array with given function.\n    \"\"\"\n    for i in range(len(arr)):\n        arr[i] = func(arr[i])\n    return arr\n\n# Example usage\ndef example_func(x):\n    return x * x\n\n# Define an array of secure integers\narr = [types.sint(i) for i in range(10)]\n\n# Process the array with the example function\nprocessed_arr = array_process(arr, example_func)\n\n# Output the processed array\nfor element in processed_arr:\n    print_ln('%s', element.reveal())\n", "model_name": "deepseek-v2.5"}
{"test_name": "array_shift", "response_0": "def array_shift(a):\n    \"\"\"\n    Shift the array on index by 1.\n    For example, [0,1,2] will be shifted to [1,2,0]\n    \"\"\"\n    n = len(a)\n    shifted_a = Array(n, sint)\n    shifted_a[0] = a[n-1]\n    for i in range(1, n):\n        shifted_a[i] = a[i-1]\n    return shifted_a\n", "response_1": "def array_shift(a):\n    \"\"\"\n    Shift the array on index by 1.\n    For example, [0,1,2] will be shifted to [1,2,0]\n    \"\"\"\n    n = len(a)\n    shifted_a = [a[n-1]] + a[:n-1]\n    return shifted_a\n\n# Example usage in MP-SPDZ\na = sfix.Array(3)  # Assuming a fixed-point array of size 3\na[0] = 0\na[1] = 1\na[2] = 2\n\nshifted_a = array_shift(a)\nprint_ln(\"Shifted array: %s\", shifted_a)\n", "model_name": "deepseek-v2.5"}
{"test_name": "compare_and_select", "response_0": "from Compiler import types\n\ndef compare_and_select(a, b):\n    \"\"\"\n    Compare the two arrays elementwise,\n    and save the larger value into the returned array.\n    \"\"\"\n    n = len(a)\n    ret_array = types.sint.Array(n)\n    \n    for i in range(n):\n        ret_array[i] = a[i] + (b[i] - a[i]) * (a[i] < b[i])\n    \n    return ret_array\n", "response_1": "def compare_and_select(a, b):\n    \"\"\"\n    Compare the two arrays elementwise,\n    and save the larger value into the returned array.\n    \"\"\"\n    n = len(a)\n    ret_array = sfix.Array(n)\n    for i in range(n):\n        cond = a[i] > b[i]\n        ret_array[i] = cond.if_else(a[i], b[i])\n    return ret_array\n", "model_name": "deepseek-v2.5"}
{"test_name": "array_subtract", "response_0": "def array_subtract(a, b):\n    \"\"\"\n    Subtract the first array by the second one elementwise.\n    If one of the array is shorter than the other, it will be padded with 0.\n    \"\"\"\n    # Determine the lengths of the arrays\n    len_a = len(a)\n    len_b = len(b)\n    \n    # Pad the shorter array with zeros\n    if len_a < len_b:\n        a = a + [sint(0)] * (len_b - len_a)\n    else:\n        b = b + [sint(0)] * (len_a - len_b)\n    \n    # Subtract elementwise\n    ret = [x - y for x, y in zip(a, b)]\n    \n    return ret\n", "response_1": "from Compiler import mpc_math\n\ndef array_subtract(a, b):\n    \"\"\"\n    Subtract the first array by the second one elementwise.\n    If one of the array is shorter than the other, it will be padded with 0.\n    \"\"\"\n    # Determine the lengths of the arrays\n    len_a = len(a)\n    len_b = len(b)\n    \n    # Pad the shorter array with zeros\n    if len_a < len_b:\n        a = a + [sfix(0)] * (len_b - len_a)\n    else:\n        b = b + [sfix(0)] * (len_a - len_b)\n    \n    # Perform element-wise subtraction\n    ret = [x - y for x, y in zip(a, b)]\n    \n    return ret\n", "model_name": "deepseek-v2.5"}
{"test_name": "repeat_array", "response_0": "def repeat_array(c):\n    \"\"\"\n    Repeat the input array by concatenating it to itself.\n    \"\"\"\n    n = len(c)\n    result = sfix.Array(2 * n)\n    for i in range(n):\n        result[i] = c[i]\n        result[i + n] = c[i]\n    return result\n", "response_1": "def repeat_array(c):\n    \"\"\"\n    Repeat the input array by concatenating it to itself.\n    \"\"\"\n    return c + c\n", "model_name": "deepseek-v2.5"}
{"test_name": "zeros", "response_0": "def zeros(num):\n    \"\"\"\n    Return the all-zero array with length num.\n    \"\"\"\n    array = Array(num, sint)\n    array.assign_all(0)\n    return array\n", "response_1": "def zeros(num):\n    \"\"\"\n    Return the all-zero array with length num.\n    \"\"\"\n    array = Array(num, sint)\n    array.assign_all(0)\n    return array\n", "model_name": "deepseek-v2.5"}
{"test_name": "clip", "response_0": "fromCompiler import *\n\ndef clip(arr, upper_bound=1, lower_bound=-1):\n    \"\"\"\n    For the given array, clip the elements to the range [lower_bound, upper_bound]\n    \"\"\"\n    def helper_func(x):\n        return upper_bound if x >= upper_bound else (x if x > lower_bound else lower_bound)\n\n    arr = map(helper_func, arr)\n    return arr\n\n# Example usage in MP-SPDZ\nif __name__ == \"__main__\":\n    # Assuming arr is a list of secure floats\n    arr = [sfloat.get_input_from(i) for i in range(len(arr))]\n    clipped_arr = clip(arr)\n    for elem in clipped_arr:\n        elem.reveal().print_float()\n", "response_1": "def clip(arr, upper_bound=1, lower_bound=-1):\n    \"\"\"\n    For the given array, clip the elements to the range [lower_bound, upper_bound]\n    \"\"\"\n    def helper_func(x):\n        return upper_bound if x >= upper_bound else (x if x > lower_bound else lower_bound)\n\n    clipped_arr = Array(len(arr), sint)\n    for i in range(len(arr)):\n        clipped_arr[i] = helper_func(arr[i])\n    \n    return clipped_arr\n", "model_name": "deepseek-v2.5"}
{"test_name": "count_satisfied_2", "response_0": "def count_satisfied(arr, predicator):\n    \"\"\"\n    Count the number of elements in the array that satisfy the predicator.\n    \"\"\"\n    flag = Array(len(arr), sint)\n    for i in range(len(arr)):\n        flag[i] = predicator(arr[i])\n    \n    summation = sum(flag)\n    return summation\n", "response_1": "fromCompiler import Array, sint, sum\n\ndef count_satisfied(arr: Array, predicator):\n    \"\"\"\n    Count the number of elements in the array that satisfy the predicator.\n    \"\"\"\n    # Apply the predicator to each element in the array\n    flags = Array(len(arr), sint)\n    for i in range(len(arr)):\n        flags[i] = predicator(arr[i])\n    \n    # Sum the flags to get the count of satisfied elements\n    summation = sum(flags)\n    \n    return summation\n", "model_name": "deepseek-v2.5"}
{"test_name": "reverse_order_pair", "response_0": "from Compiler import mpc_math\nfrom Compiler import array\n\ndef reverse_order_pair(arr):\n    \"\"\"\n    Count the number of reverse order pairs in the array.\n    \"\"\"\n    count = Array(len(arr), sint)\n    cmparr = Array(len(arr), sint)\n\n    # Initialize arrays\n    for i in range(len(arr)):\n        count[i] = sint(0)\n        cmparr[i] = arr[i]\n\n    for i in range(len(arr)):\n        ndarray = Array(len(arr) - i, sint)\n        for j in range(len(arr) - i):\n            ndarray[j] = arr[i]\n        \n        # Perform comparison and accumulate the count\n        for j in range(len(arr) - i):\n            count[i] += ndarray[j] > cmparr[i + j]\n\n    # Sum up all counts\n    total_count = sint(0)\n    for i in range(len(arr)):\n        total_count += count[i]\n\n    return total_count\n", "response_1": "def reverse_order_pair(arr):\n    \"\"\"\n    Count the number of reverse order pairs in the array.\n    \"\"\"\n    n = len(arr)\n    count = sint(0)\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            count += arr[i] > arr[j]\n\n    return count\n", "model_name": "deepseek-v2.5"}
{"test_name": "array_inc", "response_0": "def array_inc(arr):\n    \"\"\"\n    Increment all elements in the input array by 1\n    \"\"\"\n    n = len(arr)\n    result = Array(n, sint)\n    for i in range(n):\n        result[i] = arr[i] + 1\n    return result\n", "response_1": "from Compiler import types\n\ndef array_inc(arr):\n    \"\"\"\n    Increment all elements in the input array by 1\n    \"\"\"\n    for i in range(len(arr)):\n        arr[i] = arr[i] + 1\n    return arr\n\n# Example usage\nn = 5\narr = types.Array(n, types.sint)\narr.input_from(0)  # Input array from party 0\n\nresult = array_inc(arr)\n\n# Output the result\nfor i in range(n):\n    result[i].reveal().print_reg()\n", "model_name": "deepseek-v2.5"}
{"test_name": "count_rises", "response_0": "def count_rises(arr):\n    \"\"\"\n    Count the number of rises in the array.\n    \"\"\"\n    count = sfix(0)\n    brr = arr[1:]\n    for x, y in zip(arr, brr):\n        count += sfix(x < y)\n    return count\n", "response_1": "def count_rises(arr):\n    \"\"\"\n    Count the number of rises in the array.\n    \"\"\"\n    count = sfix(0)  # Initialize count as a fixed-point number\n    n = len(arr)\n    for i in range(n - 1):\n        count += (arr[i] < arr[i + 1])  # Increment count if arr[i] < arr[i + 1]\n    return count\n", "model_name": "deepseek-v2.5"}
{"test_name": "array_process_2", "response_0": "def square(x):\n    return x * x\n\n# Example usage\narr = [sfix(2), sfix(3), sfix(4)]  # Example secret-shared array\nprocessed_arr = array_process(arr, square)\n", "response_1": "def array_process(arr, func):\n    \"\"\"\n    Process all elements in the input array with given function.\n    \"\"\"\n    processed_arr = Array(len(arr), sint)\n    for i in range(len(arr)):\n        processed_arr[i] = func(arr[i])\n    return processed_arr\n", "model_name": "deepseek-v2.5"}
{"test_name": "two_norm", "response_0": "fromCompiler import *\n\ndef two_norm(vec):\n    \"\"\"\n    Return the two-norm of the vector.\n    \"\"\"\n    # Square each element in the vector\n    squared_vec = [x * x for x in vec]\n    \n    # Sum the squared elements\n    sum_squared = sfix(0)\n    for x in squared_vec:\n        sum_squared += x\n    \n    # Return the square root of the sum\n    return sqrt(sum_squared)\n", "response_1": "def two_norm(vec):\n    \"\"\"\n    Return the two-norm of the vector.\n    \"\"\"\n    # Square each element in the vector\n    squared_vec = [x.square() for x in vec]\n    \n    # Sum the squared elements\n    sum_of_squares = sum(squared_vec)\n    \n    # Compute the square root of the sum\n    norm = sum_of_squares.sqrt()\n    \n    return norm\n", "model_name": "deepseek-v2.5"}
{"test_name": "totally_dominate", "response_0": "from Compiler import types\n\ndef totally_dominate(a: types.Array, b: types.Array) -> types.sint:\n    \"\"\"\n    Return whether array a \"totally dominates\" array b,\n    which means, any element in a is no smaller than any element in b.\n    \"\"\"\n    amin = a.min()\n    bmax = b.max()\n    return amin >= bmax\n", "response_1": "from Compiler import mpc_math\n\ndef totally_dominate(a, b):\n    \"\"\"\n    Return whether array a \"totally dominates\" array b,\n    which means, any element in a is no smaller than any element in b.\n    \"\"\"\n    amin = mpc_math.minimum(a)\n    bmax = mpc_math.maximum(b)\n    return amin >= bmax\n", "model_name": "deepseek-v2.5"}
{"test_name": "inner_product_2", "response_0": "def inner_product(vec1, vec2):\n    \"\"\"\n    Compute the inner product of the two arrays.\n    \"\"\"\n    summation = sfix(0)  # Initialize summation as a secret fixed-point number\n    for x, y in zip(vec1, vec2):\n        summation += x * y  # Perform secret multiplication and addition\n    return summation\n", "response_1": "def inner_product(vec1, vec2):\n    \"\"\"\n    Compute the inner product of the two arrays.\n    \"\"\"\n    n = len(vec1)\n    summation = sfix(0)  # Initialize summation as a secret-shared fixed-point number\n    for i in range(n):\n        summation += vec1[i] * vec2[i]  # Multiply and accumulate\n    return summation\n", "model_name": "deepseek-v2.5"}
{"test_name": "get_subarr_by_indices", "response_0": "def get_subarr_by_indices(a, indices):\n    \"\"\"\n    Get the subarray of the input array indicated by the indices.\n    The inputs are guaranteed to be legal.\n    \"\"\"\n    n = len(indices)\n    ret = Array(n, sint)\n    for i in range(n):\n        ret[i] = a[indices[i]]\n    return ret\n", "response_1": "def get_subarr_by_indices(a, indices):\n    \"\"\"\n    Get the subarray of the input array indicated by the indices.\n    The inputs are guaranteed to be legal.\n    \"\"\"\n    n = len(indices)\n    ret = Array(n, sint)\n    for i in range(n):\n        ret[i] = a[indices[i]]\n    return ret\n", "model_name": "deepseek-v2.5"}
{"test_name": "exists_5_or_7", "response_0": "def exists_5_or_7(arr):\n    \"\"\"\n    Check whether the array contains 5 or 7.\n    \"\"\"\n    flag = Array(len(arr), sfix)\n    for i in range(len(arr)):\n        flag[i] = (arr[i] == 5) + (arr[i] == 7)\n    \n    result = sfix(0)\n    for i in range(len(arr)):\n        result = result + flag[i]\n    \n    return result > 0\n", "response_1": "def exists_5_or_7(arr):\n    \"\"\"\n    Check whether the array contains 5 or 7 in a secure multi-party computation setting.\n    \"\"\"\n    flag = Array(len(arr), sbit)\n    for i in range(len(arr)):\n        flag[i] = (arr[i] == 5) | (arr[i] == 7)\n    \n    return flag.any()\n", "model_name": "deepseek-v2.5"}
{"test_name": "remove_by_index", "response_0": "def remove_by_index(arr, index):\n    \"\"\"\n    Remove the element in the array by index and return the remaining array.\n    The input index is guaranteed to be legal.\n    \"\"\"\n    n = len(arr)\n    ret = Array(n-1, sint)\n    \n    # Copy elements before the index\n    for i in range(index):\n        ret[i] = arr[i]\n    \n    # Copy elements after the index\n    for i in range(index, n-1):\n        ret[i] = arr[i+1]\n    \n    return ret\n", "response_1": "def remove_by_index(arr, index):\n    \"\"\"\n    Remove the element in the array by index and return the remaining array.\n    The input index is guaranteed to be legal.\n    \"\"\"\n    n = len(arr)\n    ret = Array(n-1, sint)\n    \n    # Copy elements before the index\n    for i in range(index):\n        ret[i] = arr[i]\n    \n    # Copy elements after the index\n    for i in range(index, n-1):\n        ret[i] = arr[i+1]\n    \n    return ret\n", "model_name": "deepseek-v2.5"}
{"test_name": "average", "response_0": "def average(arr):\n    \"\"\"\n    Compute the average value of the array.\n    \"\"\"\n    summmation = sum(arr)\n    length = len(arr)\n    ret = summmation.reveal() / length\n    return ret\n", "response_1": "def average(arr):\n    \"\"\"\n    Compute the average value of the array.\n    \"\"\"\n    summmation = sum(arr)\n    length = len(arr)\n    ret = summmation.reveal() / length\n    return ret\n", "model_name": "deepseek-v2.5"}
