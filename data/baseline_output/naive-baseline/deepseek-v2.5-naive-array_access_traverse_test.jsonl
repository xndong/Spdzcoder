{"test_name": "indicate_positive", "response_0": "def indicate_positive(arr):\n    n = len(arr)\n    ret = Array(n, sint)\n    for i in range(n):\n        ret[i] = arr[i] > 0\n    return ret\n", "response_1": "from Compiler import mpc_math\n\ndef indicate_positive(arr):\n    \"\"\"\n    For the given array, return an array with the same size. \n    If one element in the input array is positive, \n    then the corresponding element in the returned array will be 1, \n    otherwise the element in the returned array will be 0. \n    \"\"\"\n    n = len(arr)\n    ret = Array(n, sfix)\n    for i in range(n):\n        ret[i] = if_else(arr[i] > 0, 1, 0)\n    return ret\n", "model_name": "deepseek-v2.5"}
{"test_name": "array_xor", "response_0": "def array_xor(a, b):\n    \"\"\"\n    Compute the elementwise XOR of the two input vectors.\n    \"\"\"\n    ret = Array(len(a), sfix)\n    for i in range(len(a)):\n        ret[i] = a[i] ^ b[i]\n    return ret\n", "response_1": "def array_xor(a, b):\n    \"\"\"\n    Compute the elementwise XOR of the two input vectors.\n    \"\"\"\n    n = len(a)\n    ret = sints(n)  # Initialize an array of secret integers\n    for i in range(n):\n        ret[i] = a[i] ^ b[i]\n    return ret\n", "model_name": "deepseek-v2.5"}
{"test_name": "interlaced_placement", "response_0": "def interlaced_placement(a, b):\n    \"\"\"\n    Interleave the elements in two sequences.\n    The two input arrays are guaranteed to have the same length.\n    \"\"\"\n    n = len(a)\n    ret = Array(2 * n, sint)\n    for i in range(2 * n):\n        if i % 2 == 1:\n            ret[i] = b[(i - 1) // 2]\n        else:\n            ret[i] = a[i // 2]\n    return ret\n", "response_1": "def interlaced_placement(a, b):\n    \"\"\"\n    Interleave the elements in two sequences.\n    The two input arrays are guaranteed to have the same length. \n    \"\"\"\n    n = len(a)\n    ret = Array(2 * n, sint)\n    for i in range(2 * n):\n        if i % 2 == 1:\n            ret[i] = b[(i - 1) // 2]\n        else:\n            ret[i] = a[i // 2]\n    return ret\n", "model_name": "deepseek-v2.5"}
{"test_name": "array_and", "response_0": "from Compiler import types\n\ndef array_and(a: types.Array, b: types.Array) -> types.Array:\n    \"\"\"\n    Compute the elementwise AND of the two input vectors.\n    \"\"\"\n    if len(a) != len(b):\n        raise ValueError(\"Input arrays must have the same length\")\n    \n    ret = types.Array(len(a), types. sint)\n    for i in range(len(a)):\n        ret[i] = a[i] & b[i]\n    \n    return ret\n", "response_1": "def array_and(a, b):\n    \"\"\"\n    Compute the elementwise AND of the two input vectors. \n    \"\"\"\n    n = len(a)\n    ret = sfix.Array(n)\n    for i in range(n):\n        ret[i] = a[i] & b[i]\n    return ret\n", "model_name": "deepseek-v2.5"}
{"test_name": "array_indicator", "response_0": "def array_indicator(arr, predicator):\n    \"\"\"\n    Return an array with the same size of the input array. \n    For each element in the input array, \n    the corresponding value in the returned array is set to be the value of the predicator. \n    \"\"\"\n    n = len(arr)\n    ret = Array(n, sint)\n    for i in range(n):\n        ret[i] = predicator(arr[i])\n    return ret\n", "response_1": "def array_indicator(arr, predicator):\n    \"\"\"\n    Return an array with the same size of the input array. \n    For each element in the input array, \n    the corresponding value in the returned array is set to be the value of the predicator. \n    \"\"\"\n    n = len(arr)\n    ret = Array(n, sfix)\n    for i in range(n):\n        ret[i] = predicator(arr[i])\n    return ret\n", "model_name": "deepseek-v2.5"}
{"test_name": "array_greater_than_scalar", "response_0": "def array_greater_than_scalar(arr, bound):\n    \"\"\"\n    Given an input array and a bound, \n    return an array indicating whether each element is greater than the bound. \n    \"\"\"\n    n = len(arr)\n    ret = Array(n, sint)\n    for i in range(n):\n        ret[i] = arr[i] > bound\n    return ret\n", "response_1": "def array_greater_than_scalar(arr, bound):\n    \"\"\"\n    Given an input array and a bound, \n    return an array indicating whether each element is greater than the bound. \n    \"\"\"\n    n = len(arr)\n    ret = Array(n, sfix)\n    for i in range(n):\n        ret[i] = arr[i] > bound\n    return ret\n", "model_name": "deepseek-v2.5"}
{"test_name": "array_no_greater_than_scalar", "response_0": "def array_no_greater_than_scalar(arr, bound):\n    \"\"\"\n    Given an input array and a bound, \n    return an array indicating whether each element is no greater than the bound. \n    \"\"\"\n    n = len(arr)\n    ret = sfix.Array(n)  # Create an array to store the result\n\n    for i in range(n):\n        ret[i] = arr[i] <= bound  # Secure comparison\n\n    return ret\n", "response_1": "fromCompiler import *\n\ndef array_no_greater_than_scalar(arr, bound):\n    \"\"\"\n    Given an input array and a bound, \n    return an array indicating whether each element is no greater than the bound. \n    \"\"\"\n    n = len(arr)\n    ret = sfix.Array(n)\n    \n    for i in range(n):\n        ret[i] = arr[i] <= bound\n    \n    return ret\n\n# Example usage in an MP-SPDZ program\nif __name__ == \"__main__\":\n    n = 5\n    arr = sfix.Array(n)\n    bound = sfix(10.0)  # Example bound\n    \n    # Initialize the array with some values\n    for i in range(n):\n        arr[i] = sfix(i * 2.0)\n    \n    result = array_no_greater_than_scalar(arr, bound)\n    \n    # Print the result\n    for i in range(n):\n        print_ln(\"%s\", result[i].reveal())\n", "model_name": "deepseek-v2.5"}
{"test_name": "reverse_and_concat", "response_0": "def reverse_and_concat(a):\n    \"\"\"\n    Reverse the input array and concatenate it to the original array.\n    \"\"\"\n    n = len(a)\n    b = [a[n-1-i] for i in range(n)]\n    return a + b\n\n# Example usage in MP-SPDZ\n# a = Array(n, sint)  # Assuming 'a' is an array of secret integers\n# result = reverse_and_concat(a)\n", "response_1": "def reverse_and_concat(a):\n    \"\"\"\n    Reverse the input array and concatenate it to the original array. \n    \"\"\"\n    n = len(a)\n    b = Array(n, sint)\n    for i in range(n):\n        b[i] = a[n-1-i]\n    return a + b\n", "model_name": "deepseek-v2.5"}
{"test_name": "array_round", "response_0": "def array_round(arr):\n    \"\"\"\n    Round every element in the array to the nearest integer.\n    \"\"\"\n    ret = [sint() for _ in range(len(arr))]\n    for i in range(len(arr)):\n        int_part = arr[i].floor()\n        frac_part = arr[i] - int_part\n        ret[i] = int_part + (frac_part >= 0.5)\n    return ret\n", "response_1": "from Compiler import mpc_math\n\ndef array_round(arr):\n    \"\"\"\n    Round every element in the array to the nearest integer.\n    \"\"\"\n    ret = [sfix(0) for _ in range(len(arr))]\n    for i in range(len(arr)):\n        int_part = mpc_math.floor(arr[i])\n        fractional_part = arr[i] - int_part\n        ret[i] = int_part + (fractional_part >= sfix(0.5))\n    return ret\n", "model_name": "deepseek-v2.5"}
{"test_name": "array_greater_eq", "response_0": "def array_greater_eq(arr, brr):\n    \"\"\"\n    For the two input arrays arr and brr, return an array ret with the same size.\n    For index i, if arr[i] >= brr[i], ret[i] will be set to 1, otherwise ret[i] will be set to 0.\n    The two input arrays are guaranteed to have the same length.\n    \"\"\"\n    n = len(arr)\n    ret = Array(n, sint)\n    for i in range(n):\n        ret[i] = arr[i] >= brr[i]\n    return ret\n", "response_1": "def array_greater_eq(arr, brr):\n    \"\"\"\n    For the two input arrays arr and brr, return an array ret with the same size. \n    For index i, if arr[i] >= brr[i], ret[i] will be set to 1, otherwise ret[i] will be set to 0. \n    The two input arrays are guaranteed to have the same length. \n    \"\"\"\n    n = len(arr)\n    ret = Array(n, sint)\n    for i in range(n):\n        ret[i] = arr[i] >= brr[i]\n    return ret\n", "model_name": "deepseek-v2.5"}
{"test_name": "reverse", "response_0": "def reverse(arr):\n    \"\"\"\n    Reverse the array.\n    \"\"\"\n    n = len(arr)\n    ret = sfix.Array(n)\n    for i in range(n):\n        ret[i] = arr[n-1-i]\n    return ret\n", "response_1": "def reverse(arr):\n    \"\"\"\n    Reverse the array. \n    \"\"\"\n    n = len(arr)\n    ret = Array(n, sint)\n    for i in range(n):\n        ret[i] = arr[n-1-i]\n    return ret\n", "model_name": "deepseek-v2.5"}
{"test_name": "indicate_negative", "response_0": "def indicate_negative(arr):\n    \"\"\"\n    For the given array, return an array with the same size. \n    If one element in the input array is negative, \n    then the corresponding element in the returned array will be 1, \n    otherwise the element in the returned array will be 0. \n    \"\"\"\n    n = len(arr)\n    ret = sfix.Array(n)\n    for i in range(n):\n        ret[i] = sfix(1) if arr[i] < sfix(0) else sfix(0)\n    return ret\n", "response_1": "def indicate_negative(arr):\n    \"\"\"\n    For the given array, return an array with the same size. \n    If one element in the input array is negative, \n    then the corresponding element in the returned array will be 1, \n    otherwise the element in the returned array will be 0. \n    \"\"\"\n    n = len(arr)\n    ret = Array(n, sint)\n    for i in range(n):\n        ret[i] = arr[i] < 0\n    return ret\n", "model_name": "deepseek-v2.5"}
{"test_name": "max_sub_sequence", "response_0": "def max_sub_sequence(arr: Array):\n    \"\"\"\n    Use dynamic programming to find the sum of max continuous subsequence of the input array.\n    \"\"\"\n    n = len(arr)\n    partial_max = Array(n, sint)\n    suffix_max = Array(n, sint)\n    partial_max[0] = arr[0]\n    suffix_max[0] = arr[0]\n\n    for i in range(1, n):\n        suffix_max[i] = suffix_max[i - 1] + arr[i] if suffix_max[i - 1] >= 0 else arr[i]\n        partial_max[i] = partial_max[i - 1] if partial_max[i - 1] >= suffix_max[i] else suffix_max[i]\n\n    return partial_max[n - 1]\n", "response_1": "def max_sub_sequence(arr: Array):\n    \"\"\"\n    Use dynamic programming to find the sum of max continuous subsequence of the input array.\n    \"\"\"\n    n = len(arr)\n    partial_max = Array(n, sint)\n    suffix_max = Array(n, sint)\n\n    partial_max[0] = arr[0]\n    suffix_max[0] = arr[0]\n\n    for i in range(1, n):\n        suffix_max[i] = suffix_max[i-1] + arr[i] if suffix_max[i-1] >= 0 else arr[i]\n        partial_max[i] = max(partial_max[i-1], suffix_max[i])\n\n    return partial_max[n-1]\n", "model_name": "deepseek-v2.5"}
{"test_name": "compare_and_select", "response_0": "def compare_and_select(a, b):\n    \"\"\"\n    Compare the two arrays elementwise, \n    and save the larger value into the returned array. \n    \"\"\"\n    n = len(a)\n    ret_array = sfix.Array(n)\n    \n    for i in range(n):\n        ret_array[i] = a[i] + (b[i] - a[i]) * (a[i] < b[i])\n    \n    return ret_array\n", "response_1": "def compare_and_select(a, b):\n    \"\"\"\n    Compare the two arrays elementwise, \n    and save the larger value into the returned array. \n    \"\"\"\n    n = len(a)\n    ret_array = sfix.Array(n)\n    for i in range(n):\n        ret_array[i] = max(a[i], b[i])\n\n    return ret_array\n", "model_name": "deepseek-v2.5"}
{"test_name": "count_element_frequency", "response_0": "def count_element_frequency(l):\n    n = len(l)\n    ret = [sint(0) for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            cond = l[j] == l[i]\n            ret[i] = ret[i] + cond\n    return ret\n", "response_1": "def count_element_frequency(l):\n    \"\"\"\n    Return an array with the same size of the original array, \n    each position of which records the number of occurrences of the element at the same position. \n    \"\"\"\n    n = len(l)\n    ret = sfix.Array(n)\n    for i in range(n):\n        ret[i] = sfix(0)\n    \n    for i in range(n):\n        for j in range(n):\n            cond = l[j] == l[i]\n            ret[i] = ret[i] + cond\n    \n    return ret\n", "model_name": "deepseek-v2.5"}
{"test_name": "array_or", "response_0": "def array_or(a, b):\n    \"\"\"\n    Compute the elementwise OR of the two input vectors.\n    \"\"\"\n    # Ensure the input vectors are of the same length\n    assert len(a) == len(b), \"Input vectors must be of the same length\"\n    \n    # Initialize the result vector\n    ret = sint.Array(len(a))\n    \n    # Perform the elementwise OR operation\n    for i in range(len(a)):\n        ret[i] = a[i] or b[i]\n    \n    return ret\n", "response_1": "def array_or(a, b):\n    \"\"\"\n    Compute the elementwise OR of the two input vectors.\n    \"\"\"\n    n = len(a)\n    ret = [sint(0) for _ in range(n)]\n    for i in range(n):\n        ret[i] = a[i] | b[i]\n    return ret\n", "model_name": "deepseek-v2.5"}
{"test_name": "stock_predicator", "response_0": "def stock_predicator(days):\n    \"\"\"\n    Given the stock price in the next few days (at least 3 days).\n    Use dynamic programming to find to days, \n    such that buying on the earlier day and selling on the later day is the most profitable\n    If all choices causes negative profits, you should return 0.\n    \"\"\"\n    n = len(days)\n    lowest = sfix.Array(n)\n    partial_max = sfix.Array(n)\n    lowest[0] = days[0]\n    partial_max[0] = sfix(0)\n\n    for i in range(1, n):\n        lowest[i] = lowest[i-1] if lowest[i-1] <= days[i] else days[i]\n        partial_max[i] = partial_max[i-1] if partial_max[i-1] >= days[i] - lowest[i-1] else days[i] - lowest[i-1]\n    \n    return partial_max[n-1]\n", "response_1": "from Compiler import mpc_math\n\ndef stock_predicator(days):\n    \"\"\"\n    Given the stock price in the next few days (at least 3 days).\n    Use dynamic programming to find to days, \n    such that buying on the earlier day and selling on the later day is the most profitable\n    If all choices causes negative profits, you should return 0.\n    \"\"\"\n    n = len(days)\n    lowest = [sint(0) for _ in range(n)]\n    partial_max = [sint(0) for _ in range(n)]\n    lowest[0] = days[0]\n    \n    for i in range(1, n):\n        lowest[i] = mpc_math.min(lowest[i-1], days[i])\n        partial_max[i] = mpc_math.max(partial_max[i-1], days[i] - lowest[i-1])\n    \n    return partial_max[n-1]\n", "model_name": "deepseek-v2.5"}
{"test_name": "len5_inc_array", "response_0": "def len5_inc_array(init):\n    \"\"\"\n    Return an increase-by-one array with given initial element and length 5.\n    \"\"\"\n    ret = Array(5, sint)\n    for i in range(5):\n        ret[i] = init + i\n    return ret\n", "response_1": "def len5_inc_array(init):\n    \"\"\"\n    Return an increase-by-one array with given initial element and length 5.\n    \"\"\"\n    ret = Array(5, sint)\n    for i in range(5):\n        ret[i] = init + i\n    return ret\n", "model_name": "deepseek-v2.5"}
{"test_name": "cut_first_five", "response_0": "def cut_first_five(arr):\n    \"\"\"\n    Return the array composed of the first 5 elements of the input array. \n    If the input array does not have 5 elements, pad with 0.\n    \"\"\"\n    ret = Array(5, sint)\n    for i in range(min(5, len(arr))):\n        ret[i] = arr[i]\n    for i in range(min(5, len(arr)), 5):\n        ret[i] = 0\n    return ret\n", "response_1": "def cut_first_five(arr):\n    \"\"\"\n    Return the array composed of the first 5 elements of the input array. \n    If the input array does not have 5 elements, pad with 0.\n    \"\"\"\n    # Initialize a list of 5 elements, all set to 0\n    ret = [sint(0) for _ in range(5)]\n    \n    # Determine the length of the input array\n    arr_len = len(arr)\n    \n    # Loop through the first 5 elements or the length of the array, whichever is smaller\n    for i in range(min(5, arr_len)):\n        ret[i] = arr[i]\n    \n    return ret\n", "model_name": "deepseek-v2.5"}
{"test_name": "max_pooling_1d", "response_0": "def max_pooling_1d(vec, step):\n    \"\"\"\n    Do 1-dimensional max pooling on vec with step.\n    Ignoring the remaining elements in the vector.\n    \"\"\"\n    ret_length = len(vec) // step\n    ret = Array(ret_length, sint)\n    for i in range(ret_length):\n        max = vec[i * step]\n        for j in range(1, step):\n            max = max(max, vec[i * step + j])\n        ret[i] = max\n    return ret\n", "response_1": "def max_pooling_1d(vec, step):\n    \"\"\"\n    Do 1-dimensional max pooling on vec with step. \n    Ignoring the remaining elements in the vector.\n    \"\"\"\n    ret_length = len(vec) // step\n    ret = Array(ret_length, sint)\n    for i in range(ret_length):\n        max = vec[i * step]\n        for j in range(1, step):\n            max = max(max, vec[i * step + j])\n        ret[i] = max\n    return ret\n", "model_name": "deepseek-v2.5"}
{"test_name": "array_greater", "response_0": "def array_greater(arr, brr):\n    \"\"\"\n    For the two input arrays arr and brr, return an array ret with the same size. \n    For index i, if arr[i]>brr[i], ret[i] will be set to 1, otherwise ret[i] will be set to 0. \n    The two input arrays are guaranteed to have the same length. \n    \"\"\"\n    n = len(arr)\n    ret = Array(n, sint)\n    for i in range(n):\n        ret[i] = arr[i] > brr[i]\n    return ret\n", "response_1": "def array_greater(arr, brr):\n    \"\"\"\n    For the two input arrays arr and brr, return an array ret with the same size. \n    For index i, if arr[i]>brr[i], ret[i] will be set to 1, otherwise ret[i] will be set to 0. \n    The two input arrays are guaranteed to have the same length. \n    \"\"\"\n    n = len(arr)\n    ret = Array(n, sint)\n    for i in range(n):\n        ret[i] = arr[i] > brr[i]\n    return ret\n", "model_name": "deepseek-v2.5"}
{"test_name": "dumb_concat", "response_0": "def dumb_concat(arr, brr):\n    \"\"\"\n    Concatenate the second array to the first array in a dumb way.\n    \"\"\"\n    length = len(arr) + len(brr)\n    ret = Array(length, sint)\n    for i in range(len(arr)):\n        ret[i] = arr[i]\n    for j in range(len(brr)):\n        ret[len(arr)+j] = brr[j]\n    return ret\n", "response_1": "def dumb_concat(arr, brr):\n    \"\"\"\n    Concatenate the second array to the first array in a dumb way.\n    \"\"\"\n    length = len(arr) + len(brr)\n    ret = Array(length, sint)\n    for i in range(len(arr)):\n        ret[i] = arr[i]\n    for j in range(len(brr)):\n        ret[len(arr) + j] = brr[j]\n    return ret\n", "model_name": "deepseek-v2.5"}
{"test_name": "indicator_if_else", "response_0": "from Compiler import mpc_math\n\ndef indicator_if_else(a, b, ind):\n    \"\"\"\n    Return an array c with the same length of a and b. \n    The element of c is set to be the corresponding element of a if the indicator is 1, \n    and is set to be the corresponding element of b if the indicator is 0.\n    \"\"\"\n    n = len(ind)\n    c = Array(n, sint)\n    \n    for i in range(n):\n        # Secure conditional selection\n        c[i] = ind[i].if_else(a[i], b[i])\n    \n    return c\n", "response_1": "def indicator_if_else(a, b, ind):\n    \"\"\"\n    Return an array c with the same length of a and b. \n    The element of c is set to be the corresponding element of a if the indicator is 1, \n    and is set to be the corresponding element of b if the indicator is 0.\n    \"\"\"\n    n = len(ind)\n    c = sfix.Array(n)\n    \n    for i in range(n):\n        c[i] = a[i] * ind[i] + b[i] * (1 - ind[i])\n    \n    return c\n", "model_name": "deepseek-v2.5"}
{"test_name": "elementwise_multiplication", "response_0": "def elementwise_multiplication(a, b):\n    \"\"\"\n    Compute the elementwise multiplication of the two input vectors.\n    \"\"\"\n    n = len(a)\n    ret = [sint() for _ in range(n)]  # Initialize a list of secret integers\n    for i in range(n):\n        ret[i] = a[i] * b[i]  # Elementwise multiplication\n    return ret\n", "response_1": "def elementwise_multiplication(a, b):\n    \"\"\"\n    Compute the elementwise multiplication of the two input vectors.\n    \"\"\"\n    n = len(a)\n    ret = [sint(0) for _ in range(n)]\n    for i in range(n):\n        ret[i] = a[i] * b[i]\n    return ret\n", "model_name": "deepseek-v2.5"}
{"test_name": "get_subarr_by_indices", "response_0": "def get_subarr_by_indices(a, indices):\n    \"\"\"\n    Get the subarray of the input array indicated by the indices. \n    The inputs are guaranteed to be legal.\n    \"\"\"\n    n = len(indices)\n    ret = Array(n, sint)\n    for i in range(n):\n        ret[i] = a[indices[i]]\n    return ret\n", "response_1": "def get_subarr_by_indices(a, indices):\n    \"\"\"\n    Get the subarray of the input array indicated by the indices. \n    The inputs are guaranteed to be legal.\n    \"\"\"\n    n = len(indices)\n    ret = Array(n, sint)\n    for i in range(n):\n        ret[i] = a[indices[i]]\n    return ret\n", "model_name": "deepseek-v2.5"}
{"test_name": "inc_array", "response_0": "def inc_array(num):\n    \"\"\"\n    Return an array with length num and elements 1 to num.\n    The input is guaranteed to be a cleartext positive integer.\n    \"\"\"\n    # Create an array of integers from 1 to num\n    return [regint(i+1) for i in range(num)]\n", "response_1": "def inc_array(num):\n    \"\"\"\n    Return an array with length num and elements 1 to num. \n    The input is guaranteed to be a cleartext positive integer.\n    \"\"\"\n    return [regint(i+1) for i in range(num)]\n", "model_name": "deepseek-v2.5"}
{"test_name": "cut_last_five", "response_0": "def cut_last_five(arr):\n    \"\"\"\n    Return the array composed of the last 5 elements of the input array. \n    If the input array does not have 5 elements, pad with 0 (at the beginning).\n    \"\"\"\n    ret = [sint(0) for i in range(5)]  # Initialize an array of 5 secret integers with value 0\n    for i in range(min(5, len(arr))):\n        ret[4 - i] = arr[len(arr) - 1 - i]\n    return ret\n", "response_1": "def cut_last_five(arr: Array):\n    \"\"\"\n    Return the array composed of the last 5 elements of the input array. \n    If the input array does not have 5 elements, pad with 0 (at the beginning).\n    \"\"\"\n    ret = Array(5, sint)\n    for i in range(5):\n        ret[i] = sint(0)\n    \n    for i in range(min(5, len(arr))):\n        ret[4 - i] = arr[len(arr) - 1 - i]\n    \n    return ret\n", "model_name": "deepseek-v2.5"}
{"test_name": "average_pooling_1d", "response_0": "def average_pooling_1d(vec, step):\n    \"\"\"\n    Do 1-dimensional average pooling on vec with step. \n    Ignoring the remaining elements in the vector.\n    \"\"\"\n    ret_length = len(vec) // step\n    ret = Array(ret_length, sint)\n    for i in range(ret_length):\n        avg = sint(0)\n        for j in range(step):\n            avg = avg + vec[i * step + j] / step\n        ret[i] = avg\n    return ret\n", "response_1": "def average_pooling_1d(vec, step):\n    \"\"\"\n    Do 1-dimensional average pooling on vec with step. \n    Ignoring the remaining elements in the vector.\n    \"\"\"\n    ret_length = len(vec) // step\n    ret = sfix.Array(ret_length)  # Initialize an array of fixed-point numbers\n    for i in range(ret_length):\n        avg = sfix(0)  # Initialize a fixed-point number\n        for j in range(step):\n            avg += vec[i * step + j] / sfix(step)  # Perform secure division\n        ret[i] = avg\n    return ret\n", "model_name": "deepseek-v2.5"}
{"test_name": "array_relu", "response_0": "def array_relu(arr):\n    \"\"\"\n    Apply ReLU function elementwisely to the input array.\n    \"\"\"\n    ret = sfix.Array(len(arr))\n    for i in range(len(arr)):\n        ret[i] = arr[i] if arr[i] >= 0 else 0\n    return ret\n", "response_1": "def array_relu(arr):\n    \"\"\"\n    Apply ReLU function elementwisely to the input array.\n    \"\"\"\n    ret = Array(len(arr), sint)\n    for i in range(len(arr)):\n        ret[i] = arr[i].if_else(arr[i], 0)\n    return ret\n", "model_name": "deepseek-v2.5"}
{"test_name": "move_to_end", "response_0": "def move_to_end(arr, index):\n    \"\"\"\n    Move the element with given index in the array to the end of the array.\n    The index is guaranteed to be legal.\n    \"\"\"\n    n = len(arr)\n    temp = arr[index]\n    for i in range(index, n-1):\n        arr[i] = arr[i+1]\n    arr[n-1] = temp\n    return arr\n\n# Example usage in MP-SPDZ\n# arr = Array(5, sint)  # Example array with 5 elements of secret integers\n# index = sint(2)       # Example index\n# result = move_to_end(arr, index)\n", "response_1": "def move_to_end(arr, index):\n    \"\"\"\n    Move the element with given index in the array to the end of the array.\n    The index is guaranteed to be legal.\n    \"\"\"\n    n = len(arr)\n    temp = arr[index]\n    for i in range(index, n-1):\n        arr[i] = arr[i+1]\n    arr[n-1] = temp\n    return arr\n\n# Example usage in MP-SPDZ\n# arr = Array(n, sint)  # Assuming arr is an array of secret integers\n# index = sint(some_index)  # Assuming index is a secret integer\n# result = move_to_end(arr, index)\n", "model_name": "deepseek-v2.5"}
{"test_name": "set_to_zero", "response_0": "def set_to_zero(arr, index):\n    \"\"\"\n    Set the element in the input array with given index to zero.\n    The input index is guaranteed to be legal. \n    \"\"\"\n    arr[index] = sint(0)  # Set the element at the given index to zero\n    return arr\n", "response_1": "def set_to_zero(arr, index):\n    \"\"\"\n    Set the element in the input array with given index to zero.\n    The input index is guaranteed to be legal. \n    \"\"\"\n    arr[index] = sint(0)\n    return arr\n", "model_name": "deepseek-v2.5"}
{"test_name": "last_partial_sum", "response_0": "arr = Array(10, sint)  # Example array with 10 secret integers\nn = sint(3)  # Example n value\nresult = last_partial_sum(arr, n)\n", "response_1": "def last_partial_sum(arr, n):\n    \"\"\"\n    Return the sum of the last n elements in the input array.\n    n is guaranteed to be legal.\n    \"\"\"\n    ret = sint(0)\n    for i in range(len(arr) - n, len(arr)):\n        ret = ret + arr[i]\n    return ret\n", "model_name": "deepseek-v2.5"}
{"test_name": "permute_by_indices", "response_0": "def permute_by_indices(a, indices):\n    \"\"\"\n    Permute the input array a by the indices. \n    The i'th element in the returned array will be a[indices[i]]. \n    The input indices are guaranteed to be a legal permutation. \n    \"\"\"\n    n = len(a)\n    ret = Array(n, sint)\n    for i in range(n):\n        ret[i] = a[indices[i]]\n    return ret\n", "response_1": "def permute_by_indices(a, indices):\n    \"\"\"\n    Permute the input array a by the indices. \n    The i'th element in the returned array will be a[indices[i]]. \n    The input indices are guaranteed to be a legal permutation. \n    \"\"\"\n    n = len(a)\n    ret = Array(n, sint)\n    for i in range(n):\n        ret[i] = a[indices[i]]\n    return ret\n", "model_name": "deepseek-v2.5"}
{"test_name": "get_rank", "response_0": "def get_rank(arr, index):\n    \"\"\"\n    Get the rank in the array of the element (how many elements are smaller than the element) with given index.\n    \"\"\"\n    rank = sfix(0)\n    for item in arr:\n        comparison = item < arr[index]\n        rank = rank + comparison\n    return rank\n", "response_1": "from Compiler import mpc_math\n\ndef get_rank(arr, index):\n    \"\"\"\n    Get the rank in the array of the element (how many elements are smaller than the element) with given index. \n    \"\"\"\n    rank = sint(0)\n    target = arr[index]\n    for item in arr:\n        is_smaller = item < target\n        rank = rank + is_smaller\n    return rank\n", "model_name": "deepseek-v2.5"}
{"test_name": "interchange_by_indices", "response_0": "def interchange_by_indices(arr, index1, index2):\n    temp = arr[index1]\n    arr[index1] = arr[index2]\n    arr[index2] = temp\n    return arr\n", "response_1": "def interchange_by_indices(arr, index1, index2):\n    \"\"\"\n    Interchange the two elements in the array with given indices. \n    The input indices are guaranteed to be legal. \n    \"\"\"\n    temp = arr[index1]\n    arr[index1] = arr[index2]\n    arr[index2] = temp\n    return arr\n", "model_name": "deepseek-v2.5"}
{"test_name": "increase_by", "response_0": "def increase_by(arr, index, k):\n    \"\"\"\n    Increase the element arr[index] in the array arr by k.\n    \"\"\"\n    arr[index] = arr[index] + k\n    return arr\n\n# Example usage in MP-SPDZ\n# Assuming arr is a secret integer array and k is a secret integer\ndef main():\n    # Example array with 5 elements\n    arr = Array(5, sint)\n    arr = arr.alloc_slots(5)\n\n    # Example index and k\n    index = sint(2)  # Example index\n    k = sint(10)  # Example value to increase by\n\n    # Increase the element at the given index by k\n    arr = increase_by(arr, index, k)\n\n    # Output the result (for demonstration purposes)\n    print_ln(\"The updated array is: %s\", arr.reveal())\n", "response_1": "from Compiler import types\n\nprogram = types.Program()\n\n@types.vectorize\ndef increase_by(arr: Array[sint], index: sint, k: sint) -> Array[sint]:\n    arr[index] = arr[index] + k\n    return arr\n\n# Example usage\narr = Array(10, sint)\nindex = sint(5)\nk = sint(10)\n\narr = increase_by(arr, index, k)\n", "model_name": "deepseek-v2.5"}
{"test_name": "retrieve_by_index", "response_0": "def retrieve_by_index(arr, index):\n    \"\"\"\n    Retrieve the element in the array by index.\n    The input index is guaranteed to be legal.\n    \"\"\"\n    return arr[index]\n", "response_1": "def retrieve_by_index(arr, index):\n    \"\"\"\n    Retrieve the element in the array by index.\n    The input index is guaranteed to be legal.\n    \"\"\"\n    return arr[index]\n", "model_name": "deepseek-v2.5"}
{"test_name": "scale_by", "response_0": "def scale_by(arr, index, k):\n    \"\"\"\n    Multiply the element arr[index] in the array arr by k.\n    \"\"\"\n    arr[index] = arr[index] * k\n    return arr\n\n# Example usage in MP-SPDZ\n# Assuming arr and k are already defined as MP-SPDZ arrays and values\n# arr = Array(n, sfix)  # Array of size n with secret-shared fixed-point numbers\n# k = sfix(some_value)  # Secret-shared fixed-point number\n\n# Call the function\nresult_arr = scale_by(arr, index, k)\n", "response_1": "from Compiler import types\n\ndef scale_by(arr: types.Array, index: int, k: types.sint):\n    \"\"\"\n    Multiply the element arr[index] in the array arr by k.\n    \"\"\"\n    arr[index] = arr[index].mul(k)\n    return arr\n", "model_name": "deepseek-v2.5"}
{"test_name": "take_opposite_to", "response_0": "def take_opposite_to(arr, index):\n    \"\"\"\n    Take opposite to the element in the array with given index. \n    The input index is guaranteed to be legal. \n    \"\"\"\n    arr[index] = -arr[index]\n    return arr\n\n# Example usage in MP-SPDZ program\nn = 5\narr = Array(n, sint)\n# Initialize arr with some values (omitted for brevity)\nindex = 2  # Example index\nresult = take_opposite_to(arr, index)\n", "response_1": "from Compiler import types\n\ndef take_opposite_to(arr: types.sint, index: types.cint) -> types.sint:\n    \"\"\"\n    Take opposite to the element in the array with given index. \n    The input index is guaranteed to be legal. \n    \"\"\"\n    arr[index] = -arr[index]\n    return arr\n\n# Example usage in a main program\ndef main():\n    n = 5\n    arr = types.sint.Array(n)\n    index = types.cint(2)  # Example index\n    \n    # Initialize the array with some values\n    for i in range(n):\n        arr[i] = types.sint(i + 1)\n    \n    # Apply the function\n    result = take_opposite_to(arr, index)\n    \n    # Output the result\n    for i in range(n):\n        print_ln(\"%s\", result[i].reveal())\n\n", "model_name": "deepseek-v2.5"}
{"test_name": "array_rank", "response_0": "def array_rank(l):\n    \"\"\"\n    Return an array with the same size of the original array, \n    each position of which records the number of elements smaller than the element at the same position. \n    \"\"\"\n    n = len(l)\n    ret = [sint(0) for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            condition = l[j] < l[i]\n            ret[i] = ret[i] + condition\n    return ret\n", "response_1": "def array_rank(l):\n    \"\"\"\n    Return an array with the same size of the original array, \n    each position of which records the number of elements smaller than the element at the same position. \n    \"\"\"\n    n = len(l)\n    ret = Array(n, sint)\n    for i in range(n):\n        ret[i] = 0\n        for j in range(n):\n            ret[i] = ret[i] + (l[j] < l[i])\n    return ret\n", "model_name": "deepseek-v2.5"}
{"test_name": "remove_by_index", "response_0": "def remove_by_index(arr : Array[int], index : int) -> Array[int]:\n    \"\"\"\n    Remove the element in the array by index and return the remaining array. \n    The input index is guaranteed to be legal. \n    \"\"\"\n    n = len(arr)\n    ret = Array(n - 1, sint)\n    for i in range(n - 1):\n        if i < index:\n            ret[i] = arr[i]\n        else:\n            ret[i] = arr[i + 1]\n    return ret\n", "response_1": "def remove_by_index(arr, index):\n    \"\"\"\n    Remove the element in the array by index and return the remaining array. \n    The input index is guaranteed to be legal. \n    \"\"\"\n    n = len(arr)\n    ret = Array(n-1, sint)\n    for i in range(n-1):\n        if i < index:\n            ret[i] = arr[i]\n        else:\n            ret[i] = arr[i+1]\n    return ret\n", "model_name": "deepseek-v2.5"}
{"test_name": "process_by_index", "response_0": "def process_by_index(arr, index, func):\n    \"\"\"\n    Process the element in the input array with given index.\n    The input index is guaranteed to be legal.\n    \"\"\"\n    arr[index] = func(arr[index])\n    return arr\n\n# Example usage in MP-SPDZ\n# Define the function to be applied\ndef my_func(x):\n    return x * x\n\n# Example array and index\narr = sint.Array(10)  # Example array of size 10\nindex = cint(3)  # Example index\n\n# Process the array\nresult = process_by_index(arr, index, my_func)\n", "response_1": "# MP-SPDZ program\n\n# Define the function to process the array element\ndef process_by_index(arr, index, func):\n    \"\"\"\n    Process the element in the input array with given index.\n    The input index is guaranteed to be legal.\n    \"\"\"\n    # Apply the function to the element at the given index\n    arr[index] = func(arr[index])\n    return arr\n\n# Example usage in MP-SPDZ\n# Assuming arr is an array of sint or sfix and index is an integer\n# func is a function that operates on sint or sfix elements\n\n# Example function to apply (e.g., doubling the value)\ndef double(x):\n    return x * 2\n\n# Example array and index\narr = Array(10, sint)  # Array of 10 sint elements\nindex = 3  # Example index\n\n# Process the element at the given index\nresult_arr = process_by_index(arr, index, double)\n", "model_name": "deepseek-v2.5"}
{"test_name": "sum_by_indices", "response_0": "from Compiler import types\n\ndef main():\n    # Example array and indices\n    arr = Array(5, sfix)\n    indices = Array(3, sint)\n    \n    # Assign values to arr and indices (this would be done in the actual program)\n    arr[0] = sfix(1.0)\n    arr[1] = sfix(2.0)\n    arr[2] = sfix(3.0)\n    arr[3] = sfix(4.0)\n    arr[4] = sfix(5.0)\n    \n    indices[0] = sint(0)\n    indices[1] = sint(2)\n    indices[2] = sint(4)\n    \n    # Compute the sum\n    result = sum_by_indices(arr, indices)\n    \n    # Output the result\n    print_ln(\"The sum is: %s\", result.reveal())\n", "response_1": "def sum_by_indices(arr, indices):\n    \"\"\"\n    Compute the sum of elements in the array with given indices.\n    The input indices are guaranteed to be legal.\n    \"\"\"\n    sum = sfix(0)  # Initialize sum as a fixed-point number\n    for index in indices:\n        sum = sum + arr[index]\n    return sum\n", "model_name": "deepseek-v2.5"}
