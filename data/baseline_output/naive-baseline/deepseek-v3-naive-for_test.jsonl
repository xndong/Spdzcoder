{"test_name": "multiply_first_five", "response_0": "def multiply_first_five(array):\n    \"\"\"\n    Multiply the first five elements in the array (if len(array)<5 then multiply all)\n    \"\"\"\n    prod = sint(1)  # Initialize the product as a secret integer\n    for i in range(len(array)):\n        prod *= array[i]\n        if i >= 4:\n            break\n    return prod\n", "response_1": "def multiply_first_five(array):\n    \"\"\"\n    Multiply the first five elements in the array (if len(array)<5 then multiply all)\n    \"\"\"\n    prod = 1\n    for i in range(len(array)):\n        prod *= array[i]\n        if i >= 4:\n            break\n    return prod\n", "model_name": "deepseek-v3"}
{"test_name": "second_largest", "response_0": "def second_largest(arr):\n    \"\"\"\n    Return the second largest element in the array.\n    \"\"\"\n    # Initialize largest and second largest\n    largest = if_else(arr[0] >= arr[1], arr[0], arr[1])\n    second = if_else(arr[0] >= arr[1], arr[1], arr[0])\n    \n    # Iterate through the array to find the second largest\n    for i in range(len(arr)):\n        if i > 1:\n            new_largest = if_else(arr[i] >= largest, arr[i], largest)\n            new_second = if_else(arr[i] >= largest, largest, if_else(arr[i] >= second, arr[i], second))\n            largest = new_largest\n            second = new_second\n    \n    return second\n", "response_1": "def second_largest(arr):\n    \"\"\"\n    Return the second largest element in the array.\n    \"\"\"\n    # Initialize the largest and second largest elements\n    largest = if_else(arr[0] >= arr[1], arr[0], arr[1])\n    second = if_else(arr[0] >= arr[1], arr[1], arr[0])\n\n    # Iterate through the array to find the second largest element\n    for i in range(len(arr)):\n        if i > 1:\n            # Update the largest and second largest elements\n            largest_new = if_else(arr[i] >= largest, arr[i], largest)\n            second_new = if_else(arr[i] >= largest, largest, \n                                 if_else(arr[i] >= second, arr[i], second))\n            largest = largest_new\n            second = second_new\n    \n    return second\n", "model_name": "deepseek-v3"}
{"test_name": "partial_sum", "response_0": "def partial_sum(arr):\n    \"\"\"\n    Compute the partial sum of the array.\n    \"\"\"\n    partial = sfix(0)\n    for i in range(len(arr)):\n        partial = partial + arr[i]\n        arr[i] = partial\n    return arr\n", "response_1": "def partial_sum(arr):\n    \"\"\"\n    Compute the partial sum of the array in MP-SPDZ.\n    \"\"\"\n    partial = sfix(0)\n    for i in range(len(arr)):\n        partial = partial + arr[i]\n        arr[i] = partial\n    return arr\n", "model_name": "deepseek-v3"}
{"test_name": "max_adjacent_product", "response_0": "def max_adjacent_product(arr):\n    \"\"\"\n    Return the max product of adjacent elements in the array.\n    The input array is guaranteed to have length at least 2.\n    \"\"\"\n    # Initialize the current maximum product\n    cur = arr[0] * arr[1]\n    \n    # Iterate through the array to find the maximum product\n    for i in range(len(arr) - 1):\n        product = arr[i] * arr[i + 1]\n        cur = if_else(product > cur, product, cur)\n    \n    return cur\n", "response_1": "def max_adjacent_product(arr):\n    \"\"\"\n    Return the max product of adjacent elements in the array.\n    The input array is guaranteed to have length at least 2.\n    \"\"\"\n    cur = arr[0] * arr[1]\n    for i in range(len(arr) - 1):\n        product = arr[i] * arr[i + 1]\n        if product > cur:\n            cur = product\n    return cur\n", "model_name": "deepseek-v3"}
{"test_name": "argmax", "response_0": "def argmax(a):\n    \"\"\"\n    Return the index of the max value of an array.\n    \"\"\"\n    current = a[0]\n    index = 0\n    for i in range(1, len(a)):\n        if a[i] > current:\n            current = a[i]\n            index = i\n    return index\n", "response_1": "def argmax(a):\n    \"\"\"\n    Return the index of the max value of an array.\n    \"\"\"\n    current = a[0]\n    index = 0\n    for i in range(len(a)):\n        cmp = current >= a[i]\n        index = mux(cmp, index, i)\n        current = mux(cmp, current, a[i])\n    return index\n", "model_name": "deepseek-v3"}
{"test_name": "count_distinct", "response_0": "def count_distinct(arr):\n    \"\"\"\n    Return the number of distinct values in the array.\n    \"\"\"\n    counter = 0\n    n = len(arr)\n    for i in range(n):\n        unique = True\n        for j in range(i):\n            eq = arr[j] == arr[i]\n            unique = unique * (1 - eq)\n        counter = counter + unique\n    return counter\n", "response_1": "def count_distinct(arr):\n    \"\"\"\n    Return the number of distinct values in the array.\n    \"\"\"\n    counter = sint(0)  # Initialize counter as a secret integer\n    n = len(arr)  # Get the length of the array\n\n    for i in range(n):\n        unique = sint(1)  # Assume the current element is unique\n        for j in range(i):\n            # Check if arr[j] equals arr[i]\n            if arr[j] == arr[i]:\n                unique = sint(0)  # Mark as not unique\n        # If the element is unique, increment the counter\n        counter = counter + unique\n\n    return counter\n", "model_name": "deepseek-v3"}
{"test_name": "exists_true", "response_0": "def exists_true(arr):\n    \"\"\"\n    Check whether the boolean array contains a True.\n    \"\"\"\n    ret = sbool(False)\n    for item in arr:\n        ret = ret or item\n    return ret\n", "response_1": "def exists_true(arr):\n    \"\"\"\n    Check whether the boolean array contains a True.\n    \"\"\"\n    ret = sbool(False)\n    for item in arr:\n        ret = ret or item\n    return ret\n", "model_name": "deepseek-v3"}
{"test_name": "range", "response_0": "def range(arr):\n    \"\"\"\n    Return the range of the array.\n    \"\"\"\n    max_value = arr[0]\n    min_value = arr[0]\n    \n    for i in range(len(arr)):\n        max_value = max(max_value, arr[i])\n        min_value = min(min_value, arr[i])\n    \n    return max_value - min_value\n", "response_1": "def range(arr):\n    \"\"\"\n    Return the range of the array.\n    \"\"\"\n    max_value = arr[0]\n    min_value = arr[0]\n    for item in arr:\n        max_value = max(max_value, item)\n        min_value = min(min_value, item)\n    return max_value - min_value\n", "model_name": "deepseek-v3"}
{"test_name": "count_larger_than_5", "response_0": "def count_larger_than_5(arr):\n    \"\"\"\n    Count the number of elements in the given array larger than 5.\n    \"\"\"\n    counter = sint(0)\n    for item in arr:\n        comparison = item > 5\n        counter = counter + comparison\n    return counter\n", "response_1": "def count_larger_than_5(arr):\n    \"\"\"\n    Count the number of elements in the given array larger than 5.\n    \"\"\"\n    counter = sint(0)\n    for item in arr:\n        comparison = item > 5\n        counter = counter + comparison\n    return counter\n", "model_name": "deepseek-v3"}
{"test_name": "exists_dominator", "response_0": "def exists_dominator(arr):\n    \"\"\"\n    Check whether there exists a dominator in the given array,\n    whose absolute value is strictly larger than the sum of the absolute values of all other elements.\n    \"\"\"\n    max_val = sint(0)\n    total_sum = sint(0)\n    \n    for item in arr:\n        abs_item = abs(item)\n        max_val = if_else(abs_item > max_val, abs_item, max_val)\n        total_sum = total_sum + abs_item\n    \n    return 2 * max_val > total_sum\n", "response_1": "def exists_dominator(arr):\n    \"\"\"\n    Check whether there exists a dominator in the given array, \n    whose absolute value is strictly larger than the sum of the absolute values of all other elements.\n    \"\"\"\n    # Initialize variables for max and sum\n    max_val = sfix(0)\n    total_sum = sfix(0)\n    \n    # Iterate over the array to find the maximum absolute value and the total sum\n    for item in arr:\n        abs_item = abs(item)\n        max_val = if_else(abs_item > max_val, abs_item, max_val)\n        total_sum = total_sum + abs_item\n    \n    # Check if twice the maximum value is greater than the total sum\n    return 2 * max_val > total_sum\n", "model_name": "deepseek-v3"}
{"test_name": "greedy_picker", "response_0": "from Compiler import types\n\ndef greedy_picker(items, captivity):\n    \"\"\"\n    There is a greedy picker with a bag picking items. \n    Once the picker sees an item that his bag has space for, he will pick up the item (which will take some space) and put it into his bag. \n    You should compute how many items the greedy picker can finally get with the greedy strategy. \n    \"\"\"\n    num = types.sint(0)\n    captivity = types.sint(captivity)\n    \n    for item in items:\n        item = types.sint(item)\n        can_pick = item <= captivity\n        captivity = captivity - item * can_pick\n        num = num + can_pick\n    \n    return num\n", "response_1": "from Compiler.library import *\n\ndef greedy_picker(items, captivity):\n    \"\"\"\n    There is a greedy picker with a bag picking items. \n    Once the picker sees an item that his bag has space for, he will pick up the item (which will take some space) and put it into his bag. \n    You should compute how many items the greedy picker can finally get with the greedy strategy. \n    \"\"\"\n    num = sint(0)\n    captivity = sint(captivity)\n    \n    @for_range(len(items))\n    def _(i):\n        item = sint(items[i])\n        condition = item <= captivity\n        captivity.update(if_else(condition, captivity - item, captivity))\n        num.update(if_else(condition, num + 1, num))\n    \n    return num\n", "model_name": "deepseek-v3"}
{"test_name": "scalar_add_array", "response_0": "def scalar_add_array(s, l):\n    \"\"\"\n    Add all the elements in the array to the scalar and return the result.\n    s: scalar value\n    l: array of values\n    \"\"\"\n    for item in l:\n        s = s + item\n    return s\n", "response_1": "def scalar_add_array(s, l):\n    \"\"\"\n    Add all the elements in the array to the scalar and return the result.\n    \"\"\"\n    result = s\n    for item in l:\n        result = result + item\n    return result\n", "model_name": "deepseek-v3"}
{"test_name": "is_equidistant_seq", "response_0": "def is_equidistant_seq(arr):\n    \"\"\"\n    Return whether or not the array is an equidistant sequence. \n    If the array has length 1 or 0, return True.\n    \"\"\"\n    n = len(arr)\n    if n <= 1:\n        return True\n    \n    d = arr[1] - arr[0]\n    for i in range(1, n-1):\n        if arr[i+1] - arr[i] != d:\n            return False\n    return True\n", "response_1": "def is_equidistant_seq(arr):\n    \"\"\"\n    Return whether or not the array is an equidistant sequence.\n    If the array has length 1 or 0, return True.\n    \"\"\"\n    n = len(arr)\n    if n <= 1:\n        return True\n    d = sfix(0)\n    for i in range(n-1):\n        if i > 0 and (arr[i+1] - arr[i]) != d:\n            return False\n        d = arr[i+1] - arr[i]\n    return True\n", "model_name": "deepseek-v3"}
{"test_name": "inner_product", "response_0": "def inner_product(vec1, vec2):\n    \"\"\"\n    Compute the inner product of the two arrays.\n    \"\"\"\n    sum = sfix(0)\n    for i in range(len(vec1)):\n        sum = sum + vec1[i] * vec2[i]\n    return sum\n", "response_1": "def inner_product(vec1, vec2):\n    \"\"\"\n    Compute the inner product of the two arrays.\n    \"\"\"\n    sum = sfix(0)\n    for i in range(len(vec1)):\n        sum = sum + vec1[i] * vec2[i]\n    return sum\n", "model_name": "deepseek-v3"}
{"test_name": "more_distinct_nonnegative", "response_0": "def more_distinct_nonnegative(arr):\n    \"\"\"\n    Return whether the array has more distinct nonnegative elements than distinct negative elements.\n    \"\"\"\n    nonnegative_counter = sint(0)\n    negative_counter = sint(0)\n    n = len(arr)\n    \n    for i in range(n):\n        unique = sint(1)\n        for j in range(i):\n            unique = unique * (arr[j] != arr[i])\n        nonnegative_counter = nonnegative_counter + (arr[i] >= 0) * unique\n        negative_counter = negative_counter + (arr[i] < 0) * unique\n    \n    return nonnegative_counter > negative_counter\n", "response_1": "def more_distinct_nonnegative(arr):\n    \"\"\"\n    Return whether the array has more distinct nonnegative elements than distinct negative elements.\n    \"\"\"\n    nonnegative_counter = sint(0)\n    negative_counter = sint(0)\n    \n    for i in range(len(arr)):\n        unique = sint(1)\n        for j in range(i):\n            unique = unique * (arr[j] != arr[i])\n        \n        nonnegative_counter = nonnegative_counter + (unique * (arr[i] >= 0))\n        negative_counter = negative_counter + (unique * (arr[i] < 0))\n    \n    return nonnegative_counter > negative_counter\n", "model_name": "deepseek-v3"}
{"test_name": "flip_positives", "response_0": "def flip_positives(array):\n    \"\"\"\n    Flip the positive elements in the array\n    \"\"\"\n    for i in range(len(array)):\n        # Check if the element is positive\n        is_positive = array[i] > 0\n        # If positive, flip the sign\n        array[i] = array[i] * (-1) * is_positive + array[i] * (1 - is_positive)\n    return array\n", "response_1": "def flip_positives(array):\n    \"\"\"\n    Flip the positive elements in the array\n    \"\"\"\n    for i in range(len(array)):\n        if array[i] <= 0:\n            continue\n        array[i] = -array[i]\n    return array\n", "model_name": "deepseek-v3"}
{"test_name": "divide_and_plus", "response_0": "program divide_and_plus:\n    # Input: x (secret integer)\n    # Output: result after applying the operations\n\n    # Initialize the input\n    x = sint.get_input_from(0)\n\n    # Repeat the operations 4 times\n    for i in range(4):\n        x = x / 2  # Divide by 2\n        x = x + 1  # Add 1\n\n    # Output the result\n    print_ln(\"Result: %s\", x.reveal())\n", "response_1": "def divide_and_plus(x):\n    \"\"\"\n    Repeat the following to the input for 4 times:\n    divide by 2, then plus 1\n    \"\"\"\n    for i in range(4):\n        x = x / 2\n        x = x + 1\n    return x\n", "model_name": "deepseek-v3"}
{"test_name": "array_log2", "response_0": "from Compiler.library import *\nfrom Compiler.types import *\n\ndef array_log2(arr):\n    \"\"\"\n    Take logarithm with base two to all elements in the input array.\n    \"\"\"\n    log2_approx = lambda x: sfix.log2(x)\n    result = Array(len(arr), sfix)\n    \n    for i in range(len(arr)):\n        result[i] = log2_approx(arr[i])\n    \n    return result\n", "response_1": "def array_log2(arr):\n    \"\"\"\n    Take logarithm with base two to all elements in the input array.\n    \"\"\"\n    for i in range(len(arr)):\n        arr[i] = log2(arr[i])\n    return arr\n", "model_name": "deepseek-v3"}
{"test_name": "sum_to_ten", "response_0": "from Compiler.library import *\nfrom Compiler.types import *\n\ndef sum_to_ten(array):\n    \"\"\"\n    Compute partial sum of the array until the sum becomes no smaller than 10.\n    \"\"\"\n    sum = sint(0)\n    for i in range(len(array)):\n        sum = sum + array[i]\n        break_if(sum >= 10)\n    return sum\n", "response_1": "from Compiler.types import sfix\nfrom Compiler.library import if_, break_loop\n\ndef sum_to_ten(array):\n    \"\"\"\n    Compute partial sum of the array until the sum becomes no smaller than 10.\n    \"\"\"\n    sum = sfix(0)\n    for i in range(len(array)):\n        sum += array[i]\n        @if_(sum >= 10)\n        def _():\n            break_loop()\n    return sum\n", "model_name": "deepseek-v3"}
{"test_name": "choppy_plus_minus", "response_0": "def choppy_plus_minus(arr):\n    \"\"\"\n    Return the array with the following modification of the input array:\n    For the element with odd index, increment the element by 1, \n    for the element with even index, decrement the element by 1. \n    \"\"\"\n    for i in range(len(arr)):\n        if i % 2 == 1:\n            arr[i] = arr[i] + 1\n        else:\n            arr[i] = arr[i] - 1\n    return arr\n", "response_1": "def choppy_plus_minus(arr):\n    \"\"\"\n    Return the array with the following modification of the input array:\n    For the element with odd index, increment the element by 1, \n    for the element with even index, decrement the element by 1. \n    \"\"\"\n    for i in range(len(arr)):\n        if i % 2 == 1:\n            arr[i] = arr[i] + 1\n        else:\n            arr[i] = arr[i] - 1\n    return arr\n", "model_name": "deepseek-v3"}
{"test_name": "min_element", "response_0": "def min_element(a):\n    \"\"\"\n    Return the min value of an array.\n    \"\"\"\n    current = a[0]\n    for i in range(len(a)):\n        current = if_else(current <= a[i], current, a[i])\n    \n    return current\n", "response_1": "def min_element(a):\n    \"\"\"\n    Return the min value of an array.\n    \"\"\"\n    current = a[0]\n    for i in range(1, len(a)):\n        current = if_else(current <= a[i], current, a[i])\n    \n    return current\n", "model_name": "deepseek-v3"}
{"test_name": "soft_max", "response_0": "def soft_max(arr):\n    \"\"\"\n    Return the array of soft-max of the input array.\n    \"\"\"\n    # Initialize the denominator to 0\n    denominator = sfix(0)\n    \n    # Calculate the denominator\n    for item in arr:\n        denominator = denominator + sfix(math.e) ** item\n    \n    # Initialize the result array\n    brr = Array(len(arr), sfix)\n    \n    # Calculate the soft-max for each element\n    for i in range(len(arr)):\n        brr[i] = (sfix(math.e) ** arr[i]) / denominator\n    \n    return brr\n", "response_1": "from Compiler import types\n\ndef soft_max(arr):\n    \"\"\"\n    Return the array of soft-max of the input array.\n    \"\"\"\n    # Initialize the denominator as a sfloat (secret float)\n    denominator = types.sfloat(0)\n    \n    # Compute the sum of e^arr[i] for each element in arr\n    for item in arr:\n        denominator += types.sfloat(math.e) ** item\n    \n    # Initialize the result array\n    brr = types.Array(len(arr), types.sfloat)\n    \n    # Compute the soft-max for each element\n    for i in range(len(arr)):\n        brr[i] = (types.sfloat(math.e) ** arr[i]) / denominator\n    \n    return brr\n", "model_name": "deepseek-v3"}
{"test_name": "count_reverse_pair_with_break", "response_0": "def count_reverse_pair_with_break(arr):\n    \"\"\"\n    Count the number of reverse pairs before we find an element bigger than 10\n    \"\"\"\n    count = sint(0)  # Initialize count as a secret integer\n    n = len(arr)\n    \n    for i in range(1, n):\n        # Check if arr[i] > 10\n        break_condition = arr[i] > 10\n        if break_condition.reveal():  # Reveal the condition to check if we should break\n            break\n        \n        for j in range(i):\n            # Check if arr[j] > arr[i]\n            reverse_pair_condition = arr[j] > arr[i]\n            count += reverse_pair_condition.if_else(sint(1), sint(0))  # Increment count if condition is true\n    \n    return count\n", "response_1": "program count_reverse_pair_with_break:\n    # Define the function to count reverse pairs\n    def count_reverse_pair_with_break(arr):\n        \"\"\"\n        Count the number of reverse pairs before we find an element bigger than 10\n        \"\"\"\n        count = 0\n        n = len(arr)\n        for i in range(1, n):\n            if arr[i] > 10:\n                break\n            for j in range(i):\n                if arr[j] > arr[i]:\n                    count += 1\n        return count\n\n    # Example usage (not part of the program, just for illustration)\n    # arr = [5, 3, 8, 12, 7]\n    # result = count_reverse_pair_with_break(arr)\n    # print_ln(\"Number of reverse pairs: %s\", result)\n", "model_name": "deepseek-v3"}
{"test_name": "sum_unique", "response_0": "program sum_unique(arr):\n    # Initialize the sum to 0\n    sum = sint(0)\n    # Iterate over the array\n    for i in range(len(arr)):\n        unique = sint(1)  # Assume the element is unique initially\n        for j in range(len(arr)):\n            if arr[j] == arr[i] and j != i:\n                unique = sint(0)  # Mark as not unique\n                break\n        # Add to sum if the element is unique\n        sum = sum + (unique * arr[i])\n    return sum\n", "response_1": "def sum_unique(arr):\n    \"\"\"\n    Return the sum of unique elements in the array.\n    \"\"\"\n    sum = sfix(0)\n    for i in range(len(arr)):\n        unique = True\n        for j in range(len(arr)):\n            if arr[j] == arr[i] and j != i:\n                unique = False\n                break\n        if unique:\n            sum = sum + arr[i]\n    return sum\n", "model_name": "deepseek-v3"}
{"test_name": "check_sum", "response_0": "def check_sum(array, target):\n    \"\"\"\n    Check whether the sum of the array equals the target value.\n    \"\"\"\n    sum = sfix(0)\n    for num in array:\n        sum = sum + num\n    return sum == target\n", "response_1": "def check_sum(array, target):\n    \"\"\"\n    Check whether the sum of the array equals the target value.\n    \"\"\"\n    sum = 0\n    for num in array:\n        sum = sum + num\n    return sum == target\n", "model_name": "deepseek-v3"}
{"test_name": "prod", "response_0": "def prod(array):\n    \"\"\"\n    Multiply together all elements in the array.\n    \"\"\"\n    prod = sint(1)  # Initialize the product as a secret integer with value 1\n    for num in array:\n        prod = prod * num  # Multiply each element in the array with the current product\n    return prod\n", "response_1": "def prod(array):\n    \"\"\"\n    Multiply together all elements in the array.\n    \"\"\"\n    prod = 1\n    for num in array:\n        prod = prod * num\n    return prod\n", "model_name": "deepseek-v3"}
{"test_name": "sum_till_negative", "response_0": "def sum_till_negative(array):\n    \"\"\"\n    Sum from the first element in the array until a negative one occurs\n    \"\"\"\n    sum = sfix(0)\n    for i in range(len(array)):\n        if array[i] < sfix(0):\n            break\n        sum += array[i]\n    return sum\n", "response_1": "def sum_till_negative(array):\n    \"\"\"\n    Sum from the first element in the array until a negative one occurs\n    \"\"\"\n    sum = sint(0)\n    i = regint(0)\n    n = len(array)\n    \n    while i < n:\n        if array[i] < 0:\n            break\n        sum += array[i]\n        i += 1\n    \n    return sum\n", "model_name": "deepseek-v3"}
{"test_name": "count_satisfied", "response_0": "def count_satisfied(arr, predicator):\n    \"\"\"\n    Count the number of elements in the array that satisfy the predicator.\n    \"\"\"\n    sum = sfix(0)  # Initialize the sum as a secret-shared fixed-point number\n    for i in range(len(arr)):\n        condition = predicator(arr[i])  # Evaluate the predicator on the element\n        sum = sum + condition  # Add 1 to the sum if the condition is true\n    return sum\n", "response_1": "def count_satisfied(arr, predicator):\n    \"\"\"\n    Count the number of elements in the array that satisfy the predicator.\n    \"\"\"\n    sum = sfix(0)  # Initialize sum as a secure fixed-point number\n    for i in range(len(arr)):\n        # Apply the predicator to the current element\n        condition = predicator(arr[i])\n        # Convert the condition to a secure integer (0 or 1)\n        condition_int = condition.if_else(sfix(1), sfix(0))\n        # Add the condition to the sum\n        sum = sum + condition_int\n    return sum\n", "model_name": "deepseek-v3"}
{"test_name": "standard_deviation", "response_0": "from util import if_else\nfrom Compiler.library import print_ln\nfrom Compiler.types import Array, sfix, sint, cint\n\ndef standard_deviation(arr):\n    \"\"\"\n    Return the standard deviation of the array.\n    \"\"\"\n    n = len(arr)\n    average = sfix(0)\n    variance = sfix(0)\n    \n    # Calculate the average\n    for item in arr:\n        average = average + item / n\n    \n    # Calculate the variance\n    for item in arr:\n        variance = variance + (item - average) ** 2 / n\n    \n    # Return the standard deviation\n    return variance.sqrt()\n\n# Example usage (not part of the function)\n# arr = Array(5, sfix)\n# arr.assign([sfix(1), sfix(2), sfix(3), sfix(4), sfix(5)])\n# std_dev = standard_deviation(arr)\n# print_ln(\"Standard deviation: %s\", std_dev.reveal())\n", "response_1": "def standard_deviation(arr):\n    \"\"\"\n    Return the standard deviation of the array.\n    \"\"\"\n    # Calculate the average\n    average = sfix(0)\n    for item in arr:\n        average = average + item / len(arr)\n    \n    # Calculate the variance\n    variance = sfix(0)\n    for item in arr:\n        variance = variance + (item - average) ** 2 / len(arr)\n    \n    # Return the standard deviation\n    return variance.sqrt()\n", "model_name": "deepseek-v3"}
{"test_name": "dominate", "response_0": "def dominate(a, b):\n    \"\"\"\n    Return whether array a \"dominates\" array b,\n    which means, every element in a is no smaller than the corresponding element in b.\n    \"\"\"\n    ret = True\n    for i in range(len(a)):\n        if a[i] < b[i]:\n            ret = False\n            break\n    return ret\n", "response_1": "def dominate(a, b):\n    \"\"\"\n    Return whether array a \"dominates\" array b,\n    which means, every element in a is no smaller than the corresponding element in b.\n    \"\"\"\n    ret = True\n    for i in range(len(a)):\n        ret = ret & (a[i] >= b[i])\n    return ret\n", "model_name": "deepseek-v3"}
{"test_name": "rescale", "response_0": "def rescale(brr):\n    \"\"\"\n    To rescale the array such that the array can be fitted into [-1,1]\n    The input is guaranteed to be nonempty with nonzero element.\n    \"\"\"\n    max_abs = 0\n    for item in brr:\n        abs_item = abs(item)\n        max_abs = max_abs.max(abs_item)\n    for i in range(len(brr)):\n        brr[i] = brr[i] / max_abs\n    return brr\n", "response_1": "def rescale(brr):\n    \"\"\"\n    To rescale the array such that the array can be fitted into [-1,1]\n    The input is guaranteed to be nonempty with nonzero element.\n    \"\"\"\n    max_abs = 0\n    for item in brr:\n        abs_item = abs(item)\n        max_abs = if_else(abs_item > max_abs, abs_item, max_abs)\n    \n    for i in range(len(brr)):\n        brr[i] = brr[i] / max_abs\n    \n    return brr\n", "model_name": "deepseek-v3"}
{"test_name": "array_minus7", "response_0": "def array_minus7(arr):\n    \"\"\"\n    Subtract all elements in the input array by 7.\n    \"\"\"\n    result = Array(len(arr), sint)\n    for i in range(len(arr)):\n        result[i] = arr[i] - 7\n    return result\n", "response_1": "def array_minus7(arr):\n    \"\"\"\n    Subtract all elements in the input array by 7.\n    \"\"\"\n    for i in range(len(arr)):\n        arr[i] = arr[i] - 7\n    return arr\n", "model_name": "deepseek-v3"}
{"test_name": "traverse_and_sum", "response_0": "def traverse_and_sum(arr1, arr2):\n    \"\"\"\n    Traverse all pairs of elements from the two inputs, \n    compute the product of the two elements and sum all of them up. \n    \"\"\"\n    sum = sfix(0)\n    for i in range(len(arr1)):\n        for j in range(len(arr2)):\n            sum = sum + arr1[i] * arr2[j]\n    return sum\n", "response_1": "def traverse_and_sum(arr1, arr2):\n    \"\"\"\n    Traverse all pairs of elements from the two inputs, \n    compute the product of the two elements and sum all of them up. \n    \"\"\"\n    sum = 0\n    for i in range(len(arr1)):\n        for j in range(len(arr2)):\n            sum = sum + arr1[i] * arr2[j]\n    return sum\n", "model_name": "deepseek-v3"}
{"test_name": "longest_nondec_subseq", "response_0": "def longest_nondec_subseq(a):\n    \"\"\"\n    Return the length of the longest non-decreasing subsequence in the input array.\n    \"\"\"\n    max_length = sint(0)\n    cur_length = sint(0)\n    n = len(a)\n    \n    for i in range(n):\n        if i == 0:\n            cur_length = sint(1)\n        else:\n            is_nondec = a[i] >= a[i-1]\n            cur_length = is_nondec.if_else(cur_length + 1, sint(1))\n            max_length = (max_length >= cur_length).if_else(max_length, cur_length)\n    \n    max_length = (max_length >= cur_length).if_else(max_length, cur_length)\n    return max_length\n", "response_1": "def longest_nondec_subseq(a):\n    \"\"\"\n    Return the length of the longest non-decreasing subsequence in the input array.\n    \"\"\"\n    max_length = sint(0)\n    cur_length = sint(0)\n    n = len(a)\n    \n    for i in range(n):\n        if i == 0:\n            cur_length = sint(1)\n        else:\n            comparison = a[i] >= a[i - 1]\n            cur_length = comparison * (cur_length + 1) + (1 - comparison) * sint(1)\n            max_length = comparison * max_length + (1 - comparison) * max(max_length, cur_length)\n    \n    max_length = max(max_length, cur_length)\n    return max_length\n", "model_name": "deepseek-v3"}
{"test_name": "sum_but_skip_biggest", "response_0": "def sum_but_skip_biggest(array):\n    \"\"\"\n    Compute partial sum of the array but skip the biggest element in until now every time.\n    \"\"\"\n    sum = sfix(0)\n    biggest = array[0]\n    for i in range(len(array)):\n        if array[i] >= biggest:\n            biggest = array[i]\n            continue\n        sum += array[i]\n    return sum\n", "response_1": "program sum_but_skip_biggest(array):\n    # Initialize sum and biggest with the first element of the array\n    sum = sfix(0)\n    biggest = array[0]\n    \n    # Iterate over the array\n    for i in range(len(array)):\n        # Check if the current element is greater than or equal to the biggest\n        if array[i] >= biggest:\n            # Update the biggest element\n            biggest = array[i]\n            continue\n        # Add the current element to the sum\n        sum += array[i]\n    \n    # Return the computed sum\n    return sum\n", "model_name": "deepseek-v3"}
{"test_name": "second_test", "response_0": "def second_test(arr):\n    \"\"\"\n    Return whether or not the first element in the array is smaller than exactly one element.\n    \"\"\"\n    count = sfix(0)\n    first_element = arr[0]\n    \n    for i in range(1, len(arr)):\n        if first_element < arr[i]:\n            count = count + sfix(1)\n    \n    return count == sfix(1)\n", "response_1": "def second_test(arr):\n    \"\"\"\n    Return whether or not the first element in the array is smaller than exactly one element.\n    \"\"\"\n    count = sfix(0)\n    for i in range(1, len(arr)):\n        if arr[0] < arr[i]:\n            count = count + 1\n    return count == 1\n", "model_name": "deepseek-v3"}
{"test_name": "Manhattan_distance", "response_0": "def Manhattan_distance(a, b):\n    \"\"\"\n    Compute the Manhattan distance of the two vectors.\n    \"\"\"\n    ret = sfix(0)\n    for i in range(len(a)):\n        diff = a[i] - b[i]\n        abs_diff = if_else(diff < 0, -diff, diff)\n        ret = ret + abs_diff\n    return ret\n", "response_1": "def Manhattan_distance(a, b):\n    \"\"\"\n    Compute the Manhattan distance of the two vectors.\n    \"\"\"\n    ret = sfix(0)  # Initialize the return value as a secure fixed-point number\n    for i in range(len(a)):\n        ret = ret + (a[i] - b[i]).abs()  # Compute the absolute difference and accumulate\n    return ret\n", "model_name": "deepseek-v3"}
{"test_name": "deal_with_only_positive", "response_0": "def deal_with_only_positive(array):\n    \"\"\"\n    Add and subtract the positive elements in the array to the partial sum\n    Non-positive elements are skipped\n    \"\"\"\n    sign = sint(1)\n    sum = sint(0)\n    for i in range(len(array)):\n        if array[i] <= 0:\n            continue\n        sum = sum + sign * array[i]\n        sign = (-1) * sign\n    return sum\n", "response_1": "def deal_with_only_positive(array):\n    \"\"\"\n    Add and subtract the positive elements in the array to the partial sum\n    Non-positive elements are skipped\n    \"\"\"\n    sign = sint(1)\n    sum = sint(0)\n    for i in range(len(array)):\n        if array[i] <= 0:\n            continue\n        sum = sum + sign * array[i]\n        sign = (-1) * sign\n    return sum\n", "model_name": "deepseek-v3"}
{"test_name": "compare_and_return", "response_0": "def compare_and_return(arr, brr):\n    \"\"\"\n    Compare the elements in arrays `arr` and `brr`, and return the first index `i` with arr[i]==brr[i]\n    \"\"\"\n    ret = sint(-1)  # Initialize ret as a secure integer with value -1\n    for i in range(len(arr)):\n        cmp = arr[i] == brr[i]  # Secure comparison\n        ret = cmp.if_else(sint(i), ret)  # Update ret if cmp is true\n        break_if(cmp)  # Break the loop if cmp is true\n    return ret\n", "response_1": "def compare_and_return(arr, brr):\n    \"\"\"\n    Compare the elements in arrays `arr` and `brr`, and return the first index `i` with arr[i]==brr[i]\n    \"\"\"\n    ret = -1\n    for i in range(len(arr)):\n        if arr[i] == brr[i]:\n            ret = i\n            break\n    return ret\n", "model_name": "deepseek-v3"}
{"test_name": "sum_odd_positive", "response_0": "def sum_odd_positive(arr):\n    \"\"\"\n    Return the sum of all the odd positive numbers in the array.\n    \"\"\"\n    sum = 0\n    for item in arr:\n        is_odd = item % 2\n        is_positive = item > 0\n        if is_odd * is_positive:\n            sum = sum + item\n    return sum\n", "response_1": "def sum_odd_positive(arr):\n    \"\"\"\n    Return the sum of all the odd positive numbers in the array.\n    \"\"\"\n    sum = 0\n    for item in arr:\n        if item % 2 == 1 and item > 0:\n            sum = sum + item\n    return sum\n", "model_name": "deepseek-v3"}
{"test_name": "two_sum", "response_0": "def two_sum(arr, target):\n    \"\"\"\n    Return whether the input array contains two elements (can be the same) whose sum equals to the target value.\n    \"\"\"\n    n = len(arr)\n    found = False\n    for i in range(n):\n        for j in range(n):\n            sum = arr[i] + arr[j]\n            if sum == target:\n                found = True\n                break\n        if found:\n            break\n    return found\n", "response_1": "def two_sum(arr, target):\n    \"\"\"\n    Return whether the input array contains two elements (can be the same) whose sum equals to the target value.\n    \"\"\"\n    n = len(arr)\n    for i in range(n):\n        for j in range(n):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\n", "model_name": "deepseek-v3"}
{"test_name": "seq_search", "response_0": "def seq_search(arr, target):\n    \"\"\"\n    Do sequential search in the array for the target.\n    Return the index of the target, return -1 if target not found.\n    The array is guaranteed to have all different elements.\n    \"\"\"\n    index = -1\n    for i in range(len(arr)):\n        match = arr[i] == target\n        index = match.if_else(i, index)\n    return index\n", "response_1": "def seq_search(arr, target):\n    \"\"\"\n    Do sequential search in the array for the target. \n    Return the index of the target, return -1 if target not found.\n    The array is guaranteed to have all different elements. \n    \"\"\"\n    n = len(arr)\n    result = -1\n    for i in range(n):\n        if arr[i] == target:\n            result = i\n            break\n    return result\n", "model_name": "deepseek-v3"}
{"test_name": "choppy_array", "response_0": "def choppy_array(arr):\n    \"\"\"\n    Return whether or not the input array is a \"choppy array\".\n    A \"choppy array\" is the following array: \n    The first element is the smallest, \n    the second is the largest of the remaining, \n    the third is the smallest of the remaining, \n    the fourth is the largest of the remaining, etc.\n    \"\"\"\n    n = len(arr)\n    for i in range(n):\n        for j in range(n - i):\n            if i % 2 == 1 and arr[i + j] > arr[i]:\n                return False\n            if i % 2 == 0 and arr[i + j] < arr[i]:\n                return False\n    return True\n", "response_1": "def choppy_array(arr):\n    \"\"\"\n    Return whether or not the input array is a \"choppy array\".\n    A \"choppy array\" is the following array: \n    The first element is the smallest, \n    the second is the largest of the remaining, \n    the third is the smallest of the remaining, \n    the fourth is the largest of the remaining, etc.\n    \"\"\"\n    n = len(arr)\n    result = True\n\n    for i in range(n):\n        for j in range(n - i):\n            if i % 2 == 1:\n                # Check if arr[i+j] is greater than arr[i]\n                comparison = arr[i + j] > arr[i]\n                result = result * (1 - comparison)\n            else:\n                # Check if arr[i+j] is less than arr[i]\n                comparison = arr[i + j] < arr[i]\n                result = result * (1 - comparison)\n\n    return result\n", "model_name": "deepseek-v3"}
{"test_name": "array_process", "response_0": "def array_process(arr, func):\n    \"\"\"\n    Process all elements in the input array with given function.\n    \"\"\"\n    for i in range(len(arr)):\n        arr[i] = func(arr[i])\n    return arr\n", "response_1": "def array_process(arr, func):\n    \"\"\"\n    Process all elements in the input array with given function.\n    \"\"\"\n    for i in range(len(arr)):\n        arr[i] = func(arr[i])\n    return arr\n", "model_name": "deepseek-v3"}
{"test_name": "normalize", "response_0": "def normalize(vec):\n    \"\"\"\n    Normalize the vector.\n    \"\"\"\n    sum = sfix(0)\n    for item in vec:\n        sum = sum + item * item\n    base = sqrt(sum)\n    for i in range(len(vec)):\n        vec[i] = vec[i] / base\n    return vec\n", "response_1": "def normalize(vec):\n    \"\"\"\n    Normalize the vector.\n    \"\"\"\n    sum = sfix(0)\n    for item in vec:\n        sum = sum + item * item\n    base = sqrt(sum)\n    for i in range(len(vec)):\n        vec[i] = vec[i] / base\n    return vec\n", "model_name": "deepseek-v3"}
{"test_name": "impatient_merchant", "response_0": "def impatient_merchant(days):\n    can_buy = True\n    net = 0\n    orig_price = 0\n    for i in range(len(days)):\n        if can_buy:\n            net = net - days[i]\n            orig_price = days[i]\n            can_buy = False\n        else:\n            if days[i] > orig_price:\n                net = net + days[i]\n                can_buy = True\n    return net\n", "response_1": "program.impatient_merchant = function(days)\n    sbits = sbitvec\n    can_buy = sbits(1)\n    net = sbits(0)\n    orig_price = sbits(0)\n    for i in range(len(days)):\n        if can_buy:\n            net = net - days[i]\n            orig_price = days[i]\n            can_buy = sbits(0)\n        else:\n            if days[i] > orig_price:\n                net = net + days[i]\n                can_buy = sbits(1)\n    return net\nend\n", "model_name": "deepseek-v3"}
{"test_name": "array_shift", "response_0": "def array_shift(a):\n    \"\"\"\n    Shift the array on index by 1.\n    For example, [0,1,2] will be shifted to [1,2,0]\n    \"\"\"\n    n = len(a)\n    temp = a[n-1]\n    \n    for i in range(n-1, 0, -1):\n        a[i] = a[i-1]\n    \n    a[0] = temp\n    return a\n", "response_1": "def array_shift(a):\n    \"\"\"\n    Shift the array on index by 1.\n    For example, [0,1,2] will be shifted to [1,2,0]\n    \"\"\"\n    n = len(a)\n    temp = a[n-1]\n    @for_range(n-1)\n    def _(i):\n        a[n-i-1] = a[n-i-2]\n    a[0] = temp\n    return a\n", "model_name": "deepseek-v3"}
{"test_name": "array_double", "response_0": "def array_double(arr):\n    \"\"\"\n    Double all elements in the input array.\n    \"\"\"\n    for i in range(len(arr)):\n        arr[i] = arr[i] * 2\n    return arr\n", "response_1": "def array_double(arr):\n    \"\"\"\n    Double all elements in the input array.\n    \"\"\"\n    n = len(arr)\n    for i in range(n):\n        arr[i] = arr[i] * 2\n    return arr\n", "model_name": "deepseek-v3"}
{"test_name": "stop_at_zero", "response_0": "from Compiler.types import Array, sint\nfrom Compiler.library import if_, break_loop\n\ndef stop_at_zero(array):\n    \"\"\"\n    Add 1 to all elements in the array, but stop if found an element equal to 0\n    \"\"\"\n    for i in range(len(array)):\n        @if_(array[i] == 0)\n        def _():\n            break_loop()\n        array[i] = array[i] + 1\n    return array\n", "response_1": "from Compiler import types\n\ndef stop_at_zero(array):\n    \"\"\"\n    Add 1 to all elements in the array, but stop if found an element equal to 0\n    \"\"\"\n    for i in range(len(array)):\n        # Check if the element is zero\n        is_zero = (array[i] == 0)\n        # If the element is zero, break the loop\n        if is_zero.reveal():\n            break\n        # Otherwise, increment the element by 1\n        array[i] += 1\n    return array\n", "model_name": "deepseek-v3"}
{"test_name": "array_not", "response_0": "from Compiler import types\n\ndef array_not(arr):\n    \"\"\"\n    Take opposite to all elements in the input array.\n    \"\"\"\n    for i in range(len(arr)):\n        arr[i] = 1 - arr[i]  # Boolean negation in MP-SPDZ\n    return arr\n", "response_1": "def array_not(arr):\n    \"\"\"\n    Take opposite to all elements in the input array.\n    \"\"\"\n    result = Array(len(arr), sint)\n    for i in range(len(arr)):\n        result[i] = 1 - arr[i]\n    return result\n", "model_name": "deepseek-v3"}
{"test_name": "array_process_then_clip", "response_0": "def array_process_then_clip(arr, func):\n    \"\"\"\n    Process all elements in the input array with given function, \n    then clip the outcome into range [-10,10]\n    \"\"\"\n    for i in range(len(arr)):\n        arr[i] = func(arr[i])\n        arr[i] = if_else(arr[i] > 10, 10, arr[i])\n        arr[i] = if_else(arr[i] < -10, -10, arr[i])\n    return arr\n", "response_1": "def array_process_then_clip(arr, func):\n    \"\"\"\n    Process all elements in the input array with given function, \n    then clip the outcome into range [-10, 10]\n    \"\"\"\n    for i in range(len(arr)):\n        # Apply the function to each element\n        arr[i] = func(arr[i])\n        \n        # Clip the value to the range [-10, 10]\n        arr[i] = sfix.max(-10, sfix.min(10, arr[i]))\n    \n    return arr\n", "model_name": "deepseek-v3"}
{"test_name": "add_and_count_positive", "response_0": "def add_and_count_positive(array, k):\n    \"\"\"\n    Add k to all elements in the given array, and count the number of positive numbers in the output array.\n    Return both the output array and the count.\n    \"\"\"\n    count = sint(0)\n    output_array = Array(len(array), sint)\n    \n    for i in range(len(array)):\n        output_array[i] = array[i] + k\n        if output_array[i] > 0:\n            count = count + 1\n    \n    return output_array, count\n", "response_1": "def add_and_count_positive(array, k):\n    \"\"\"\n    Add k to all elements in the given array, and count the number of positive numbers in the output array.\n    Return both the output array and the count.\n    \"\"\"\n    count = sint(0)\n    output_array = Array(len(array), sint)\n    \n    for i in range(len(array)):\n        output_array[i] = array[i] + k\n        if output_array[i] > 0:\n            count = count + 1\n    \n    return output_array, count\n", "model_name": "deepseek-v3"}
{"test_name": "array_subtract", "response_0": "def array_subtract(a, b):\n    \"\"\"\n    Subtract the first array by the second one elementwise. \n    If one of the array is shorter than the other, it will be padded with 0.\n    \"\"\"\n    len_a = len(a)\n    len_b = len(b)\n    \n    if len_a > len_b:\n        ret = [sint(0) for _ in range(len_a)]\n        for i in range(len_b):\n            ret[i] = a[i] - b[i]\n        for i in range(len_a - len_b):\n            ret[len_b + i] = a[len_b + i]\n        return ret\n    else:\n        ret = [sint(0) for _ in range(len_b)]\n        for i in range(len_a):\n            ret[i] = a[i] - b[i]\n        for i in range(len_b - len_a):\n            ret[len_a + i] = sint(0) - b[len_a + i]\n        return ret\n", "response_1": "def array_subtract(a, b):\n    \"\"\"\n    Subtract the first array by the second one elementwise.\n    If one of the arrays is shorter than the other, it will be padded with 0.\n    \"\"\"\n    len_a = len(a)\n    len_b = len(b)\n    \n    if len_a > len_b:\n        ret = Array(len_a, sint(0))\n        for i in range(len_b):\n            ret[i] = a[i] - b[i]\n        for i in range(len_a - len_b):\n            ret[len_b + i] = a[len_b + i]\n    else:\n        ret = Array(len_b, sint(0))\n        for i in range(len_a):\n            ret[i] = a[i] - b[i]\n        for i in range(len_b - len_a):\n            ret[len_a + i] = -b[len_a + i]\n    \n    return ret\n", "model_name": "deepseek-v3"}
{"test_name": "lower_bound", "response_0": "def lower_bound(arr, x):\n    \"\"\"\n    Return the index of the largest element not bigger than x in arr.\n    If such element does not exist, return -1.\n    \"\"\"\n    ret = -1\n    distance = 0\n    found = False\n    for i in range(len(arr)):\n        condition = arr[i] <= x\n        if condition:\n            new_distance = x - arr[i]\n            update = (not found) or (new_distance < distance)\n            if update:\n                ret = i\n                distance = new_distance\n                found = True\n    return ret\n", "response_1": "def lower_bound(arr, x):\n    \"\"\"\n    Return the index of the largest element not bigger than x in arr.\n    If such element does not exist, return -1.\n    \"\"\"\n    ret = sint(-1)\n    distance = sint(0)\n    found = sint(0)\n    \n    @for_range(len(arr))\n    def _(i):\n        cond = arr[i] <= x\n        new_distance = x - arr[i]\n        update = cond * ((~found) | (new_distance < distance))\n        ret.update(ret * (~update) + i * update)\n        distance.update(distance * (~update) + new_distance * update)\n        found.update(found | cond)\n    \n    return ret\n", "model_name": "deepseek-v3"}
{"test_name": "argmin", "response_0": "def argmin(a):\n    \"\"\"\n    Return the index of the min value of an array.\n    \"\"\"\n    current = a[0]\n    index = 0\n    for i in range(len(a)):\n        index = if_else(current <= a[i], index, i)\n        current = if_else(current <= a[i], current, a[i])\n    return index\n", "response_1": "def argmin(a):\n    \"\"\"\n    Return the index of the min value of an array.\n    \"\"\"\n    current = a[0]\n    index = 0\n    for i in range(1, len(a)):\n        # Compare current and a[i]\n        cmp = current <= a[i]\n        # Update index and current based on the comparison\n        index = cmp.if_else(index, i)\n        current = cmp.if_else(current, a[i])\n    return index\n", "model_name": "deepseek-v3"}
{"test_name": "independent_robbery", "response_0": "program independent_robbery(houses):\n    # Initialize the dp array with zeros\n    dp = Array(len(houses), sint(0))\n    \n    # Base cases\n    dp[0] = houses[0]\n    dp[1] = if_else(dp[1] >= dp[0], dp[1], dp[0])\n    \n    # Fill the dp array using dynamic programming\n    for i in range(2, len(houses)):\n        dp[i] = if_else(dp[i-2] + houses[i] >= dp[i-1], dp[i-2] + houses[i], dp[i-1])\n    \n    # Return the last element of the dp array\n    return dp[len(houses)-1]\n", "response_1": "from Compiler import types\n\ndef independent_robbery(houses):\n    \"\"\"\n    Use dynamic programming to solve the \"independent robbery\" problem in MP-SPDZ.\n    The robber wants to rob some houses along a street, each of which has some amount of money in it (guaranteed to be nonnegative). \n    The robber cannot rob two consecutive houses, we want to know the max amount of money he can get. \n    The number of houses is guaranteed to be no smaller than 3.\n    \"\"\"\n    n = len(houses)\n    dp = types.Array(n, types.sint)\n    \n    # Initialize the first two elements of the dp array\n    dp[0] = houses[0]\n    dp[1] = dp[0].max(houses[1])\n    \n    # Fill the dp array using dynamic programming\n    for i in range(2, n):\n        dp[i] = (dp[i-2] + houses[i]).max(dp[i-1])\n    \n    # Return the last element of the dp array\n    return dp[n-1]\n", "model_name": "deepseek-v3"}
{"test_name": "sum_odd_and_odd", "response_0": "def sum_odd_and_odd(arr):\n    \"\"\"\n    A strange sum function\n    \"\"\"\n    sum = 0\n    n = len(arr)\n    for i in range(n):\n        if i % 2 == 0:\n            continue\n        for j in range(i):\n            if j % 2 == 0:\n                continue\n            sum += arr[j]\n    return sum\n", "response_1": "def sum_odd_and_odd(arr):\n    \"\"\"\n    A strange sum function in MP-SPDZ\n    \"\"\"\n    sum = sfix(0)  # Initialize sum as a secret-shared fixed-point number\n    n = len(arr)   # Get the length of the array\n\n    @for_range(n)  # Loop over the array indices\n    def _(i):\n        if i % 2 == 0:\n            return  # Skip even indices\n        @for_range(i)  # Loop over indices less than i\n        def _(j):\n            if j % 2 == 0:\n                return  # Skip even indices\n            sum += arr[j]  # Add the secret-shared value at index j to sum\n\n    return sum  # Return the secret-shared sum\n", "model_name": "deepseek-v3"}
{"test_name": "is_monotonous", "response_0": "from Compiler.types import Array, sfix\nfrom Compiler.library import if_, for_range\n\ndef is_monotonous(arr):\n    \"\"\"\n    Return whether or not the array is strictly monotonous.\n    \"\"\"\n    n = len(arr)\n    d = sfix(0)\n    result = sfix(1)  # Assume the array is monotonous initially\n\n    def loop_body(i):\n        nonlocal d, result\n        diff = arr[i+1] - arr[i]\n        result = if_(i > 0, if_((diff * d) <= 0, sfix(0), result), result)\n        d = diff\n\n    for_range(n-1)(loop_body)\n    return result\n", "response_1": "def is_monotonous(arr):\n    \"\"\"\n    Return whether or not the array is strictly monotonous.\n    \"\"\"\n    d = sint(0)\n    n = len(arr)\n    result = True\n    \n    for i in range(n - 1):\n        diff = arr[i + 1] - arr[i]\n        if i > 0:\n            result = result & ((diff * d) > 0)\n        d = diff\n    \n    return result\n", "model_name": "deepseek-v3"}
{"test_name": "positive_count_negative_sum", "response_0": "# Define the function in MP-SPDZ\ndef positive_count_negative_sum(arr):\n    # Initialize counters\n    count = sint(0)\n    sum = sint(0)\n    \n    # Traverse the array\n    for item in arr:\n        # Check if the item is positive\n        is_positive = item > 0\n        # Increment the count if the item is positive\n        count = count + is_positive\n        \n        # Check if the item is negative\n        is_negative = item < 0\n        # Add the item to the sum if it is negative\n        sum = sum + is_negative * item\n    \n    # Return the count and sum\n    return count, sum\n", "response_1": "def positive_count_negative_sum(arr):\n    \"\"\"\n    Traverse the array, return the number of all positive elements and the sum of all negative elements.\n    \"\"\"\n    count = sint(0)\n    sum = sint(0)\n    for item in arr:\n        count = count + (item > 0).if_else(sint(1), sint(0))\n        sum = sum + (item < 0).if_else(item, sint(0))\n    return count, sum\n", "model_name": "deepseek-v3"}
{"test_name": "sum_even", "response_0": "def sum_even(arr):\n    \"\"\"\n    Return the sum of all the even numbers in the array.\n    \"\"\"\n    sum = 0\n    for item in arr:\n        # Check if the item is even using modulo operation\n        is_even = (item % 2) == 0\n        # Add the item to the sum if it is even\n        sum = sum + item * is_even\n    return sum\n", "response_1": "def sum_even(arr):\n    \"\"\"\n    Return the sum of all the even numbers in the array.\n    \"\"\"\n    sum = sfix(0)\n    for item in arr:\n        is_even = (item % 2 == 0)\n        sum = sum + if_else(is_even, item, sfix(0))\n    return sum\n", "model_name": "deepseek-v3"}
{"test_name": "one_norm", "response_0": "def one_norm(vec):\n    \"\"\"\n    Return the one-norm of the vector.\n    \"\"\"\n    sum = sfix(0)\n    for item in vec:\n        sum = sum + abs(item)\n    return sum\n", "response_1": "def one_norm(vec):\n    \"\"\"\n    Return the one-norm of the vector.\n    \"\"\"\n    sum = sfix(0)\n    for item in vec:\n        sum = sum + abs(item)\n    return sum\n", "model_name": "deepseek-v3"}
{"test_name": "array_floor", "response_0": "from math import floor\nfrom Compiler.types import Array\n\ndef array_floor(arr):\n    \"\"\"\n    Apply Gaussian floor function to all elements in the input array.\n    \"\"\"\n    ret = Array(len(arr), sfix)\n    for i in range(len(arr)):\n        ret[i] = floor(arr[i])\n    return ret\n", "response_1": "def array_floor(arr):\n    \"\"\"\n    Apply Gaussian floor function to all elements in the input array.\n    \"\"\"\n    ret = Array(len(arr), sfix)\n    for i in range(len(arr)):\n        ret[i] = sfix.floor(arr[i])\n    return ret\n", "model_name": "deepseek-v3"}
{"test_name": "three_five", "response_0": "def three_five(arr):\n    \"\"\"\n    If the input array contain both/neither 3 and/or 5, return True, \n    otherwise return False. \n    \"\"\"\n    has3 = sbit(False)\n    has5 = sbit(False)\n    \n    for item in arr:\n        has3 = has3 | (item == 3)\n        has5 = has5 | (item == 5)\n    \n    return (has3 & has5) | ((~has3) & (~has5))\n", "response_1": "def three_five(arr):\n    \"\"\"\n    If the input array contain both/neither 3 and/or 5, return True, \n    otherwise return False. \n    \"\"\"\n    has3 = False\n    has5 = False\n    for item in arr:\n        has3 = has3 or (item == 3)\n        has5 = has5 or (item == 5)\n    return (has3 and has5) or ((not has3) and (not has5))\n", "model_name": "deepseek-v3"}
{"test_name": "num_above_average", "response_0": "def num_above_average(arr):\n    \"\"\"\n    Return the number of elements in the array larger than or equal to the average value.\n    \"\"\"\n    sum = 0\n    count = 0\n    n = len(arr)\n    \n    # Calculate the sum of the array\n    for i in range(n):\n        sum += arr[i]\n    \n    # Calculate the average\n    avg = sum / n\n    \n    # Count the number of elements above or equal to the average\n    for item in arr:\n        if item >= avg:\n            count += 1\n    \n    return count\n", "response_1": "def num_above_average(arr):\n    \"\"\"\n    Return the number of elements in the array larger than or equal to the average value.\n    \"\"\"\n    sum = sfix(0)\n    count = sfix(0)\n    n = len(arr)\n    \n    # Calculate the sum of the array elements\n    for i in range(n):\n        sum = sum + arr[i]\n    \n    # Calculate the average\n    avg = sum / n\n    \n    # Count the number of elements above or equal to the average\n    for i in range(n):\n        count = count + (arr[i] >= avg).if_else(sfix(1), sfix(0))\n    \n    return count\n", "model_name": "deepseek-v3"}
{"test_name": "clip", "response_0": "def clip(arr, upper_bound=1, lower_bound=-1):\n    \"\"\"\n    For the given array, clip the elements to the range [lower_bound, upper_bound]\n    \"\"\"\n    for i in range(len(arr)):\n        arr[i] = arr[i].if_else(upper_bound, arr[i] > upper_bound)\n        arr[i] = arr[i].if_else(lower_bound, arr[i] < lower_bound)\n    return arr\n", "response_1": "def clip(arr, upper_bound=1, lower_bound=-1):\n    \"\"\"\n    For the given array, clip the elements to the range [lower_bound, upper_bound]\n    \"\"\"\n    res = Array(len(arr), sfix)\n    for i in range(len(arr)):\n        res[i] = arr[i].if_else(lower_bound, arr[i] < lower_bound)\n        res[i] = res[i].if_else(upper_bound, res[i] > upper_bound)\n    return res\n", "model_name": "deepseek-v3"}
{"test_name": "sum_with_certain_element_skipped", "response_0": "from Compiler import types\n\ndef sum_with_certain_element_skipped(array):\n    \"\"\"\n    Compute partial sum of the array with all elements causing the partial sum to be in [5,10] skipped.\n    \"\"\"\n    sum = types.sint(0)\n    for i in range(len(array)):\n        partial_sum = sum + array[i]\n        condition = (partial_sum >= 5) * (partial_sum <= 10)\n        sum = sum + array[i] * (1 - condition)\n    return sum\n", "response_1": "def sum_with_certain_element_skipped(array):\n    \"\"\"\n    Compute partial sum of the array with all elements causing the partial sum to be in [5,10] skipped.\n    \"\"\"\n    sum = sint(0)\n    for i in range(len(array)):\n        partial_sum = sum + array[i]\n        skip = (partial_sum >= 5) * (partial_sum <= 10)\n        sum = sum + (1 - skip) * array[i]\n    return sum\n", "model_name": "deepseek-v3"}
{"test_name": "sum_of_odd_and_even", "response_0": "from util import if_else\nfrom Compiler.types import sint, Array\n\ndef sum_of_odd_and_even(arr):\n    \"\"\"\n    Return the sum of odd number and even number in the array.\n    The elements in the input array are guaranteed to be integers.\n    \"\"\"\n    odd_sum = sint(0)\n    even_sum = sint(0)\n    \n    for item in arr:\n        is_odd = item % 2\n        odd_sum += if_else(is_odd, item, 0)\n        even_sum += if_else(is_odd, 0, item)\n    \n    return odd_sum, even_sum\n", "response_1": "from Compiler.types import sint, cint\nfrom Compiler.library import for_range\n\ndef sum_of_odd_and_even(arr):\n    \"\"\"\n    Return the sum of odd numbers and even numbers in the array.\n    The elements in the input array are guaranteed to be integers.\n    \"\"\"\n    odd_sum = sint(0)\n    even_sum = sint(0)\n    \n    def loop_body(i):\n        item = arr[i]\n        is_odd = item % 2\n        odd_sum.update(odd_sum + is_odd * item)\n        even_sum.update(even_sum + (1 - is_odd) * item)\n    \n    for_range(len(arr))(loop_body)\n    \n    return odd_sum, even_sum\n\n# Example usage:\n# arr = Array(10, sint)\n# arr.assign([sint(x) for x in [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]])\n# odd_sum, even_sum = sum_of_odd_and_even(arr)\n# print_ln(\"Odd sum: %s, Even sum: %s\", odd_sum.reveal(), even_sum.reveal())\n", "model_name": "deepseek-v3"}
{"test_name": "distance", "response_0": "def distance(vec1, vec2):\n    \"\"\"\n    Compute the Euclidean distance between the two vectors.\n    \"\"\"\n    sum_squares = 0\n    for i in range(len(vec1)):\n        diff = vec1[i] - vec2[i]\n        sum_squares += diff * diff\n    \n    # Assuming a square root function is available in the MP-SPDZ environment\n    return sqrt(sum_squares)\n", "response_1": "def distance(vec1, vec2):\n    \"\"\"\n    Compute the Euclidean distance between the two vectors.\n    \"\"\"\n    sum = sfix(0)\n    for i in range(len(vec1)):\n        diff = vec1[i] - vec2[i]\n        sum = sum + diff * diff\n    return sum.sqrt()\n", "model_name": "deepseek-v3"}
{"test_name": "num_occurrence", "response_0": "def num_occurrence(arr, target):\n    \"\"\"\n    Return the number of occurrence of the target in the given array.\n    \"\"\"\n    count = sint(0)  # Initialize count as a secret-shared integer\n    for item in arr:\n        # Compare each item in the array with the target\n        comparison = item == target\n        # Add 1 to count if the comparison is true\n        count = count + comparison\n    return count\n", "response_1": "def num_occurrence(arr, target):\n    \"\"\"\n    Return the number of occurrence of the target in the given array.\n    \"\"\"\n    count = sint(0)  # Initialize count as a secret integer\n    for item in arr:\n        # Compare the item with the target and increment count if they match\n        count = count + (item == target)\n    return count\n", "model_name": "deepseek-v3"}
{"test_name": "palindrome", "response_0": "def palindrome(arr):\n    \"\"\"\n    Check whether the array is a palindrome.\n    \"\"\"\n    flag = True\n    n = len(arr)\n    for i in range(n):\n        flag = flag * (arr[i] == arr[n - 1 - i])\n    return flag\n", "response_1": "def palindrome(arr):\n    \"\"\"\n    Check whether the array is a palindrome.\n    \"\"\"\n    n = len(arr)\n    flag = sint(1)  # Initialize flag as a secret-shared integer with value 1 (True)\n    \n    for i in range(n):\n        flag = flag * (arr[i] == arr[n - 1 - i])  # Multiply flag with the result of the comparison\n    \n    return flag  # Return the final flag value\n", "model_name": "deepseek-v3"}
{"test_name": "reverse_order_pair", "response_0": "def reverse_order_pair(arr):\n    \"\"\"\n    Count the number of reverse order pairs in the array.\n    \"\"\"\n    num = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                num = num + 1\n    return num\n", "response_1": "def reverse_order_pair(arr):\n    \"\"\"\n    Count the number of reverse order pairs in the array.\n    \"\"\"\n    num = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                num = num + 1\n    return num\n", "model_name": "deepseek-v3"}
{"test_name": "sum_of_cubes", "response_0": "def sum_of_cubes(arr):\n    \"\"\"\n    Return the sum of cubes of elements in the array.\n    \"\"\"\n    ret = sint(0)  # Initialize the return value as a secure integer\n    for item in arr:\n        ret = ret + item * item * item  # Compute the cube and add it to the sum\n    return ret\n", "response_1": "def sum_of_cubes(arr):\n    \"\"\"\n    Return the sum of cubes of elements in the array.\n    \"\"\"\n    ret = sfix(0)\n    for item in arr:\n        ret = ret + item * item * item\n    return ret\n", "model_name": "deepseek-v3"}
{"test_name": "max_element", "response_0": "def max_element(a):\n    \"\"\"\n    Return the max value of an array.\n    \"\"\"\n    current = a[0]\n    for item in a:\n        current = current >= item ? current : item\n    \n    return current\n", "response_1": "def max_element(a):\n    \"\"\"\n    Return the max value of an array.\n    \"\"\"\n    current = a[0]\n    for i in range(1, len(a)):\n        current = if_else(current >= a[i], current, a[i])\n    \n    return current\n", "model_name": "deepseek-v3"}
{"test_name": "array_if_else", "response_0": "def array_if_else(arr, predicator, if_func, else_func):\n    \"\"\"\n    For each element in the input array, \n    if the predicator returns True, then apply the if-function to the element, \n    otherwise apply the else-function to the element.\n    \"\"\"\n    result = Array(len(arr), arr.value_type)\n    for i in range(len(arr)):\n        result[i] = if_func(arr[i]) if predicator(arr[i]) else else_func(arr[i])\n    return result\n", "response_1": "def array_if_else(arr, predicator, if_func, else_func):\n    \"\"\"\n    For each element in the input array, \n    if the predicator returns True, then apply the if-function to the element, \n    otherwise apply the else-function to the element. \n    \"\"\"\n    for i in range(len(arr)):\n        arr[i] = if_func(arr[i]) if predicator(arr[i]) else else_func(arr[i])\n    return arr\n", "model_name": "deepseek-v3"}
{"test_name": "inf_norm", "response_0": "def inf_norm(vec):\n    \"\"\"\n    Return the infinite-norm of the vector.\n    \"\"\"\n    max_abs = sfix(0)\n    for item in vec:\n        abs_item = item.abs()  # Absolute value of the item\n        max_abs = max_abs.max(abs_item)  # Update max_abs to the maximum of current max_abs and abs_item\n    return max_abs\n", "response_1": "def inf_norm(vec):\n    \"\"\"\n    Return the infinite-norm of the vector.\n    \"\"\"\n    sum = sfix(0)\n    for item in vec:\n        sum = if_else(sum >= abs(item), sum, abs(item))\n    return sum\n", "model_name": "deepseek-v3"}
{"test_name": "array_inc", "response_0": "from Compiler import types\n\ndef array_inc(arr):\n    \"\"\"\n    Increment all elements in the input array by 1\n    \"\"\"\n    for i in range(len(arr)):\n        arr[i] = arr[i] + 1\n    return arr\n", "response_1": "def array_inc(arr):\n    \"\"\"\n    Increment all elements in the input array by 1\n    \"\"\"\n    for i in range(len(arr)):\n        arr[i] = arr[i] + 1\n    return arr\n", "model_name": "deepseek-v3"}
{"test_name": "count_rises", "response_0": "def count_rises(arr):\n    \"\"\"\n    Count the number of rises in the array.\n    \"\"\"\n    count = sint(0)\n    n = len(arr)\n    for i in range(n-1):\n        rise = arr[i] < arr[i+1]\n        count = count + rise\n    return count\n", "response_1": "def count_rises(arr):\n    \"\"\"\n    Count the number of rises in the array.\n    \"\"\"\n    count = sint(0)  # Initialize count as a secret integer\n    n = len(arr)     # Get the length of the array\n    \n    for i in range(n-1):\n        # Check if arr[i] < arr[i+1]\n        is_rise = arr[i] < arr[i+1]\n        # Increment count if is_rise is true\n        count = count + is_rise.if_else(sint(1), sint(0))\n    \n    return count\n", "model_name": "deepseek-v3"}
{"test_name": "skip_at_zero", "response_0": "def skip_at_zero(array):\n    \"\"\"\n    Add 1 to all elements in the array, but skip if found an element equal to 0\n    \"\"\"\n    for i in range(len(array)):\n        # Check if the element is not equal to 0\n        condition = (array[i] != 0)\n        # If the condition is true, add 1 to the element\n        array[i] = array[i] + condition * 1\n    return array\n", "response_1": "def skip_at_zero(array):\n    \"\"\"\n    Add 1 to all elements in the array, but skip if found an element equal to 0\n    \"\"\"\n    for i in range(len(array)):\n        if array[i] != 0:\n            array[i] += 1\n    return array\n", "model_name": "deepseek-v3"}
{"test_name": "array_intersect", "response_0": "def array_intersect(p, q):\n    \"\"\"\n    Return whether the two arrays share any common element.\n    \"\"\"\n    result = False\n    for i in range(len(p)):\n        for j in range(len(q)):\n            result = result or (p[i] == q[j])\n    return result\n", "response_1": "def array_intersect(p, q):\n    \"\"\"\n    Return whether the two arrays share any common element.\n    \"\"\"\n    result = False\n    @for_range(len(p))\n    def _(i):\n        @for_range(len(q))\n        def _(j):\n            if p[i] == q[j]:\n                result.update(True)\n    return result\n", "model_name": "deepseek-v3"}
{"test_name": "two_norm", "response_0": "def two_norm(vec):\n    \"\"\"\n    Return the two-norm of the vector.\n    \"\"\"\n    sum = sfix(0)\n    for item in vec:\n        sum = sum + item * item\n    return sum.sqrt()\n", "response_1": "from Compiler.library import *\nfrom Compiler.types import *\nfrom Compiler.util import *\n\ndef two_norm(vec):\n    \"\"\"\n    Return the two-norm of the vector.\n    \"\"\"\n    sum = sfix(0)\n    for item in vec:\n        sum = sum + item * item\n    return sum.sqrt()\n", "model_name": "deepseek-v3"}
{"test_name": "sum_between", "response_0": "def sum_between(arr, l, u):\n    \"\"\"\n    Return the sum of elements in arr within range [l,u].\n    \"\"\"\n    sum = sfix(0)\n    for item in arr:\n        condition = (item >= l) * (item <= u)\n        sum = sum + condition * item\n    return sum\n", "response_1": "def sum_between(arr, l, u):\n    \"\"\"\n    Return the sum of elements in arr within range [l,u].\n    \"\"\"\n    sum = 0\n    for item in arr:\n        # Check if the item is within the range [l, u]\n        condition = (item >= l) * (item <= u)\n        # Add the item to the sum if the condition is true\n        sum = sum + condition * item\n    return sum\n", "model_name": "deepseek-v3"}
{"test_name": "largest_gap", "response_0": "def largest_gap(arr):\n    \"\"\"\n    Return the largest gap in the array.\n    The length of the input array is guaranteed to be at least 2.\n    \"\"\"\n    cur = sfix(0)\n    for i in range(len(arr)-1):\n        gap = abs(arr[i+1] - arr[i])\n        comp = gap > cur\n        cur = comp * gap + (1 - comp) * cur\n    return cur\n", "response_1": "def largest_gap(arr):\n    \"\"\"\n    Return the largest gap in the array.\n    The length of the input array is guaranteed to be at least 2.\n    \"\"\"\n    cur = 0\n    for i in range(len(arr)-1):\n        diff = abs(arr[i+1] - arr[i])\n        if diff > cur:\n            cur = diff\n    return cur\n", "model_name": "deepseek-v3"}
{"test_name": "totally_dominate", "response_0": "def totally_dominate(a, b):\n    \"\"\"\n    Return whether array a \"totally dominates\" array b,\n    which means, any element in a is no smaller than any element in b.\n    \"\"\"\n    amin = a[0]\n    bmax = b[0]\n    \n    # Find the minimum value in array a\n    for i in range(len(a)):\n        amin = if_else(a[i] < amin, a[i], amin)\n    \n    # Find the maximum value in array b\n    for i in range(len(b)):\n        bmax = if_else(b[i] > bmax, b[i], bmax)\n    \n    # Check if the minimum of a is greater than or equal to the maximum of b\n    return amin >= bmax\n", "response_1": "def totally_dominate(a, b):\n    \"\"\"\n    Return whether array a \"totally dominates\" array b, \n    which means, any element in a is no smaller than any element in b. \n    \"\"\"\n    amin = a[0]\n    bmax = b[0]\n    \n    # Find the minimum value in array a\n    for i in range(len(a)):\n        amin = min(amin, a[i])\n    \n    # Find the maximum value in array b\n    for i in range(len(b)):\n        bmax = max(bmax, b[i])\n    \n    # Return whether the minimum of a is greater than or equal to the maximum of b\n    return amin >= bmax\n", "model_name": "deepseek-v3"}
{"test_name": "element_count", "response_0": "def element_count(arr, target):\n    \"\"\"\n    Count the number of times the target element occurs in the array.\n    \"\"\"\n    ret = 0\n    for item in arr:\n        ret = ret + (item == target).if_else(1, 0)\n    return ret\n", "response_1": "def element_count(arr, target):\n    \"\"\"\n    Count the number of times the target element occurs in the array.\n    \"\"\"\n    ret = sfix(0)  # Initialize the return value as a secure fixed-point number\n    for item in arr:\n        # Secure comparison: if item == target, add 1 to ret\n        ret = ret + (item == target).if_else(sfix(1), sfix(0))\n    return ret\n", "model_name": "deepseek-v3"}
{"test_name": "is_subarray", "response_0": "def is_subarray(c, d):\n    \"\"\"\n    Return whether the first array is a continuous subarray of the second array.\n    \"\"\"\n    len_c = len(c)\n    len_d = len(d)\n    \n    for i in range(len_d):\n        if len_c <= len_d - i:\n            flag = True\n            for j in range(len_c):\n                flag = flag and (d[i + j] == c[j])\n            if flag:\n                return True\n    return False\n", "response_1": "def is_subarray(c, d):\n    \"\"\"\n    Return whether the first array is a continuous subarray of the second array.\n    \"\"\"\n    len_c = len(c)\n    len_d = len(d)\n    \n    for i in range(len_d):\n        if len_c <= len_d - i:\n            flag = True\n            for j in range(len_c):\n                flag = flag and (d[i + j] == c[j])\n            if flag:\n                return True\n    return False\n", "model_name": "deepseek-v3"}
{"test_name": "exists_5_or_7", "response_0": "def exists_5_or_7(arr):\n    \"\"\"\n    Check whether the secret-shared array contains 5 or 7.\n    \"\"\"\n    result = False\n    for item in arr:\n        # Securely check if the item is equal to 5 or 7\n        is_5 = item == 5\n        is_7 = item == 7\n        # Combine the results using OR\n        result = result | is_5 | is_7\n    return result\n", "response_1": "from Compiler import types\n\ndef exists_5_or_7(arr):\n    \"\"\"\n    Check whether the array contains 5 or 7.\n    \"\"\"\n    # Initialize a boolean variable to False\n    found = types.sint(0)\n    \n    # Iterate over the array\n    for item in arr:\n        # Check if the current item is 5 or 7\n        is_5 = item == 5\n        is_7 = item == 7\n        is_5_or_7 = is_5 + is_7 - is_5 * is_7  # Logical OR operation\n        \n        # Update the found variable\n        found = found + is_5_or_7 - found * is_5_or_7\n    \n    # Return the result (1 if found, 0 otherwise)\n    return found\n", "model_name": "deepseek-v3"}
{"test_name": "variance", "response_0": "def variance(arr):\n    \"\"\"\n    Return the variance of the array.\n    \"\"\"\n    # Initialize variables\n    average = sfix(0)\n    variance = sfix(0)\n    length = len(arr)\n    \n    # Calculate the average\n    for item in arr:\n        average = average + item / length\n    \n    # Calculate the variance\n    for item in arr:\n        variance = variance + (item - average) ** 2 / length\n    \n    return variance\n", "response_1": "from Compiler import types\n\ndef variance(arr):\n    \"\"\"\n    Return the variance of the array.\n    \"\"\"\n    n = len(arr)\n    average = types.sfix(0)\n    variance = types.sfix(0)\n    \n    # Calculate the average\n    for item in arr:\n        average = average + item / n\n    \n    # Calculate the variance\n    for item in arr:\n        variance = variance + (item - average) ** 2 / n\n    \n    return variance\n", "model_name": "deepseek-v3"}
{"test_name": "is_ascending", "response_0": "def is_ascending(arr):\n    \"\"\"\n    Return whether or not the array is in strictly ascending order.\n    If the length of input array is 1, you should return True.\n    \"\"\"\n    result = True\n    for i in range(len(arr)-1):\n        if arr[i] >= arr[i+1]:\n            result = False\n            break\n    return result\n", "response_1": "def is_ascending(arr):\n    \"\"\"\n    Return whether or not the array is in strictly ascending order.\n    If the length of input array is 1, you should return True.\n    \"\"\"\n    n = len(arr)\n    if n == 1:\n        return True\n    for i in range(n - 1):\n        if arr[i] >= arr[i + 1]:\n            return False\n    return True\n", "model_name": "deepseek-v3"}
{"test_name": "xor_all", "response_0": "def xor_all(arr):\n    \"\"\"\n    XOR all elements in the array and return the output.\n    The input array is guaranteed to contain only 0's and 1's.\n    \"\"\"\n    ret = arr[0]\n    for i in range(1, len(arr)):\n        ret = ret.bit_xor(arr[i])\n    return ret\n", "response_1": "def xor_all(arr):\n    \"\"\"\n    XOR all elements in the array and return the output.\n    The input array is guaranteed to contain only 0's and 1's.\n    \"\"\"\n    ret = arr[0]\n    for i in range(1, len(arr)):\n        ret = ret ^ arr[i]\n    return ret\n", "model_name": "deepseek-v3"}
{"test_name": "upper_bound", "response_0": "def upper_bound(arr, x):\n    \"\"\"\n    Return the index of the smallest element bigger than x in arr.\n    If such element does not exist, return -1.\n    \"\"\"\n    ret = -1\n    distance = 0\n    found = False\n    for i in range(len(arr)):\n        condition = arr[i] > x\n        if condition:\n            new_distance = arr[i] - x\n            update = (not found) or (new_distance < distance)\n            ret = ret * (1 - update) + i * update\n            distance = distance * (1 - update) + new_distance * update\n            found = found or update\n    return ret\n", "response_1": "def upper_bound(arr, x):\n    \"\"\"\n    Return the index of the smallest element bigger than x in arr.\n    If such element does not exist, return -1.\n    \"\"\"\n    ret = -1\n    distance = 0\n    found = False\n    for i in range(len(arr)):\n        condition = arr[i] > x\n        new_distance = arr[i] - x\n        update_ret = condition * (not found or new_distance < distance)\n        ret = update_ret * i + (1 - update_ret) * ret\n        distance = update_ret * new_distance + (1 - update_ret) * distance\n        found = update_ret * True + (1 - update_ret) * found\n    return ret\n", "model_name": "deepseek-v3"}
{"test_name": "array_process_then_sum", "response_0": "def array_process_then_sum(arr, func):\n    \"\"\"\n    Process all elements in the input array with given function, \n    then sum up the processed elements.\n    \"\"\"\n    sum = sfix(0)  # Initialize sum as a secret-shared fixed-point number\n    for i in range(len(arr)):\n        arr[i] = func(arr[i])  # Apply the function to each element\n        sum = sum + arr[i]  # Accumulate the sum\n    return sum\n", "response_1": "def array_process_then_sum(arr, func):\n    \"\"\"\n    Process all elements in the input array with given function, \n    then sum up the processed elements.\n    \"\"\"\n    sum = 0\n    for i in range(len(arr)):\n        arr[i] = func(arr[i])\n        sum = sum + arr[i]\n    return sum\n", "model_name": "deepseek-v3"}
{"test_name": "average", "response_0": "def average(arr):\n    \"\"\"\n    Compute the average value of the array.\n    \"\"\"\n    sum = sfix(0)\n    length = len(arr)\n    for i in range(length):\n        sum = sum + arr[i]\n    ret = sum / length\n    return ret\n", "response_1": "def average(arr):\n    \"\"\"\n    Compute the average value of the array.\n    \"\"\"\n    sum = sfix(0)\n    length = len(arr)\n    for i in range(length):\n        sum = sum + arr[i]\n    ret = sum / length\n    return ret\n", "model_name": "deepseek-v3"}
{"test_name": "array_filter", "response_0": "def array_filter(arr, predicator):\n    \"\"\"\n    For each element in the input array, \n    if the predicator returns True, then preserve the element, \n    otherwise set the element to 0. \n    \"\"\"\n    result = Array(len(arr), sint)  # Create a new array to store the result\n    for i in range(len(arr)):\n        result[i] = arr[i].if_else(predicator(arr[i]), 0)\n    return result\n", "response_1": "def array_filter(arr, predicator):\n    \"\"\"\n    For each element in the input array, \n    if the predicator returns True, then preserve the element, \n    otherwise set the element to 0.\n    \"\"\"\n    result = Array(len(arr), sfix)\n    for i in range(len(arr)):\n        result[i] = arr[i] * predicator(arr[i])\n    return result\n", "model_name": "deepseek-v3"}
{"test_name": "sum_up", "response_0": "def sum_up(array):\n    \"\"\"\n    The sum_up function in MP-SPDZ\n    \"\"\"\n    sum = sint(0)\n    for num in array:\n        sum = sum + num\n    return sum\n", "response_1": "def sum_up(array):\n    \"\"\"\n    The sum_up function in MP-SPDZ\n    \"\"\"\n    sum = sfix(0)\n    for num in array:\n        sum = sum + num\n    return sum\n", "model_name": "deepseek-v3"}
{"test_name": "negative_to_zero", "response_0": "def negative_to_zero(array):\n    \"\"\"\n    Turn the negative elements in the array to zero\n    \"\"\"\n    for i in range(len(array)):\n        # Check if the element is negative\n        is_negative = array[i] < 0\n        # If negative, set to 0, otherwise keep the original value\n        array[i] = is_negative.if_else(0, array[i])\n    return array\n", "response_1": "def negative_to_zero(array):\n    \"\"\"\n    Turn the negative elements in the array to zero\n    \"\"\"\n    for i in range(len(array)):\n        # Check if the element is negative\n        is_negative = array[i] < 0\n        \n        # If the element is negative, set it to zero, otherwise keep the original value\n        array[i] = is_negative.if_else(0, array[i])\n    \n    return array\n", "model_name": "deepseek-v3"}
{"test_name": "sum_only_positive_to_ten", "response_0": "from Compiler import types\n\ndef sum_only_positive_to_ten(array):\n    \"\"\"\n    Compute partial sum of the array with only the positive elements until the sum becomes no smaller than 10.\n    \"\"\"\n    sum = types.sint(0)\n    for i in range(len(array)):\n        if array[i] <= 0:\n            continue\n        if sum >= 10:\n            break\n        sum = sum + array[i]\n    return sum\n", "response_1": "from Compiler import types\n\ndef sum_only_positive_to_ten(array):\n    \"\"\"\n    Compute partial sum of the array with only the positive elements until the sum becomes no smaller than 10.\n    \"\"\"\n    sum = types.sint(0)\n    for i in range(len(array)):\n        is_positive = array[i] > 0\n        sum_lt_10 = sum < 10\n        should_add = is_positive * sum_lt_10\n        sum = sum + should_add * array[i]\n    return sum\n", "model_name": "deepseek-v3"}
{"test_name": "bubble_sort", "response_0": "def bubble_sort(arr):\n    \"\"\"\n    Perform bubble sort on the array using MP-SPDZ.\n    \"\"\"\n    n = len(arr)\n    for i in range(n - 1):\n        for j in range(n - 1 - i):\n            # Compare arr[j] and arr[j+1] securely\n            cmp = arr[j] >= arr[j + 1]\n            # Swap arr[j] and arr[j+1] if arr[j] >= arr[j+1]\n            temp = arr[j]\n            arr[j] = cmp.if_else(arr[j + 1], arr[j])\n            arr[j + 1] = cmp.if_else(temp, arr[j + 1])\n    return arr\n", "response_1": "def bubble_sort(arr):\n    \"\"\"\n    Perform bubble sort on the array using secret-shared values.\n    \"\"\"\n    n = len(arr)\n    for i in range(n - 1):\n        for j in range(n - 1 - i):\n            # Compare arr[j] and arr[j+1]\n            cmp = arr[j] >= arr[j + 1]\n            # Swap arr[j] and arr[j+1] if arr[j] >= arr[j+1]\n            temp = arr[j]\n            arr[j] = cmp.if_else(arr[j + 1], arr[j])\n            arr[j + 1] = cmp.if_else(temp, arr[j + 1])\n    return arr\n", "model_name": "deepseek-v3"}
