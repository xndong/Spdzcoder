{"test_name": "indicate_positive", "response_0": "def indicate_positive(arr):\n    \"\"\"\n    For the given array, return an array with the same size. \n    If one element in the input array is positive, \n    then the corresponding element in the returned array will be 1, \n    otherwise the element in the returned array will be 0. \n    \"\"\"\n    n = len(arr)\n    ret = Array(n, sint)\n    for i in range(n):\n        ret[i] = arr[i] > 0\n    return ret\n", "response_1": "def indicate_positive(arr):\n    \"\"\"\n    For the given array, return an array with the same size. \n    If one element in the input array is positive, \n    then the corresponding element in the returned array will be 1, \n    otherwise the element in the returned array will be 0. \n    \"\"\"\n    n = len(arr)\n    ret = Array(n, sint)\n    for i in range(n):\n        ret[i] = arr[i] > 0\n    return ret\n", "model_name": "deepseek-v2.5"}
{"test_name": "array_xor", "response_0": "def array_xor(a, b):\n    \"\"\"\n    Compute the elementwise XOR of the two input vectors.\n    \"\"\"\n    n = len(a)\n    ret = [sint(0) for _ in range(n)]\n    for i in range(n):\n        ret[i] = a[i] ^ b[i]\n    return ret\n", "response_1": "def array_xor(a, b):\n    \"\"\"\n    Compute the elementwise XOR of the two input vectors.\n    \"\"\"\n    n = len(a)\n    ret = sfix.Array(n)\n    for i in range(n):\n        ret[i] = a[i] ^ b[i]\n    return ret\n", "model_name": "deepseek-v2.5"}
{"test_name": "interlaced_placement", "response_0": "def interlaced_placement(a, b):\n    \"\"\"\n    Interleave the elements in two sequences.\n    The two input arrays are guaranteed to have the same length. \n    \"\"\"\n    n = len(a)\n    ret = Array(2 * n, sint)\n    for i in range(2 * n):\n        if i % 2 == 1:\n            ret[i] = b[(i - 1) // 2]\n        else:\n            ret[i] = a[i // 2]\n    return ret\n", "response_1": "def interlaced_placement(a, b):\n    \"\"\"\n    Interleave the elements in two sequences.\n    The two input arrays are guaranteed to have the same length. \n    \"\"\"\n    n = len(a)\n    ret = Array(2 * n, sint)\n    for i in range(2 * n):\n        if i % 2 == 1:\n            ret[i] = b[(i - 1) // 2]\n        else:\n            ret[i] = a[i // 2]\n    return ret\n", "model_name": "deepseek-v2.5"}
{"test_name": "array_and", "response_0": "def array_and(a, b):\n    \"\"\"\n    Compute the elementwise AND of the two input vectors.\n    \"\"\"\n    n = len(a)\n    ret = sfix.Array(n)\n    for i in range(n):\n        ret[i] = a[i] & b[i]\n    return ret\n", "response_1": "def array_and(a, b):\n    \"\"\"\n    Compute the elementwise AND of the two input vectors.\n    \"\"\"\n    assert len(a) == len(b), \"Input vectors must have the same length\"\n    ret = sfix.Array(len(a))  # Create an array to store the result\n    for i in range(len(a)):\n        ret[i] = a[i] & b[i]  # Use bitwise AND operation\n    return ret\n", "model_name": "deepseek-v2.5"}
{"test_name": "array_indicator", "response_0": "def array_indicator(arr, predicator):\n    \"\"\"\n    Return an array with the same size of the input array. \n    For each element in the input array, \n    the corresponding value in the returned array is set to be the value of the predicator. \n    \"\"\"\n    n = len(arr)\n    ret = Array(n, sint)\n    for i in range(n):\n        ret[i] = predicator(arr[i])\n    return ret\n", "response_1": "def array_indicator(arr, predicator):\n    \"\"\"\n    Return an array with the same size of the input array. \n    For each element in the input array, \n    the corresponding value in the returned array is set to be the value of the predicator. \n    \"\"\"\n    n = len(arr)\n    ret = Array(n, sfix)\n    for i in range(n):\n        ret[i] = predicator(arr[i])\n    return ret\n", "model_name": "deepseek-v2.5"}
{"test_name": "array_greater_than_scalar", "response_0": "def array_greater_than_scalar(arr, bound):\n    \"\"\"\n    Given an input array and a bound, \n    return an array indicating whether each element is greater than the bound. \n    \"\"\"\n    ret = Array(len(arr), sbit)\n    for i in range(len(arr)):\n        ret[i] = arr[i] > bound\n    return ret\n", "response_1": "def array_greater_than_scalar(arr, bound):\n    \"\"\"\n    Given an input array and a bound, \n    return an array indicating whether each element is greater than the bound. \n    \"\"\"\n    ret = sfix.Array(len(arr))  # Create an array of fixed-point numbers\n    for i in range(len(arr)):\n        ret[i] = arr[i] > bound\n    return ret\n", "model_name": "deepseek-v2.5"}
{"test_name": "array_no_greater_than_scalar", "response_0": "def array_no_greater_than_scalar(arr, bound):\n    \"\"\"\n    Given an input array and a bound, \n    return an array indicating whether each element is no greater than the bound. \n    \"\"\"\n    n = len(arr)\n    ret = sfix.Array(n)\n    for i in range(n):\n        ret[i] = arr[i] <= bound\n    return ret\n", "response_1": "def array_no_greater_than_scalar(arr, bound):\n    \"\"\"\n    Given an input array and a bound, \n    return an array indicating whether each element is no greater than the bound. \n    \"\"\"\n    n = len(arr)\n    ret = Array(n, sint)\n    for i in range(n):\n        ret[i] = arr[i] <= bound\n    return ret\n", "model_name": "deepseek-v2.5"}
{"test_name": "reverse_and_concat", "response_0": "def reverse_and_concat(a):\n    \"\"\"\n    Reverse the input array and concatenate it to the original array. \n    \"\"\"\n    n = len(a)\n    b = [a[n-1-i] for i in range(n)]\n    return a + b\n\n# MP-SPDZ version\ndef reverse_and_concat_mpspdz(a):\n    n = len(a)\n    b = sfix.Array(n)\n    for i in range(n):\n        b[i] = a[n-1-i]\n    return a + b\n", "response_1": "def reverse_and_concat(a):\n    \"\"\"\n    Reverse the input array and concatenate it to the original array.\n    \"\"\"\n    n = len(a)\n    b = Array(n, sint)\n    for i in range(n):\n        b[i] = a[n-1-i]\n    return a + b\n", "model_name": "deepseek-v2.5"}
{"test_name": "array_round", "response_0": "def array_round(arr):\n    \"\"\"\n    Round every element in the array to the nearest integer.\n    \"\"\"\n    ret = sfix.Array(len(arr))\n    for i in range(len(arr)):\n        int_part = arr[i].floor()\n        if arr[i] - int_part < sfix(0.5):\n            ret[i] = int_part\n        else:\n            ret[i] = int_part + 1\n    return ret\n", "response_1": "def array_round(arr):\n    \"\"\"\n    Round every element in the array to the nearest integer.\n    \"\"\"\n    n = len(arr)\n    ret = sfix.Array(n)\n    for i in range(n):\n        int_part = sfix.floor(arr[i])\n        frac_part = arr[i] - int_part\n        ret[i] = int_part + (frac_part >= 0.5)\n    return ret\n", "model_name": "deepseek-v2.5"}
{"test_name": "array_greater_eq", "response_0": "def array_greater_eq(arr, brr):\n    \"\"\"\n    For the two input arrays arr and brr, return an array ret with the same size. \n    For index i, if arr[i] >= brr[i], ret[i] will be set to 1, otherwise ret[i] will be set to 0. \n    The two input arrays are guaranteed to have the same length. \n    \"\"\"\n    n = len(arr)\n    ret = sfix.Array(n)\n    for i in range(n):\n        ret[i] = sfix(1) if arr[i] >= brr[i] else sfix(0)\n    return ret\n", "response_1": "def array_greater_eq(arr, brr):\n    \"\"\"\n    For the two input arrays arr and brr, return an array ret with the same size. \n    For index i, if arr[i] >= brr[i], ret[i] will be set to 1, otherwise ret[i] will be set to 0. \n    The two input arrays are guaranteed to have the same length. \n    \"\"\"\n    n = len(arr)\n    ret = Array(n, sint)\n    for i in range(n):\n        ret[i] = arr[i] >= brr[i]\n    return ret\n", "model_name": "deepseek-v2.5"}
{"test_name": "reverse", "response_0": "def reverse(const vector<int>& arr) {\n    int n = arr.size();\n    vector<int> ret(n);\n    for (int i = 0; i < n; i++) {\n        ret[i] = arr[n - 1 - i];\n    }\n    return ret;\n}\n", "response_1": "def reverse(arr):\n    \"\"\"\n    Reverse the array. \n    \"\"\"\n    n = len(arr)\n    ret = Array(n, sint)\n    for i in range(n):\n        ret[i] = arr[n - 1 - i]\n    return ret\n", "model_name": "deepseek-v2.5"}
{"test_name": "indicate_negative", "response_0": "def indicate_negative(arr):\n    n = len(arr)\n    ret = Array(n, sint)\n    for i in range(n):\n        ret[i] = arr[i] < 0\n    return ret\n", "response_1": "def indicate_negative(arr):\n    \"\"\"\n    For the given array, return an array with the same size. \n    If one element in the input array is negative, \n    then the corresponding element in the returned array will be 1, \n    otherwise the element in the returned array will be 0. \n    \"\"\"\n    n = len(arr)\n    ret = sfix.Array(n)\n    for i in range(n):\n        ret[i] = sfix(1) if arr[i] < 0 else sfix(0)\n    return ret\n", "model_name": "deepseek-v2.5"}
{"test_name": "max_sub_sequence", "response_0": "def max_sub_sequence(arr):\n    \"\"\"\n    Use dynamic programming to find the sum of max continuous subsequence of the input array.\n    \"\"\"\n    n = len(arr)\n    partial_max = Array(n, sint)\n    suffix_max = Array(n, sint)\n    \n    partial_max[0] = arr[0]\n    suffix_max[0] = arr[0]\n    \n    for i in range(1, n):\n        suffix_max[i] = max(suffix_max[i-1] + arr[i], arr[i])\n        partial_max[i] = max(partial_max[i-1], suffix_max[i])\n    \n    return partial_max[n-1]\n", "response_1": "def max_sub_sequence(arr: Array):\n    n = len(arr)\n    partial_max = Array(n, sint)\n    suffix_max = Array(n, sint)\n    partial_max[0] = arr[0]\n    suffix_max[0] = arr[0]\n\n    for i in range(1, n):\n        suffix_max[i] = max(suffix_max[i-1] + arr[i], arr[i])\n        partial_max[i] = max(partial_max[i-1], suffix_max[i])\n\n    return partial_max[n-1]\n", "model_name": "deepseek-v2.5"}
{"test_name": "compare_and_select", "response_0": "def compare_and_select(a, b):\n    \"\"\"\n    Compare the two arrays elementwise, \n    and save the larger value into the returned array. \n    \"\"\"\n    n = len(a)\n    ret_array = Array(n, sint)\n    for i in range(n):\n        ret_array[i] = a[i] > b[i]\n        ret_array[i] = ret_array[i].if_else(a[i], b[i])\n\n    return ret_array\n", "response_1": "def compare_and_select(a, b):\n    \"\"\"\n    Compare the two arrays elementwise, \n    and save the larger value into the returned array. \n    \"\"\"\n    n = len(a)\n    ret_array = Array(n, sint)\n    for i in range(n):\n        ret_array[i] = a[i] + (b[i] - a[i]) * (a[i] < b[i])\n    return ret_array\n", "model_name": "deepseek-v2.5"}
{"test_name": "count_element_frequency", "response_0": "from Compiler import mpc_math\n\ndef count_element_frequency(l):\n    \"\"\"\n    Return an array with the same size of the original array, \n    each position of which records the number of occurrences of the element at the same position. \n    \"\"\"\n    n = len(l)\n    ret = [sint(0) for _ in range(n)]\n    \n    for i in range(n):\n        for j in range(n):\n            # Secret-shared comparison l[j] == l[i]\n            eq = l[j] == l[i]\n            # Secret-shared addition to ret[i]\n            ret[i] = ret[i] + eq\n    \n    return ret\n", "response_1": "from Compiler import types\n\ndef count_element_frequency(l: types.Array):\n    \"\"\"\n    Return an array with the same size of the original array, \n    each position of which records the number of occurrences of the element at the same position. \n    \"\"\"\n    n = len(l)\n    ret = types.Array(n, types.sint)\n    for i in range(n):\n        ret[i] = 0\n    \n    for i in range(n):\n        for j in range(n):\n            ret[i] = ret[i] + (l[j] == l[i])\n    \n    return ret\n", "model_name": "deepseek-v2.5"}
{"test_name": "array_or", "response_0": "def array_or(a, b):\n    \"\"\"\n    Compute the elementwise OR of the two input vectors.\n    \"\"\"\n    assert len(a) == len(b), \"Input vectors must have the same length\"\n    ret = sbits(len(a))\n    for i in range(len(a)):\n        ret[i] = a[i] | b[i]\n    return ret\n", "response_1": "def array_or(a, b):\n    \"\"\"\n    Compute the elementwise OR of the two input vectors.\n    \"\"\"\n    assert len(a) == len(b), \"Input vectors must have the same length\"\n    \n    ret = sfix.Array(len(a))\n    for i in range(len(a)):\n        ret[i] = a[i] | b[i]\n    return ret\n", "model_name": "deepseek-v2.5"}
{"test_name": "stock_predicator", "response_0": "def stock_predicator(days):\n    \"\"\"\n    Given the stock price in the next few days (at least 3 days).\n    Use dynamic programming to find the days, \n    such that buying on the earlier day and selling on the later day is the most profitable\n    If all choices cause negative profits, you should return 0.\n    \"\"\"\n    n = len(days)\n    lowest = sfix.Array(n)\n    partial_max = sfix.Array(n)\n    \n    lowest[0] = days[0]\n    for i in range(1, n):\n        lowest[i] = lowest[i-1] if lowest[i-1] <= days[i] else days[i]\n        partial_max[i] = partial_max[i-1] if partial_max[i-1] >= days[i] - lowest[i-1] else days[i] - lowest[i-1]\n    \n    return partial_max[n-1]\n", "response_1": "def stock_predicator(days):\n    n = len(days)\n    lowest = sint.Array(n)\n    partial_max = sint.Array(n)\n    lowest[0] = days[0]\n    for i in range(1, n):\n        lowest[i] = lowest[i - 1] if lowest[i - 1] <= days[i] else days[i]\n        partial_max[i] = partial_max[i - 1] if partial_max[i - 1] >= days[i] - lowest[i - 1] else days[i] - lowest[i - 1]\n    return partial_max[n - 1]\n", "model_name": "deepseek-v2.5"}
{"test_name": "len5_inc_array", "response_0": "def len5_inc_array(init):\n    \"\"\"\n    Return an increase-by-one array with given initial element and length 5.\n    \"\"\"\n    ret = Array(5, sint)\n    for i in range(5):\n        ret[i] = init + i\n    return ret\n", "response_1": "def len5_inc_array(init):\n    \"\"\"\n    Return an increase-by-one array with given initial element and length 5.\n    \"\"\"\n    ret = sfix.Array(5)\n    for i in range(5):\n        ret[i] = init + i\n    return ret\n", "model_name": "deepseek-v2.5"}
{"test_name": "cut_first_five", "response_0": "def cut_first_five(arr):\n    \"\"\"\n    Return the array composed of the first 5 elements of the input array. \n    If the input array does not have 5 elements, pad with 0.\n    \"\"\"\n    ret = sfix.Array(5)\n    for i in range(5):\n        if i < len(arr):\n            ret[i] = arr[i]\n        else:\n            ret[i] = sfix(0)\n    return ret\n", "response_1": "def cut_first_five(arr):\n    \"\"\"\n    Return the array composed of the first 5 elements of the input array. \n    If the input array does not have 5 elements, pad with 0.\n    \"\"\"\n    ret = sfix.Array(5)\n    for i in range(5):\n        if i < len(arr):\n            ret[i] = arr[i]\n        else:\n            ret[i] = sfix(0)\n    return ret\n", "model_name": "deepseek-v2.5"}
{"test_name": "max_pooling_1d", "response_0": "def max_pooling_1d(vec, step):\n    \"\"\"\n    Do 1-dimensional max pooling on vec with step. \n    Ignoring the remaining elements in the vector.\n    \"\"\"\n    ret_length = len(vec) // step\n    ret = sfix.Array(ret_length)\n    \n    for i in range(ret_length):\n        max_val = vec[i * step]\n        for j in range(1, step):\n            max_val = max(max_val, vec[i * step + j])\n        ret[i] = max_val\n    \n    return ret\n", "response_1": "def max_pooling_1d(vec, step):\n    \"\"\"\n    Do 1-dimensional max pooling on vec with step.\n    Ignoring the remaining elements in the vector.\n    \"\"\"\n    n = len(vec)\n    ret_length = n // step\n    ret = Array(ret_length, sint)\n    \n    for i in range(ret_length):\n        max_val = vec[i * step]\n        for j in range(1, step):\n            max_val = max_val.max(vec[i * step + j])\n        ret[i] = max_val\n    \n    return ret\n", "model_name": "deepseek-v2.5"}
{"test_name": "array_greater", "response_0": "def array_greater(arr, brr):\n    \"\"\"\n    For the two input arrays arr and brr, return an array ret with the same size. \n    For index i, if arr[i]>brr[i], ret[i] will be set to 1, otherwise ret[i] will be set to 0. \n    The two input arrays are guaranteed to have the same length. \n    \"\"\"\n    n = len(arr)\n    ret = Array(n, sint)\n    for i in range(n):\n        ret[i] = arr[i] > brr[i]\n    return ret\n", "response_1": "from Compiler import mpc_math\n\ndef array_greater(arr, brr):\n    \"\"\"\n    For the two input arrays arr and brr, return an array ret with the same size. \n    For index i, if arr[i]>brr[i], ret[i] will be set to 1, otherwise ret[i] will be set to 0. \n    The two input arrays are guaranteed to have the same length. \n    \"\"\"\n    n = len(arr)\n    ret = [0] * n\n    \n    for i in range(n):\n        ret[i] = mpc_math.cond_swap(arr[i] > brr[i], 1, 0)\n    \n    return ret\n", "model_name": "deepseek-v2.5"}
{"test_name": "dumb_concat", "response_0": "def dumb_concat(arr, brr):\n    \"\"\"\n    Concatenate the second array to the first array in a dumb way.\n    \"\"\"\n    length = len(arr) + len(brr)\n    ret = Array(length, sint)\n    for i in range(len(arr)):\n        ret[i] = arr[i]\n    for j in range(len(brr)):\n        ret[len(arr) + j] = brr[j]\n    return ret\n", "response_1": "def dumb_concat(arr, brr):\n    \"\"\"\n    Concatenate the second array to the first array in a dumb way.\n    \"\"\"\n    length = len(arr) + len(brr)\n    ret = Array(length, sint)\n    for i in range(len(arr)):\n        ret[i] = arr[i]\n    for j in range(len(brr)):\n        ret[len(arr) + j] = brr[j]\n    return ret\n", "model_name": "deepseek-v2.5"}
{"test_name": "indicator_if_else", "response_0": "def indicator_if_else(a, b, ind):\n    \"\"\"\n    Return an array c with the same length of a and b. \n    The element of c is set to be the corresponding element of a if the indicator is 1, \n    and is set to be the corresponding element of b if the indicator is 0.\n    \"\"\"\n    n = len(ind)\n    c = Array(n, sint)\n    for i in range(n):\n        c[i] = a[i] * ind[i] + b[i] * (1 - ind[i])\n    return c\n", "response_1": "def indicator_if_else(a, b, ind):\n    \"\"\"\n    Return an array c with the same length of a and b. \n    The element of c is set to be the corresponding element of a if the indicator is 1, \n    and is set to be the corresponding element of b if the indicator is 0.\n    \"\"\"\n    n = len(ind)\n    c = Array(n, sint)\n    for i in range(n):\n        c[i] = a[i] * ind[i] + b[i] * (1 - ind[i])\n    return c\n", "model_name": "deepseek-v2.5"}
{"test_name": "elementwise_multiplication", "response_0": "def elementwise_multiplication(a, b):\n    \"\"\"\n    Compute the elementwise multiplication of the two input vectors.\n    \"\"\"\n    n = len(a)\n    ret = sfix.Array(n)\n    for i in range(n):\n        ret[i] = a[i] * b[i]\n    return ret\n", "response_1": "def elementwise_multiplication(a, b):\n    \"\"\"\n    Compute the elementwise multiplication of the two input vectors.\n    \"\"\"\n    assert len(a) == len(b), \"Input vectors must have the same length\"\n    ret = sfix.Array(len(a))\n    for i in range(len(a)):\n        ret[i] = a[i] * b[i]\n    return ret\n", "model_name": "deepseek-v2.5"}
{"test_name": "get_subarr_by_indices", "response_0": "def get_subarr_by_indices(a, indices):\n    \"\"\"\n    Get the subarray of the input array indicated by the indices. \n    The inputs are guaranteed to be legal.\n    \"\"\"\n    n = len(indices)\n    ret = Array(n, sint)\n    for i in range(n):\n        ret[i] = a[indices[i]]\n    return ret\n", "response_1": "def get_subarr_by_indices(a, indices):\n    \"\"\"\n    Get the subarray of the input array indicated by the indices.\n    The inputs are guaranteed to be legal.\n    \"\"\"\n    n = len(indices)\n    ret = Array(n, sint)\n    for i in range(n):\n        ret[i] = a[indices[i]]\n    return ret\n", "model_name": "deepseek-v2.5"}
{"test_name": "inc_array", "response_0": "def inc_array(num):\n    \"\"\"\n    Return an array with length num and elements 1 to num. \n    The input is guaranteed to be a cleartext positive integer.\n    \"\"\"\n    # Ensure num is a clear integer\n    num = cint(num)\n    \n    # Create an array with elements from 1 to num\n    result = Array(num, sint)\n    for i in range(num):\n        result[i] = sint(i + 1)\n    \n    return result\n", "response_1": "def inc_array(num):\n    \"\"\"\n    Return an array with length num and elements 1 to num. \n    The input is guaranteed to be a cleartext positive integer.\n    \"\"\"\n    result = Array(num, sint)\n    for i in range(num):\n        result[i] = sint(i + 1)\n    return result\n", "model_name": "deepseek-v2.5"}
{"test_name": "cut_last_five", "response_0": "def cut_last_five(arr : Array[5][sint]):\n    \"\"\"\n    Return the array composed of the last 5 elements of the input array. \n    If the input array does not have 5 elements, pad with 0 (at the beginning).\n    \"\"\"\n    ret = Array(5, sint)\n    for i in range(5):\n        ret[i] = sint(0)\n    \n    length = cint(len(arr))\n    for i in range(min(5, length)):\n        ret[4 - i] = arr[length - 1 - i]\n    \n    return ret\n", "response_1": "def cut_last_five(arr):\n    \"\"\"\n    Return the array composed of the last 5 elements of the input array. \n    If the input array does not have 5 elements, pad with 0 (at the beginning).\n    \"\"\"\n    ret = sint.Array(5)\n    for i in range(5):\n        ret[i] = sint(0)\n    \n    length = len(arr)\n    for i in range(min(5, length)):\n        ret[4 - i] = arr[length - 1 - i]\n    \n    return ret\n", "model_name": "deepseek-v2.5"}
{"test_name": "average_pooling_1d", "response_0": "def average_pooling_1d(vec, step):\n    \"\"\"\n    Do 1-dimensional average pooling on vec with step. \n    Ignoring the remaining elements in the vector.\n    \"\"\"\n    ret_length = len(vec) // step\n    ret = sfix.Array(ret_length)\n    for i in range(ret_length):\n        avg = sfix(0)\n        for j in range(step):\n            avg += vec[i * step + j] / sfix(step)\n        ret[i] = avg\n    return ret\n", "response_1": "from Compiler import Array\n\ndef average_pooling_1d(vec, step):\n    \"\"\"\n    Do 1-dimensional average pooling on vec with step. \n    Ignoring the remaining elements in the vector.\n    \"\"\"\n    ret_length = len(vec) // step\n    ret = Array(ret_length, sfix)\n    for i in range(ret_length):\n        avg = sfix(0)\n        for j in range(step):\n            avg += vec[i * step + j] / sfix(step)\n        ret[i] = avg\n    return ret\n", "model_name": "deepseek-v2.5"}
{"test_name": "array_relu", "response_0": "def array_relu(arr):\n    \"\"\"\n    Apply ReLU function elementwisely to the input array.\n    \"\"\"\n    n = len(arr)\n    ret = Array(n, sint)\n    for i in range(n):\n        ret[i] = arr[i].if_else(arr[i], 0)\n    return ret\n", "response_1": "from Compiler import mpc_math\n\ndef array_relu(arr):\n    \"\"\"\n    Apply ReLU function elementwisely to the input array.\n    \"\"\"\n    n = len(arr)\n    ret = [sint(0) for _ in range(n)]\n    for i in range(n):\n        ret[i] = mpc_math.smax(arr[i], sint(0))\n    return ret\n", "model_name": "deepseek-v2.5"}
{"test_name": "move_to_end", "response_0": "from Compiler import mpc_math\n\ndef move_to_end(arr, index):\n    \"\"\"\n    Move the element with given index in the array to the end of the array.\n    The index is guaranteed to be legal.\n    \"\"\"\n    n = len(arr)\n    temp = arr[index]\n    \n    for i in range(index, n-1):\n        arr[i] = arr[i+1]\n    \n    arr[n-1] = temp\n    return arr\n\n# Example usage in MP-SPDZ\n# arr = [sint(x) for x in [1, 2, 3, 4]]\n# index = sint(2)\n# new_arr = move_to_end(arr, index)\n", "response_1": "# Example usage\narr = Array(5, sint)  # Create an array of 5 secret integers\narr.assign([1, 2, 3, 4, 5])  # Assign values to the array\nindex = 2  # Example index\nresult = move_to_end(arr, index)\n", "model_name": "deepseek-v2.5"}
{"test_name": "set_to_zero", "response_0": "def set_to_zero(arr, index):\n    \"\"\"\n    Set the element in the input array with given index to zero.\n    The input index is guaranteed to be legal.\n    \"\"\"\n    arr[index] = sfix(0)  # Set the element at the given index to zero\n    return arr\n", "response_1": "def set_to_zero(arr, index):\n    \"\"\"\n    Set the element in the input array with given index to zero.\n    The input index is guaranteed to be legal.\n    \"\"\"\n    arr[index] = sint(0)  # Set the element at the given index to a secure integer 0\n    return arr\n", "model_name": "deepseek-v2.5"}
{"test_name": "last_partial_sum", "response_0": "def last_partial_sum(arr, n):\n    \"\"\"\n    Return the sum of the last n elements in the input array.\n    n is guaranteed to be legal.\n    \"\"\"\n    ret = sfix(0)\n    for i in range(len(arr) - n, len(arr)):\n        ret = ret + arr[i]\n    return ret\n", "response_1": "def last_partial_sum(arr, n):\n    \"\"\"\n    Return the sum of the last n elements in the input array.\n    n is guaranteed to be legal.\n    \"\"\"\n    ret = sint(0)  # Initialize the return value as a secret integer\n    start_index = len(arr) - n  # Calculate the starting index\n\n    for i in range(start_index, len(arr)):\n        ret = ret + arr[i]  # Accumulate the sum\n\n    return ret\n", "model_name": "deepseek-v2.5"}
{"test_name": "permute_by_indices", "response_0": "def permute_by_indices(a, indices):\n    \"\"\"\n    Permute the input array a by the indices. \n    The i'th element in the returned array will be a[indices[i]]. \n    The input indices are guaranteed to be a legal permutation. \n    \"\"\"\n    n = len(a)\n    ret = Array(n, sint)\n    for i in range(n):\n        ret[i] = a[indices[i]]\n    return ret\n", "response_1": "def permute_by_indices(a, indices):\n    \"\"\"\n    Permute the input array a by the indices. \n    The i'th element in the returned array will be a[indices[i]]. \n    The input indices are guaranteed to be a legal permutation. \n    \"\"\"\n    n = len(a)\n    ret = Array(n, sint)\n    for i in range(n):\n        ret[i] = a[indices[i]]\n    return ret\n", "model_name": "deepseek-v2.5"}
{"test_name": "get_rank", "response_0": "#include \"math.h\"\n#include \"arr.h\"\n\ntemplate <typename T>\nint get_rank(const vector<T>& arr, int index) {\n    int rank = 0;\n    T target = arr[index];\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] < target) {\n            rank += 1;\n        }\n    }\n    return rank;\n}\n\nint main() {\n    // Example usage\n    int n = 10; // size of the array\n    vector<sint> arr(n);\n    int index = 5; // example index\n\n    // Read the array from input\n    for (int i = 0; i < n; i++) {\n        arr[i] = sint::input();\n    }\n\n    // Compute the rank\n    int rank = get_rank(arr, index);\n\n    // Output the result\n    cout << \"The rank is: \" << rank << endl;\n\n    return 0;\n}\n", "response_1": "def get_rank(arr, index):\n    \"\"\"\n    Get the rank in the array of the element (how many elements are smaller than the element) with given index.\n    \"\"\"\n    rank = sint(0)\n    element = arr[index]\n    for i in range(len(arr)):\n        is_smaller = ltz(arr[i] - element)\n        rank = rank + is_smaller\n    return rank\n", "model_name": "deepseek-v2.5"}
{"test_name": "interchange_by_indices", "response_0": "def interchange_by_indices(arr, index1, index2):\n    \"\"\"\n    Interchange the two elements in the array with given indices. \n    The input indices are guaranteed to be legal. \n    \"\"\"\n    temp = arr[index1]\n    arr[index1] = arr[index2]\n    arr[index2] = temp\n    return arr\n", "response_1": "# Example usage in MP-SPDZ\nfrom Compiler import array\n\ndef main():\n    # Define an array of secret shared values\n    arr = array.Array(5, sint)\n    arr[0] = sint(1)\n    arr[1] = sint(2)\n    arr[2] = sint(3)\n    arr[3] = sint(4)\n    arr[4] = sint(5)\n\n    # Define secret shared indices\n    index1 = sint(1)\n    index2 = sint(3)\n\n    # Call the function to interchange elements\n    arr = interchange_by_indices_mpspdz(arr, index1, index2)\n\n    # Output the result (for debugging purposes)\n    for i in range(5):\n        print_ln(\"%s\", arr[i].reveal())\n\n# Define the MP-SPDZ version of the function\ndef interchange_by_indices_mpspdz(arr, index1, index2):\n    temp = arr[index1]\n    arr[index1] = arr[index2]\n    arr[index2] = temp\n    return arr\n", "model_name": "deepseek-v2.5"}
{"test_name": "increase_by", "response_0": "def increase_by(arr, index, k):\n    \"\"\"\n    Increase the element arr[index] in the array arr by k.\n    \"\"\"\n    arr[index] = arr[index] + k\n    return arr\n", "response_1": "def increase_by(arr: sint, index: cint, k: sint):\n    \"\"\"\n    Increase the element arr[index] in the array arr by k.\n    \"\"\"\n    arr[index] = arr[index] + k\n    return arr\n", "model_name": "deepseek-v2.5"}
{"test_name": "retrieve_by_index", "response_0": "from Compiler import types\n\ndef main():\n    # Example array of secret integers\n    arr = types.sint([1, 2, 3, 4, 5])\n    \n    # Example index (must be a clear integer or a secret integer depending on the array type)\n    index = types.cint(2)\n    \n    # Retrieve the element by index\n    element = retrieve_by_index(arr, index)\n    \n    # Output the result (for debugging purposes)\n    print_ln(\"The retrieved element is: %s\", element.reveal())\n", "response_1": "# Define an array of integers\narr = Array(10, sint)\n\n# Define an index\nindex = sint(5)\n\n# Retrieve the element by index\nelement = retrieve_by_index(arr, index)\n", "model_name": "deepseek-v2.5"}
{"test_name": "scale_by", "response_0": "def scale_by(arr, index, k):\n    \"\"\"\n    Multiply the element arr[index] in the array arr by k.\n    \"\"\"\n    arr[index] = arr[index] * k\n    return arr\n\n# Example usage in MP-SPDZ\nfrom Compiler import mpc_math\n\ndef scale_by_mpspdz(arr, index, k):\n    arr[index] = arr[index] * k\n    return arr\n\n# Assuming arr is an array of sint or sfix and k is a sint or sfix\n# Example usage:\n# arr = Array(10, sint)  # Example array of size 10 with sint elements\n# index = sint(3)        # Example index\n# k = sint(2)            # Example scaling factor\n# result = scale_by_mpspdz(arr, index, k)\n", "response_1": "def scale_by(arr: Array, index: sint, k: sint) -> Array:\n    \"\"\"\n    Multiply the element arr[index] in the array arr by k.\n    \"\"\"\n    arr[index] = arr[index] * k\n    return arr\n", "model_name": "deepseek-v2.5"}
{"test_name": "take_opposite_to", "response_0": "def take_opposite_to(arr, index):\n    \"\"\"\n    Take opposite to the element in the array with given index. \n    The input index is guaranteed to be legal. \n    \"\"\"\n    arr[index] = -arr[index]\n    return arr\n\n# MP-SPDZ version\ndef take_opposite_to_mpspdz(arr, index):\n    \"\"\"\n    Take opposite to the element in the array with given index. \n    The input index is guaranteed to be legal. \n    \"\"\"\n    arr[index] = -arr[index]\n    return arr\n", "response_1": "def take_opposite_to(arr, index):\n    \"\"\"\n    Take opposite to the element in the array with given index.\n    The input index is guaranteed to be legal.\n    \"\"\"\n    # Assuming arr is a list of secret shared values\n    arr[index] = -arr[index]\n    return arr\n", "model_name": "deepseek-v2.5"}
{"test_name": "array_rank", "response_0": "def array_rank(l):\n    \"\"\"\n    Return an array with the same size of the original array, \n    each position of which records the number of elements smaller than the element at the same position. \n    \"\"\"\n    n = len(l)\n    ret = Array(n, sint)\n    for i in range(n):\n        ret[i] = 0\n        for j in range(n):\n            ret[i] = ret[i] + (l[j] < l[i])\n    return ret\n", "response_1": "from Compiler import mpc_math\n\ndef array_rank(l):\n    \"\"\"\n    Return an array with the same size of the original array, \n    each position of which records the number of elements smaller than the element at the same position. \n    \"\"\"\n    n = len(l)\n    ret = [sint(0) for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            condition = l[j] < l[i]\n            ret[i] = ret[i] + condition\n    return ret\n", "model_name": "deepseek-v2.5"}
{"test_name": "remove_by_index", "response_0": "def remove_by_index(arr, index):\n    \"\"\"\n    Remove the element in the array by index and return the remaining array.\n    The input index is guaranteed to be legal.\n    \"\"\"\n    n = len(arr)\n    ret = Array(n-1, sint)\n\n    for i in range(n-1):\n        @if_((i < index))\n        def _():\n            ret[i] = arr[i]\n        @else_\n        def _():\n            ret[i] = arr[i+1]\n\n    return ret\n", "response_1": "def remove_by_index(arr, index):\n    \"\"\"\n    Remove the element in the array by index and return the remaining array. \n    The input index is guaranteed to be legal. \n    \"\"\"\n    n = len(arr)\n    ret = Array(n-1, sint)\n    for i in range(n-1):\n        if i < index:\n            ret[i] = arr[i]\n        else:\n            ret[i] = arr[i+1]\n    return ret\n", "model_name": "deepseek-v2.5"}
{"test_name": "process_by_index", "response_0": "from Compiler import types\n\n# Define the function to be applied to the array element\ndef my_func(x):\n    return x * x  # Example function: square the element\n\n# Define the array and index\narr = types.sint([1, 2, 3, 4, 5])  # Example array of secret integers\nindex = 2  # Example index\n\n# Process the array element at the given index\narr = process_by_index(arr, index, my_func)\n\n# Print the result (for debugging purposes)\nprint_ln(\"Array after processing: %s\", arr.reveal())\n", "response_1": "arr = [sint(1), sint(2), sint(3)]\nindex = 1\narr = process_by_index(arr, index, add_one)\n", "model_name": "deepseek-v2.5"}
{"test_name": "sum_by_indices", "response_0": "def sum_by_indices(arr, indices):\n    \"\"\"\n    Compute the sum of elements in the array with given indices.\n    The input indices are guaranteed to be legal.\n    \"\"\"\n    sum = sint(0)  # Initialize sum as a secret integer\n    for index in indices:\n        sum = sum + arr[index]  # Add the element at the given index to the sum\n    return sum\n", "response_1": "def sum_by_indices(arr, indices):\n    \"\"\"\n    Compute the sum of elements in the array with given indices.\n    The input indices are guaranteed to be legal.\n    \"\"\"\n    sum = sfix(0)\n    for index in indices:\n        sum = sum + arr[index]\n    return sum\n", "model_name": "deepseek-v2.5"}
