{"test_name": "next_integer", "response_0": "def next_integer(t):\n    \"\"\"\n    Return the minimum integer strictly bigger than the input value.\n    \"\"\"\n    return t.floor_plus(1)\n", "response_1": "def next_integer(t):\n    \"\"\"\n    Return the minimum integer strictly bigger than the input value.\n    \"\"\"\n    return t + 1\n", "model_name": "deepseek-v2.5"}
{"test_name": "father_and_son", "response_0": "from Compiler import mpc_math\n\ndef father_and_son(father_age, son_age):\n    \"\"\"\n    Given the age of father and son, \n    return before how many years or after how many years, the age of father is twice as the age of son.\n    \"\"\"\n    # Calculate the difference between father's age and twice the son's age\n    age_difference = father_age - 2 * son_age\n    # Return the absolute value of the difference\n    return mpc_math.abs(age_difference)\n", "response_1": "def father_and_son(father_age, son_age):\n    \"\"\"\n    Given the age of father and son, \n    return before how many years or after how many years, the age of father is twice as the age of son.\n    \"\"\"\n    diff = father_age - son_age * 2\n    return abs(diff)\n\n# MP-SPDZ program\n\ndef father_and_son_mpspdz(father_age, son_age):\n    diff = father_age - (son_age * 2)\n    result = abs(diff)\n    return result\n", "model_name": "deepseek-v2.5"}
{"test_name": "triangle_area", "response_0": "from Compiler import mpc_math\n\ndef triangle_area(side, height):\n    \"\"\"\n    Given the length of one side and the corresponding height, compute the size of the triangle.\n    \"\"\"\n    return side * height / 2\n\n# Example usage in an MP-SPDZ program\nside = sfix(5)  # Example secret-shared value for the side\nheight = sfix(8)  # Example secret-shared value for the height\narea = triangle_area(side, height)\nprint_ln(\"The area of the triangle is: %s\", area.reveal())\n", "response_1": "from Compiler import types\n\ndef main():\n    # Define secure inputs\n    side = types.sint()\n    height = types.sint()\n\n    # Input values from parties\n    print_ln('Enter the length of the side:')\n    side.input()\n    print_ln('Enter the corresponding height:')\n    height.input()\n\n    # Compute the area using the triangle_area function\n    area = triangle_area(side, height)\n\n    # Output the result\n    print_ln('The area of the triangle is: %s', area.reveal())\n\nif __name__ == \"__main__\":\n    main()\n", "model_name": "deepseek-v2.5"}
{"test_name": "sin_plus_cos", "response_0": "from Compiler import mpc_math\n\ndef sin_plus_cos(a):\n    \"\"\"\n    Return sin(a) + cos(a) for secret-shared input a.\n    \"\"\"\n    sin_a = mpc_math.sin(a)\n    cos_a = mpc_math.cos(a)\n    return sin_a + cos_a\n", "response_1": "def sin_plus_cos(a):\n    \"\"\"\n    Return sin(a)+cos(a)\n    \"\"\"\n    # Assuming 'a' is a secret-shared value in MP-SPDZ\n    sin_a = sin(a)\n    cos_a = cos(a)\n    return sin_a + cos_a\n", "model_name": "deepseek-v2.5"}
{"test_name": "sigmoid", "response_0": "def sigmoid(x):\n    \"\"\"\n    sigmoid function\n    \"\"\"\n    return 1 / (1 + exp(-x))\n", "response_1": "def sigmoid(x):\n    \"\"\"\n    sigmoid function for MP-SPDZ\n    \"\"\"\n    import math\n    from Compiler import mpc_math\n\n    # Calculate the exponential part\n    exp_part = mpc_math.exp(-x)\n    \n    # Calculate the sigmoid function\n    return 1 / (1 + exp_part)\n", "model_name": "deepseek-v2.5"}
{"test_name": "self_exponent", "response_0": "from Compiler import types\n\ndef self_exponent(k: types.sfix) -> types.sfix:\n    \"\"\"\n    Return the self-exponent k^k.\n    \"\"\"\n    return k ** k\n", "response_1": "def self_exponent(k):\n    \"\"\"\n    Return the self-exponent k^k.\n    \"\"\"\n    return k ** k\n", "model_name": "deepseek-v2.5"}
{"test_name": "silu", "response_0": "def silu(x):\n    \"\"\"\n    SiLU function\n    \"\"\"\n    return x / (1 + exp(-x))\n", "response_1": "from Compiler import mpc_math\n\ndef silu(x):\n    \"\"\"\n    SiLU function\n    \"\"\"\n    return x / (1 + mpc_math.exp(-x))\n", "model_name": "deepseek-v2.5"}
{"test_name": "Gaussian_bracket", "response_0": "from Compiler import mpc_math\n\ndef Gaussian_bracket(x):\n    \"\"\"\n    Return the value of Gaussian large bracket.\n    \"\"\"\n    x_int = mpc_math.floor(x)\n    return x - x_int\n", "response_1": "def Gaussian_bracket(x):\n    \"\"\"\n    Return the value of Gaussian large bracket.\n    \"\"\"\n    x_int = sfloat.floor(x)\n    return x - x_int\n", "model_name": "deepseek-v2.5"}
{"test_name": "asin_and_square", "response_0": "def asin_and_square(x):\n    \"\"\"\n    Take arcsin to the input, then compute the square of the outcome. \n    \"\"\"\n    # Assuming x is a secret floating-point number\n    asin_x = sfloat.asin(x)\n    square_result = asin_x.pow_const(2)\n    return square_result\n", "response_1": "def asin_and_square(x):\n    \"\"\"\n    Take arcsin to the input, then compute the square of the outcome. \n    \"\"\"\n    # Compute arcsin of x\n    arcsin_x = asin(x)\n    \n    # Compute the square of the arcsin result\n    result = arcsin_x * arcsin_x\n    \n    return result\n", "model_name": "deepseek-v2.5"}
{"test_name": "cylinder_surface", "response_0": "from Compiler import types\nfrom math import pi\n\ndef cylinder_surface(r: types.sint, h: types.sint) -> types.sint:\n    \"\"\"\n    Given the radius and the height of a cylinder, return its surface area. \n    \"\"\"\n    return 2 * pi * r**2 + 2 * pi * r * h\n", "response_1": "fromCompiler import *\nimport math\n\ndef cylinder_surface(r, h):\n    \"\"\"\n    Given the radius and the height of a cylinder, return its surface area. \n    \"\"\"\n    pi = math.pi\n    surface_area = 2 * pi * r**2 + 2 * pi * r * h\n    return surface_area\n\n# Example usage in MP-SPDZ\nr = sfix(5)  # Example radius\nh = sfix(10)  # Example height\nresult = cylinder_surface(r, h)\nprint_ln(\"Surface Area: %s\", result.reveal())\n", "model_name": "deepseek-v2.5"}
{"test_name": "radian_to_degree", "response_0": "from compiler import *\n\ndef radian_to_degree(r):\n    \"\"\"\n    Converting radian to degree\n    \"\"\"\n    # Define pi as a constant\n    PI = 3.141592653589793\n    # Perform the conversion\n    return r / PI * 180\n\n# Example usage in an MP-SPDZ program\n@for_range(10)\ndef _(i):\n    r = sint.get_random()\n    degree = radian_to_degree(r)\n    print_ln(\"Radian: %s, Degree: %s\", r.reveal(), degree.reveal())\n", "response_1": "def radian_to_degree(r):\n    \"\"\"\n    Converting radian to degree in MP-SPDZ\n    \"\"\"\n    # Define the value of pi\n    pi = 3.141592653589793\n    return r / pi * 180\n", "model_name": "deepseek-v2.5"}
{"test_name": "square_root", "response_0": "def square_root(a):\n    \"\"\"\n    return the square root of the input. \n    \"\"\"\n    return sqrt(a)\n", "response_1": "def square_root(a):\n    \"\"\"\n    Return the square root of the input.\n    \"\"\"\n    return a.sqrt()\n", "model_name": "deepseek-v2.5"}
{"test_name": "cosine_theorem", "response_0": "from Compiler import types\n\ndef cosine_theorem(a: types.sfix, b: types.sfix, rad: types.sfix) -> types.sfix:\n    \"\"\"\n    Given the two edges a, b and the angle rad between them, \n    use cosine theorem to compute the length of the third edge.\n    \"\"\"\n    return (a**2 + b**2 - 2 * a * b * types.cos(rad)).sqrt()\n", "response_1": "def cosine_theorem(a, b, rad):\n    \"\"\"\n    Given the two edges a, b and the angle rad between them, \n    use cosine theorem to compute the length of the third edge.\n    \"\"\"\n    from Compiler import mpc_math\n    return mpc_math.sqrt(a**2 + b**2 - 2 * a * b * mpc_math.cos(rad))\n", "model_name": "deepseek-v2.5"}
{"test_name": "lights_states", "response_0": "def lights_states(num):\n    \"\"\"\n    Given the number of lights (all different), compute the total number of possible states. \n    (Each light has two states: on/off)\n    \"\"\"\n    return 2 ** num\n", "response_1": "def lights_states(num):\n    \"\"\"\n    Given the number of lights (all different), compute the total number of possible states. \n    (Each light has two states: on/off)\n    \"\"\"\n    return 1 << num\n", "model_name": "deepseek-v2.5"}
{"test_name": "degree_to_radian", "response_0": "def degree_to_radian(d):\n    \"\"\"\n    Converting degree to radian\n    \"\"\"\n    # Define the value of pi\n    pi = 3.141592653589793\n    return d / 180 * pi\n\n# Example usage in MP-SPDZ\n# Assuming 'd' is a secret shared value\nd = sfix(45)  # Example input, replace with actual input\nresult = degree_to_radian(d)\nprint_ln(\"The result in radians is: %s\", result.reveal())\n", "response_1": "def degree_to_radian(d):\n    \"\"\"\n    Converting degree to radian\n    \"\"\"\n    # MP-SPDZ does not have a math module, so we need to define pi manually\n    pi = 3.141592653589793\n    return d * (pi / 180)\n", "model_name": "deepseek-v2.5"}
{"test_name": "Fah_to_Cel", "response_0": "fromCompiler import *\n\ndef Fah_to_Cel(F):\n    \"\"\"\n    Convert Fahrenheit temperature to Celsius temperature.\n    \"\"\"\n    return (F - 32) / 1.8\n\n# Example usage in MP-SPDZ\nif __name__ == \"__main__\":\n    # Assume F is a secret-shared value\n    F = sfix.get_input_from(0)\n    C = Fah_to_Cel(F)\n    print_ln(\"The Celsius temperature is: %s\", C.reveal())\n", "response_1": "from Compiler import types\n\ndef Fah_to_Cel(F):\n    \"\"\"\n    Convert Fahrenheit temperature to Celsius temperature.\n    \"\"\"\n    # Assuming F is a secret-shared float\n    return (F - 32) / 1.8\n\n# Example usage in MP-SPDZ\nif __name__ == \"__main__\":\n    # Assuming F is a secret-shared float input\n    F = types.sfloat.get_input_from(0)\n    C = Fah_to_Cel(F)\n    # Output the result\n    C.reveal().print_float()\n", "model_name": "deepseek-v2.5"}
{"test_name": "elliptic_area", "response_0": "from compiler.types import sfix\n\ndef elliptic_area(a: sfix, b: sfix) -> sfix:\n    \"\"\"\n    Given the lengths of major axis and minor axis of the elliptic, return its area.\n    \"\"\"\n    pi = sfix(3.141592653589793)\n    return pi * a * b\n", "response_1": "from Compiler import types\n\ndef elliptic_area(a: types.sfix, b: types.sfix) -> types.sfix:\n    \"\"\"\n    Given the lengths of major axis and minor axis of the elliptic, return its area. \n    \"\"\"\n    import math\n    return math.pi * a * b\n", "model_name": "deepseek-v2.5"}
{"test_name": "floor", "response_0": "def floor(z):\n    \"\"\"\n    Return the maximum integer no bigger than the input.\n    \"\"\"\n    return z.floor()\n", "response_1": "def floor(z):\n    \"\"\"\n    Return the maximum integer no bigger than the input.\n    \"\"\"\n    return z.floor()\n", "model_name": "deepseek-v2.5"}
{"test_name": "log_and_cube", "response_0": "from Compiler import types\nfrom Compiler import library\n\ndef log_and_cube(x: types.sint) -> types.sint:\n    \"\"\"\n    Take log (with base-2) to the input, then compute the cube of the outcome.\n    \"\"\"\n    # Compute log base 2 of x\n    log_x = library.log2(x)\n    \n    # Compute the cube of the log result\n    cube_log_x = log_x * log_x * log_x\n    \n    return cube_log_x\n", "response_1": "from Compiler import mpc_math\n\ndef log_and_cube(x):\n    \"\"\"\n    take log (with base-2) to the input, then compute the cube of the outcome\n    \"\"\"\n    # Compute log base 2 of x\n    log_result = mpc_math.log2(x)\n    \n    # Compute the cube of the log result\n    cube_result = log_result ** 3\n    \n    return cube_result\n", "model_name": "deepseek-v2.5"}
{"test_name": "floor_and_square", "response_0": "def floor_and_square(z):\n    \"\"\"\n    Calculate the maximum integer no bigger than the input. \n    Then return the square of the previous outcome. \n    \"\"\"\n    # Truncate the input to the nearest integer below it\n    truncated_z = cint(z).trunc(0)\n    # Return the square of the truncated value\n    return truncated_z**2\n", "response_1": "def floor_and_square(z):\n    \"\"\"\n    Calculate the maximum integer no bigger than the input. \n    Then return the square of the previous outcome. \n    \"\"\"\n    # Assume z is a secret floating-point number\n    z = sfloat(z)\n    \n    # Extract the integer part of z\n    integer_part = cint(z.v)\n    \n    # Check if the fractional part is non-zero\n    fractional_part = z.v - integer_part\n    if_statement = fractional_part < 0\n    \n    # Adjust the integer part if necessary\n    floor_z = integer_part - if_statement\n    \n    # Return the square of the floor value\n    return floor_z * floor_z\n", "model_name": "deepseek-v2.5"}
{"test_name": "meters_to_feet", "response_0": "def meters_to_feet(m):\n    \"\"\"\n    Convert the length in meters to the length in feet.\n    \"\"\"\n    return m * 3.2808\n\n# Assuming m is a secret shared value in MP-SPDZ\nm = sfix.get_input_from(0)  # Example of how to get input in MP-SPDZ\nresult = meters_to_feet(m)\nprint_ln(\"The result in feet is: %s\", result.reveal())\n", "response_1": "def meters_to_feet(m):\n    \"\"\"\n    Convert the length in meters to the length in feet.\n    \"\"\"\n    return m * 3.2808\n\n# MP-SPDZ version\ndef meters_to_feet_mpspdz(m):\n    \"\"\"\n    Convert the length in meters to the length in feet in MP-SPDZ.\n    \"\"\"\n    return m * sfix(3.2808)\n", "model_name": "deepseek-v2.5"}
{"test_name": "sphere_area", "response_0": "def sphere_area(r):\n    \"\"\"\n    Return the area of a sphere surface with given radius r.\n    \"\"\"\n    from Compiler import types\n    pi = types.cfloat(3.141592653589793)  # Approximate value of pi\n    return 4 * pi * r**2\n", "response_1": "def sphere_area(r):\n    \"\"\"\n    Return the area of a sphere surface with given radius r.\n    \"\"\"\n    from Compiler import types\n    from Compiler.math import pi\n\n    return 4 * pi * r ** 2\n", "model_name": "deepseek-v2.5"}
{"test_name": "coarse_abs", "response_0": "def coarse_abs(x):\n    \"\"\"\n    Return the absolute value of x, and round it to zero.\n    \"\"\"\n    return sfix.floor(sfix.abs(x))\n", "response_1": "def coarse_abs(x):\n    \"\"\"\n    Return the absolute value of x, and round it to zero.\n    \"\"\"\n    # Compute the absolute value using MP-SPDZ's sgn function\n    abs_x = sgn(x) * x\n    \n    # Round the absolute value to zero using the floor function\n    return sfloor(abs_x)\n", "model_name": "deepseek-v2.5"}
{"test_name": "how_many_chickens", "response_0": "def how_many_chickens(heads, legs):\n    \"\"\"\n    Compute the number of chickens in the rabbit-chicken problem.\n    \"\"\"\n    return heads - (legs - heads * 2) // 2\n\n# MP-SPDZ program\n\nfrom Compiler import mpc_math\n\ndef how_many_chickens_mpspdz(heads, legs):\n    heads = sint(heads)\n    legs = sint(legs)\n    return heads - (legs - heads * 2) / 2\n\n# Example usage in MP-SPDZ\n# heads = sint(10)\n# legs = sint(32)\n# result = how_many_chickens_mpspdz(heads, legs)\n# print_ln(\"Number of chickens: %s\", result.reveal())\n", "response_1": "def how_many_chickens(heads, legs):\n    \"\"\"\n    Compute the number of chickens in the rabbit-chicken problem.\n    \"\"\"\n    return heads - (legs - heads * 2) / 2\n\n# Example usage in an MP-SPDZ program\nheads = sfix(35)  # Example input\nlegs = sfix(94)    # Example input\nresult = how_many_chickens(heads, legs)\nprint_ln(\"Number of chickens: %s\", result.reveal())\n", "model_name": "deepseek-v2.5"}
{"test_name": "interest_calculator", "response_0": "fromCompiler = True\n\n# Assuming capital, ratio, and months are secret-shared values\ncapital = sfix(1000)  # Example initial capital\nratio = sfix(0.05)    # Example interest ratio\nmonths = sfix(12)     # Example number of months\n\n# Call the interest_calculator function\ninterest = interest_calculator(capital, ratio, months)\n\n# Output the result\nprint_ln(\"The interest is: %s\", interest.reveal())\n", "response_1": "from math import pow\n\ndef interest_calculator(capital, ratio, months):\n    \"\"\"\n    Given the initial capital, interest ratio and the number of months you deposit your money to the bank, \n    calculate the interest you can get. \n    \"\"\"\n    return (pow(1 + ratio, months) - 1) * capital\n\n# Example usage in MP-SPDZ\ncapital = sfix(1000)  # Initial capital, using fixed-point number\nratio = sfix(0.05)    # Interest ratio, using fixed-point number\nmonths = sfix(12)     # Number of months, using fixed-point number\n\ninterest = interest_calculator(capital, ratio, months)\nprint_ln(\"The interest you can get is: %s\", interest.reveal())\n", "model_name": "deepseek-v2.5"}
{"test_name": "circle_area", "response_0": "def circle_area(r):\n    \"\"\"\n    Return the area of the circle with given radius.\n    \"\"\"\n    from Compiler import mpc_math\n    return mpc_math.pi * r**2\n", "response_1": "def circle_area(r):\n    \"\"\"\n    Return the area of the circle with given radius.\n    \"\"\"\n    pi = 3.141592653589793\n    return pi * r * r\n", "model_name": "deepseek-v2.5"}
{"test_name": "cube_and_square_root", "response_0": "def cube_and_square_root(x):\n    \"\"\"\n    take cube to the input, then compute the square root of the outcome\n    \"\"\"\n    # Compute the cube of x\n    cube = x ** 3\n    # Compute the square root of the cube\n    square_root = cube.sqrt()\n    return square_root\n", "response_1": "def cube_and_square_root(x):\n    \"\"\"\n    take cube to the input, then compute the square root of the outcome\n    \"\"\"\n    # Cube the input\n    cubed = x ** 3\n    # Compute the square root of the cubed result\n    sqrt_result = cubed.sqrt()\n    return sqrt_result\n", "model_name": "deepseek-v2.5"}
{"test_name": "round", "response_0": "def round(x):\n    \"\"\"\n    Round x to the nearest integer. \n    \"\"\"\n    x_int = sgf2n(x).floor()\n    return x_int if (x - x_int) < 0.5 else x_int + 1\n", "response_1": "def round(x):\n    \"\"\"\n    Round x to the nearest integer.\n    \"\"\"\n    # Assuming x is a secret-shared integer or float in MP-SPDZ\n    # Convert x to an integer by flooring (or using the appropriate MP-SPDZ function)\n    x_int = sfix.floor(x)  # sfix.floor is a function in MP-SPDZ for flooring fixed-point numbers\n    \n    # Compute the difference between x and x_int\n    diff = x - x_int\n    \n    # Check if the difference is less than 0.5\n    condition = diff < 0.5\n    \n    # Return x_int if condition is true, otherwise return x_int + 1\n    return sfix.if_else(condition, x_int, x_int + 1)\n", "model_name": "deepseek-v2.5"}
{"test_name": "cryptic_adjustment", "response_0": "def cryptic_adjustment(origin):\n    \"\"\"\n    The professor want to adjust the pessimistic score of his students mid-term exam. \n    The adjustment formula is 10*sqrt(10*sqrt(origin))\n    \"\"\"\n    # MP-SPDZ uses the function 'sqrt' for square root\n    return 10 * sqrt(10 * sqrt(origin))\n", "response_1": "from Compiler import types\n\ndef cryptic_adjustment(origin):\n    \"\"\"\n    The professor want to adjust the pessimistic score of his students mid-term exam. \n    The adjustment formula is 10*sqrt(10*sqrt(origin))\n    \"\"\"\n    return 10 * types.sfix.sqrt(10 * types.sfix.sqrt(origin))\n", "model_name": "deepseek-v2.5"}
{"test_name": "specific_pow", "response_0": "def specific_pow(x):\n    \"\"\"\n    Return x^(2.5) using fixed-point arithmetic.\n    \"\"\"\n    # Define the precision for fixed-point arithmetic\n    k = 20  # Number of bits for the fractional part\n\n    # Convert x to a fixed-point number\n    x_fp = x << k\n\n    # Calculate x^2\n    x_squared = (x_fp * x_fp) >> k\n\n    # Calculate x^0.5 (square root of x)\n    x_sqrt = x_fp.sqrt()\n\n    # Calculate x^2.5 = x^2 * x^0.5\n    result_fp = (x_squared * x_sqrt) >> k\n\n    # Convert back to integer representation\n    result = result_fp >> k\n\n    return result\n", "response_1": "def specific_pow(x):\n    \"\"\"\n    Return x^(2.5) using fixed-point arithmetic.\n    \"\"\"\n    # Define the precision for fixed-point arithmetic\n    k = 20  # Number of bits for the fractional part\n\n    # Convert x to a fixed-point number\n    x_fp = x << k\n\n    # Calculate x^2\n    x_squared = x_fp * x_fp\n\n    # Calculate x^0.5 (square root)\n    x_sqrt = sqrt(x_fp, k)\n\n    # Calculate x^2.5 = x^2 * x^0.5\n    result_fp = x_squared * x_sqrt\n\n    # Convert back to integer representation\n    result = result_fp >> (2 * k)\n\n    return result\n\n# Example usage in MP-SPDZ\nx = sfix(5)  # Example input\nresult = specific_pow(x)\nprint_ln(\"x^(2.5) = %s\", result)\n", "model_name": "deepseek-v2.5"}
{"test_name": "soft_plus", "response_0": "from Compiler import types\n\ndef soft_plus(x):\n    \"\"\"\n    Softplus function\n    \"\"\"\n    return types.log(1 + types.exp(x))\n", "response_1": "def soft_plus(x):\n    \"\"\"\n    Softplus function\n    \"\"\"\n    return log(1 + exp(x))\n", "model_name": "deepseek-v2.5"}
{"test_name": "ball_volume", "response_0": "def ball_volume(r):\n    \"\"\"\n    Return the volume of the ball with given radius.\n    \"\"\"\n    # Import the necessary MP-SPDZ library functions\n    from Compiler import mpc_math\n\n    # Define the constant pi\n    pi = mpc_math.pi()\n\n    # Calculate the volume of the ball\n    volume = pi * r**3 * 4 / 3\n\n    return volume\n", "response_1": "def ball_volume(r):\n    \"\"\"\n    Return the volume of the ball with given radius.\n    \"\"\"\n    pi = 3.141592653589793\n    return pi * r**3 * 4 / 3\n", "model_name": "deepseek-v2.5"}
{"test_name": "Heron", "response_0": "from Compiler import mpc_math\n\ndef Heron(a, b, c):\n    \"\"\"\n    Given the lengths of three sides of the triangle, compute its size with Heron's formula.\n    \"\"\"\n    p = (a + b + c) / 2\n    return mpc_math.sqrt(p * (p - a) * (p - b) * (p - c))\n\n# Example usage\na = sint(5)\nb = sint(6)\nc = sint(7)\narea = Heron(a, b, c)\nprint_ln(\"The area of the triangle is: %s\", area.reveal())\n", "response_1": "sfix a, b, c;\n// Initialize a, b, c with secure values\n\narea = Heron(a, b, c);\n// Now area contains the computed area of the triangle\n", "model_name": "deepseek-v2.5"}
{"test_name": "next_perfect_square", "response_0": "def next_perfect_square(x):\n    \"\"\"\n    Return the smallest perfect square number bigger than x. \n    The input x is guaranteed to be a positive integer. \n    \"\"\"\n    sqrt_x = cint(x).sqrt()\n    next_sqrt = sqrt_x + 1\n    return next_sqrt * next_sqrt\n", "response_1": "def next_perfect_square(x):\n    \"\"\"\n    Return the smallest perfect square number bigger than x. \n    The input x is guaranteed to be a positive integer. \n    \"\"\"\n    # Compute the integer square root of x\n    sqrt_x = int_sqrt(x)\n    \n    # Increment the square root by 1\n    next_sqrt = sqrt_x + 1\n    \n    # Return the square of the incremented square root\n    return next_sqrt * next_sqrt\n\n# Helper function to compute the integer square root\ndef int_sqrt(n):\n    if n < 0:\n        raise ValueError(\"Negative input is not supported\")\n    if n == 0:\n        return 0\n    x = n\n    y = (x + 1) // 2\n    while y < x:\n        x = y\n        y = (x + n // x) // 2\n    return x\n", "model_name": "deepseek-v2.5"}
{"test_name": "pi_to_the_x", "response_0": "fromCompiler import *\n\ndef pi_to_the_x(x):\n    \"\"\"\n    Return the value of pi^x.\n    \"\"\"\n    # Define the value of pi in MP-SPDZ\n    pi = sfix(3.141592653589793)\n    \n    # Compute pi^x using the pow function in MP-SPDZ\n    result = pow(pi, x)\n    \n    return result\n", "response_1": "from compiler import *\nfrom library import *\n\ndef pi_to_the_x(x):\n    \"\"\"\n    Return the value of pi^x using fixed-point arithmetic.\n    \"\"\"\n    # Define the fixed-point precision\n    k = 20  # Number of bits for the fractional part\n\n    # Approximate the value of pi in fixed-point\n    pi_fixed = 3.141592653589793\n    pi_fixed_scaled = int(pi_fixed * (1 << k))\n\n    # Define the exponent in fixed-point\n    x_fixed = int(x * (1 << k))\n\n    # Compute pi^x using fixed-point arithmetic\n    result_fixed = pow(pi_fixed_scaled, x_fixed, (1 << (2 * k)))\n\n    # Convert the result back to a floating-point number\n    result = regint(result_fixed) / (1 << k)\n\n    return result\n", "model_name": "deepseek-v2.5"}
{"test_name": "spring_rocket", "response_0": "def spring_rocket(height, m, k):\n    \"\"\"\n    You want to use a spring with stiffness coefficient k to bounce an object with mass m to the given height. \n    You should return the minimum length the spring should be compressed. \n    Assume g = 9.8\n    \"\"\"\n    g = sfloat(9.8)\n    height = sfloat(height)\n    m = sfloat(m)\n    k = sfloat(k)\n    numerator = 2 * m * g * height\n    denominator = k\n    result = (numerator / denominator).sqrt()\n    return result\n", "response_1": "from compiler import *\nfrom library import *\n\ndef spring_rocket(height: sint, m: sint, k: sint):\n    \"\"\"\n    You want to use a spring with stiffness coefficient k to bounce an object with mass m to the given height. \n    You should return the minimum length the spring should be compressed. \n    Assume g = 9.8\n    \"\"\"\n    g = 9.8\n    # Convert g to a secret integer for computation\n    g_sint = sint(g)\n    \n    # Calculate the intermediate value 2 * m * g * height\n    intermediate = 2 * m * g_sint * height\n    \n    # Divide by k\n    divided = intermediate / k\n    \n    # Take the square root\n    result = sqrt(divided)\n    \n    return result\n", "model_name": "deepseek-v2.5"}
{"test_name": "cone_volume", "response_0": "from compiler import *\nfrom secure_math import *\n\ndef cone_volume(r, h):\n    \"\"\"\n    Given the radius and height, compute the volume of the cone.\n    \"\"\"\n    return secure_pi() * r * r * h / 3\n\n# Example usage in MP-SPDZ\n# r = sfix(5)  # Example radius\n# h = sfix(10) # Example height\n# volume = cone_volume(r, h)\n# print_ln(\"The volume of the cone is: %s\", volume)\n", "response_1": "def cone_volume(r, h):\n    \"\"\"\n    Given the radius and height, compute the volume of the cone.\n    \"\"\"\n    from Compiler import floatingpoint\n    pi = floatingpoint.Pi()\n    return pi * r * r * h / 3\n", "model_name": "deepseek-v2.5"}
{"test_name": "how_many_rabbits", "response_0": "heads = sfix(35)  # Example input\nlegs = sfix(94)   # Example input\nrabbits = how_many_rabbits(heads, legs)\nprint_ln(\"Number of rabbits: %s\", rabbits.reveal())\n", "response_1": "def how_many_rabbits(heads, legs) {\n    \"\"\"\n    Compute the number of rabbits in the rabbit-chicken problem.\n    \"\"\"\n    return (legs - heads * 2) / 2;\n}\n", "model_name": "deepseek-v2.5"}
