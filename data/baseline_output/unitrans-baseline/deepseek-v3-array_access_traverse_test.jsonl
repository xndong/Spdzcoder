{"test_name": "indicate_positive", "response_0": "def indicate_positive(arr):\n    \"\"\"\n    For the given array, return an array with the same size. \n    If one element in the input array is positive, \n    then the corresponding element in the returned array will be 1, \n    otherwise the element in the returned array will be 0. \n    \"\"\"\n    ret = Array(len(arr), sint)\n    for i in range(len(arr)):\n        ret[i] = arr[i] > 0\n    return ret\n", "response_1": "def indicate_positive(arr):\n    \"\"\"\n    For the given array, return an array with the same size. \n    If one element in the input array is positive, \n    then the corresponding element in the returned array will be 1, \n    otherwise the element in the returned array will be 0. \n    \"\"\"\n    ret = Array(len(arr), sint)\n    for i in range(len(arr)):\n        ret[i] = (arr[i] > 0).if_else(1, 0)\n    return ret\n", "model_name": "deepseek-v3"}
{"test_name": "array_xor", "response_0": "def array_xor(a, b):\n    \"\"\"\n    Compute the elementwise XOR of the two input vectors.\n    \"\"\"\n    ret = Array(len(a), sint)  # Initialize an array of the same length as input arrays\n    for i in range(len(ret)):\n        ret[i] = a[i] ^ b[i]  # Perform elementwise XOR\n    return ret\n", "response_1": "def array_xor(a, b):\n    \"\"\"\n    Compute the elementwise XOR of the two input vectors.\n    \"\"\"\n    ret = Array(len(a), sgf2n)  # Initialize an array of the same length as 'a' with sgf2n type\n    @for_range(len(a))  # Iterate over the length of the array\n    def _(i):\n        ret[i] = a[i] ^ b[i]  # Compute XOR for each element\n    return ret\n", "model_name": "deepseek-v3"}
{"test_name": "interlaced_placement", "response_0": "def interlaced_placement(a, b):\n    \"\"\"\n    Interleave the elements in two sequences.\n    The two input arrays are guaranteed to have the same length.\n    \"\"\"\n    ret = Array(len(a) * 2, sint)\n    for i in range(len(a) * 2):\n        if i % 2:\n            ret[i] = b[(i - 1) // 2]\n        else:\n            ret[i] = a[i // 2]\n    return ret\n", "response_1": "def interlaced_placement(a, b):\n    \"\"\"\n    Interleave the elements in two sequences.\n    The two input arrays are guaranteed to have the same length.\n    \"\"\"\n    ret = Array(len(a) * 2, sint)\n    @for_range(len(a) * 2)\n    def _(i):\n        if i % 2 == 1:\n            ret[i] = b[(i - 1) // 2]\n        else:\n            ret[i] = a[i // 2]\n    return ret\n", "model_name": "deepseek-v3"}
{"test_name": "array_and", "response_0": "def array_and(a, b):\n    \"\"\"\n    Compute the elementwise AND of the two input vectors.\n    \"\"\"\n    ret = Array(len(a), sint)  # Initialize an array of secret integers\n    @for_range(len(a))\n    def _(i):\n        ret[i] = a[i] * b[i]  # Elementwise AND in MP-SPDZ is equivalent to multiplication\n    return ret\n", "response_1": "def array_and(a, b):\n    \"\"\"\n    Compute the elementwise AND of the two input vectors.\n    \"\"\"\n    ret = Array(len(a), sgf2n)\n    @for_range(len(a))\n    def _(i):\n        ret[i] = a[i] & b[i]\n    return ret\n", "model_name": "deepseek-v3"}
{"test_name": "array_indicator", "response_0": "def array_indicator(arr, predicator):\n    \"\"\"\n    Return an array with the same size of the input array. \n    For each element in the input array, \n    the corresponding value in the returned array is set to be the value of the predicator. \n    \"\"\"\n    ret = Array(len(arr), sbool)\n    for i in range(len(arr)):\n        ret[i] = predicator(arr[i])\n    return ret\n", "response_1": "def array_indicator(arr, predicator):\n    \"\"\"\n    Return an array with the same size of the input array. \n    For each element in the input array, \n    the corresponding value in the returned array is set to be the value of the predicator. \n    \"\"\"\n    ret = Array(len(arr), sbool)  # Initialize an array of boolean values\n    for i in range(len(arr)):\n        ret[i] = predicator(arr[i])  # Apply the predicator to each element\n    return ret\n", "model_name": "deepseek-v3"}
{"test_name": "array_greater_than_scalar", "response_0": "def array_greater_than_scalar(arr, bound):\n    \"\"\"\n    Given an input array and a bound, \n    return an array indicating whether each element is greater than the bound. \n    \"\"\"\n    ret = Array(len(arr), sint)  # Initialize an array of secret integers\n    for i in range(len(arr)):\n        ret[i] = arr[i] > bound  # Compare each element with the bound\n    return ret\n", "response_1": "def array_greater_than_scalar(arr, bound):\n    \"\"\"\n    Given an input array and a bound, \n    return an array indicating whether each element is greater than the bound. \n    \"\"\"\n    ret = Array(len(arr), sbool)  # Initialize an array of sbool (secret boolean) with the same length as arr\n    for i in range(len(arr)):\n        ret[i] = arr[i] > bound  # Compare each element with the bound and store the result in ret\n    return ret\n", "model_name": "deepseek-v3"}
{"test_name": "array_no_greater_than_scalar", "response_0": "def array_no_greater_than_scalar(arr, bound):\n    \"\"\"\n    Given an input array and a bound, \n    return an array indicating whether each element is no greater than the bound. \n    \"\"\"\n    ret = Array(len(arr), sbool)\n    for i in range(len(arr)):\n        ret[i] = arr[i] <= bound\n    return ret\n", "response_1": "def array_no_greater_than_scalar(arr, bound):\n    \"\"\"\n    Given an input array and a bound, \n    return an array indicating whether each element is no greater than the bound. \n    \"\"\"\n    ret = Array(len(arr), sint)\n    for i in range(len(arr)):\n        ret[i] = arr[i] <= bound\n    return ret\n", "model_name": "deepseek-v3"}
{"test_name": "reverse_and_concat", "response_0": "from Compiler import types\n\ndef reverse_and_concat(a):\n    \"\"\"\n    Reverse the input array and concatenate it to the original array.\n    \"\"\"\n    # Determine the length of the input array\n    n = len(a)\n    \n    # Create a new array to store the reversed elements\n    b = types.Array(n, a.value_type)\n    \n    # Reverse the array\n    for i in range(n):\n        b[i] = a[n - 1 - i]\n    \n    # Concatenate the original array and the reversed array\n    result = types.Array(2 * n, a.value_type)\n    for i in range(n):\n        result[i] = a[i]\n    for i in range(n):\n        result[n + i] = b[i]\n    \n    return result\n", "response_1": "def reverse_and_concat(a):\n    \"\"\"\n    Reverse the input array and concatenate it to the original array.\n    \"\"\"\n    n = len(a)\n    b = Array(n, sfix)\n    for i in range(n):\n        b[i] = a[n-1-i]\n    return a + b\n", "model_name": "deepseek-v3"}
{"test_name": "array_round", "response_0": "def array_round(arr):\n    \"\"\"\n    Round every element in the array to the nearest integer.\n    \"\"\"\n    ret = Array(len(arr), sint)\n    for i in range(len(arr)):\n        int_part = arr[i] // 1  # Equivalent to math.floor(arr[i]) for integers\n        remainder = arr[i] - int_part\n        ret[i] = int_part + (remainder >= 0.5)\n    return ret\n", "response_1": "from Compiler.library import *\nfrom Compiler.types import *\n\ndef array_round(arr):\n    \"\"\"\n    Round every element in the array to the nearest integer.\n    arr: Array of secret-shared fixed-point numbers.\n    \"\"\"\n    n = len(arr)\n    ret = Array(n, sfix)\n    \n    for i in range(n):\n        int_part = sfix(int(arr[i].v))  # Extract the integer part\n        fractional_part = arr[i] - int_part  # Calculate the fractional part\n        \n        # Compare the fractional part with 0.5\n        condition = fractional_part < 0.5\n        \n        # Use the condition to select between int_part and int_part + 1\n        ret[i] = condition.if_else(int_part, int_part + 1)\n    \n    return ret\n", "model_name": "deepseek-v3"}
{"test_name": "array_greater_eq", "response_0": "def array_greater_eq(arr, brr):\n    \"\"\"\n    For the two input arrays arr and brr, return an array ret with the same size. \n    For index i, if arr[i] >= brr[i], ret[i] will be set to 1, otherwise ret[i] will be set to 0. \n    The two input arrays are guaranteed to have the same length. \n    \"\"\"\n    ret = Array(len(arr), sint)\n    for i in range(len(arr)):\n        ret[i] = sint(arr[i] >= brr[i])\n    return ret\n", "response_1": "def array_greater_eq(arr, brr):\n    \"\"\"\n    For the two input arrays arr and brr, return an array ret with the same size. \n    For index i, if arr[i] >= brr[i], ret[i] will be set to 1, otherwise ret[i] will be set to 0. \n    The two input arrays are guaranteed to have the same length. \n    \"\"\"\n    ret = Array(len(arr), sgf2n)\n    for i in range(len(arr)):\n        ret[i] = arr[i] >= brr[i]\n    return ret\n", "model_name": "deepseek-v3"}
{"test_name": "reverse", "response_0": "def reverse(arr):\n    \"\"\"\n    Reverse the array.\n    \"\"\"\n    n = len(arr)\n    ret = Array(n, sfix)  # Initialize an array of the same length with sfix type\n    for i in range(n):\n        ret[i] = arr[n-1-i]\n    return ret\n", "response_1": "def reverse(arr):\n    \"\"\"\n    Reverse the array.\n    \"\"\"\n    n = len(arr)\n    ret = Array(n, sint)\n    for i in range(n):\n        ret[i] = arr[n - 1 - i]\n    return ret\n", "model_name": "deepseek-v3"}
{"test_name": "indicate_negative", "response_0": "def indicate_negative(arr):\n    \"\"\"\n    For the given array, return an array with the same size. \n    If one element in the input array is negative, \n    then the corresponding element in the returned array will be 1, \n    otherwise the element in the returned array will be 0. \n    \"\"\"\n    ret = Array(len(arr), sint)\n    for i in range(len(arr)):\n        ret[i] = if_else(arr[i] < 0, sint(1), sint(0))\n    return ret\n", "response_1": "def indicate_negative(arr):\n    \"\"\"\n    For the given array, return an array with the same size. \n    If one element in the input array is negative, \n    then the corresponding element in the returned array will be 1, \n    otherwise the element in the returned array will be 0. \n    \"\"\"\n    ret = Array(len(arr), sint)\n    for i in range(len(arr)):\n        ret[i] = arr[i] < 0\n    return ret\n", "model_name": "deepseek-v3"}
{"test_name": "max_sub_sequence", "response_0": "def max_sub_sequence(arr):\n    \"\"\"\n    Use dynamic programming to find the sum of max continuous subsequence of the input array.\n    \"\"\"\n    n = len(arr)\n    partial_max = Array(n, sfix)\n    suffix_max = Array(n, sfix)\n    \n    partial_max[0] = arr[0]\n    suffix_max[0] = arr[0]\n    \n    for i in range(1, n):\n        suffix_max[i] = if_else(suffix_max[i-1] >= 0, suffix_max[i-1] + arr[i], arr[i])\n        partial_max[i] = if_else(partial_max[i-1] >= suffix_max[i], partial_max[i-1], suffix_max[i])\n    \n    return partial_max[n-1]\n", "response_1": "def max_sub_sequence(arr):\n    \"\"\"\n    Use dynamic programming to find the sum of max continuous subsequence of the input array.\n    \"\"\"\n    n = len(arr)\n    partial_max = Array(n, sint)\n    suffix_max = Array(n, sint)\n    \n    partial_max[0] = arr[0]\n    suffix_max[0] = arr[0]\n    \n    for i in range(1, n):\n        # Update suffix_max[i]\n        cond = suffix_max[i-1] >= 0\n        suffix_max[i] = cond * (suffix_max[i-1] + arr[i]) + (1 - cond) * arr[i]\n        \n        # Update partial_max[i]\n        cond = partial_max[i-1] >= suffix_max[i]\n        partial_max[i] = cond * partial_max[i-1] + (1 - cond) * suffix_max[i]\n    \n    return partial_max[n-1]\n", "model_name": "deepseek-v3"}
{"test_name": "compare_and_select", "response_0": "def compare_and_select(a, b):\n    \"\"\"\n    Compare the two arrays elementwise, \n    and save the larger value into the returned array. \n    \"\"\"\n    ret_array = Array(len(a), sint)\n    for i in range(len(a)):\n        ret_array[i] = (a[i] > b[i]).if_else(a[i], b[i])\n    \n    return ret_array\n", "response_1": "def compare_and_select(a, b):\n    \"\"\"\n    Compare the two arrays elementwise,\n    and save the larger value into the returned array.\n    \"\"\"\n    ret_array = Array(len(a), sint)\n    \n    @for_range(len(a))\n    def _(i):\n        ret_array[i] = if_else(a[i] > b[i], a[i], b[i])\n    \n    return ret_array\n", "model_name": "deepseek-v3"}
{"test_name": "count_element_frequency", "response_0": "from util import if_else\nfrom Compiler.library import print_ln\n\ndef count_element_frequency(l):\n    \"\"\"\n    Return an array with the same size of the original array, \n    each position of which records the number of occurrences of the element at the same position. \n    \"\"\"\n    n = len(l)\n    ret = [sint(0) for _ in range(n)]\n    \n    for i in range(n):\n        for j in range(n):\n            # Compare l[j] and l[i] securely\n            is_equal = l[j].equal(l[i])\n            # Increment ret[i] if l[j] == l[i]\n            ret[i] = ret[i] + is_equal\n    \n    return ret\n", "response_1": "def count_element_frequency(l):\n    \"\"\"\n    Return an array with the same size of the original array, \n    each position of which records the number of occurrences of the element at the same position. \n    \"\"\"\n    n = len(l)\n    ret = Array(n, sint(0))  # Initialize an array of zeros with the same length as l\n    for i in range(n):\n        for j in range(n):\n            if l[j] == l[i]:\n                ret[i] = ret[i] + 1\n    return ret\n", "model_name": "deepseek-v3"}
{"test_name": "array_or", "response_0": "def array_or(a, b):\n    \"\"\"\n    Compute the elementwise OR of the two input vectors.\n    \"\"\"\n    ret = Array(len(a), sbool)  # Initialize an array of the same length as 'a' with sbool type\n    for i in range(len(a)):\n        ret[i] = a[i] or b[i]  # Elementwise OR operation\n    return ret\n", "response_1": "def array_or(a, b):\n    \"\"\"\n    Compute the elementwise OR of the two input vectors.\n    \"\"\"\n    ret = Array(len(a), sint)\n    @for_range(len(a))\n    def _(i):\n        ret[i] = a[i] | b[i]\n    return ret\n", "model_name": "deepseek-v3"}
{"test_name": "stock_predicator", "response_0": "def stock_predicator(days):\n    \"\"\"\n    Given the stock price in the next few days (at least 3 days).\n    Use dynamic programming to find to days, \n    such that buying on the earlier day and selling on the later day is the most profitable\n    If all choices causes negative profits, you should return 0.\n    \"\"\"\n    n = len(days)\n    lowest = Array(n, sint)\n    partial_max = Array(n, sint)\n    \n    lowest[0] = days[0]\n    partial_max[0] = 0\n    \n    for i in range(1, n):\n        lowest[i] = if_else(lowest[i-1] <= days[i], lowest[i-1], days[i])\n        partial_max[i] = if_else(partial_max[i-1] >= (days[i] - lowest[i-1]), partial_max[i-1], (days[i] - lowest[i-1]))\n    \n    return partial_max[n-1]\n", "response_1": "from Compiler.types import Array, sint\nfrom Compiler.library import for_range\n\ndef stock_predicator(days):\n    \"\"\"\n    Given the stock price in the next few days (at least 3 days).\n    Use dynamic programming to find to days, \n    such that buying on the earlier day and selling on the later day is the most profitable\n    If all choices causes negative profits, you should return 0.\n    \"\"\"\n    n = len(days)\n    lowest = Array(n, sint)\n    partial_max = Array(n, sint)\n    \n    lowest[0] = days[0]\n    partial_max[0] = 0\n    \n    def loop_body(i):\n        lowest[i] = if_else(lowest[i-1] <= days[i], lowest[i-1], days[i])\n        partial_max[i] = if_else(partial_max[i-1] >= days[i] - lowest[i-1], partial_max[i-1], days[i] - lowest[i-1])\n    \n    for_range(1, n)(loop_body)\n    \n    return partial_max[n-1]\n", "model_name": "deepseek-v3"}
{"test_name": "len5_inc_array", "response_0": "def len5_inc_array(init):\n    \"\"\"\n    Return an increase-by-one array with given initial element and length 5.\n    \"\"\"\n    ret = Array(5, sint)  # Define an array of size 5 with secret integers (sint)\n    @for_range(5)\n    def _(i):\n        ret[i] = init + i  # Fill the array with init + i\n    return ret\n", "response_1": "def len5_inc_array(init):\n    \"\"\"\n    Return an increase-by-one array with given initial element and length 5.\n    \"\"\"\n    ret = Array(5, sint)\n    for i in range(5):\n        ret[i] = init + i\n    return ret\n", "model_name": "deepseek-v3"}
{"test_name": "cut_first_five", "response_0": "def cut_first_five(arr):\n    \"\"\"\n    Return the array composed of the first 5 elements of the input array. \n    If the input array does not have 5 elements, pad with 0.\n    \"\"\"\n    ret = Array(5, sint(0))  # Initialize an array of size 5 with secret integers initialized to 0\n    for i in range(5):\n        if i < len(arr):\n            ret[i] = arr[i]\n        else:\n            ret[i] = sint(0)  # Pad with 0 if the input array is shorter than 5\n    return ret\n", "response_1": "from Compiler.types import Array, sint\n\ndef cut_first_five(arr):\n    \"\"\"\n    Return the array composed of the first 5 elements of the input array. \n    If the input array does not have 5 elements, pad with 0.\n    \"\"\"\n    ret = Array(5, sint)\n    for i in range(5):\n        if i < len(arr):\n            ret[i] = arr[i]\n        else:\n            ret[i] = sint(0)\n    return ret\n", "model_name": "deepseek-v3"}
{"test_name": "max_pooling_1d", "response_0": "def max_pooling_1d(vec, step):\n    \"\"\"\n    Do 1-dimensional max pooling on vec with step. \n    Ignoring the remaining elements in the vector.\n    \"\"\"\n    ret_length = len(vec) // step\n    ret = Array(ret_length, sfix)\n    \n    for i in range(ret_length):\n        max_val = vec[i * step]\n        for j in range(step):\n            max_val = max(max_val, vec[i * step + j])\n        ret[i] = max_val\n    \n    return ret\n", "response_1": "def max_pooling_1d(vec, step):\n    \"\"\"\n    Do 1-dimensional max pooling on vec with step.\n    Ignoring the remaining elements in the vector.\n    \"\"\"\n    ret_length = len(vec) // step\n    ret = Array(ret_length, sfix)\n    \n    for i in range(ret_length):\n        max_val = vec[i * step]\n        for j in range(step):\n            current = vec[i * step + j]\n            max_val = max(max_val, current)\n        ret[i] = max_val\n    \n    return ret\n", "model_name": "deepseek-v3"}
{"test_name": "array_greater", "response_0": "def array_greater(arr, brr):\n    \"\"\"\n    For the two input arrays arr and brr, return an array ret with the same size.\n    For index i, if arr[i] > brr[i], ret[i] will be set to 1, otherwise ret[i] will be set to 0.\n    The two input arrays are guaranteed to have the same length.\n    \"\"\"\n    ret = Array(len(arr), sgf2n)  # Initialize an array of the same length as arr and brr\n    for i in range(len(arr)):\n        ret[i] = arr[i] > brr[i]  # MP-SPDZ directly supports comparison operations\n    return ret\n", "response_1": "def array_greater(arr, brr):\n    \"\"\"\n    For the two input arrays arr and brr, return an array ret with the same size. \n    For index i, if arr[i]>brr[i], ret[i] will be set to 1, otherwise ret[i] will be set to 0. \n    The two input arrays are guaranteed to have the same length. \n    \"\"\"\n    ret = Array(len(arr), sint)  # Initialize an array of secret integers with the same length as arr and brr\n    for i in range(len(arr)):\n        ret[i] = arr[i] > brr[i]  # Compare arr[i] and brr[i], and store the result in ret[i]\n    return ret\n", "model_name": "deepseek-v3"}
{"test_name": "dumb_concat", "response_0": "def dumb_concat(arr, brr):\n    \"\"\"\n    Concatenate the second array to the first array in a dumb way.\n    \"\"\"\n    length = len(arr) + len(brr)\n    ret = Array(length, sint)\n    \n    for i in range(len(arr)):\n        ret[i] = arr[i]\n    \n    for j in range(len(brr)):\n        ret[len(arr) + j] = brr[j]\n    \n    return ret\n", "response_1": "def dumb_concat(arr, brr):\n    \"\"\"\n    Concatenate the second array to the first array in a dumb way.\n    \"\"\"\n    length = len(arr) + len(brr)\n    ret = Array(length, sint)\n    \n    for i in range(len(arr)):\n        ret[i] = arr[i]\n    \n    for j in range(len(brr)):\n        ret[len(arr) + j] = brr[j]\n    \n    return ret\n", "model_name": "deepseek-v3"}
{"test_name": "indicator_if_else", "response_0": "def indicator_if_else(a, b, ind):\n    \"\"\"\n    Return an array c with the same length of a and b. \n    The element of c is set to be the corresponding element of a if the indicator is 1, \n    and is set to be the corresponding element of b if the indicator is 0.\n    \"\"\"\n    c = Array(len(ind), sint)  # Initialize an array of secret integers with the same length as ind\n    for i in range(len(ind)):\n        c[i] = ind[i].if_else(a[i], b[i])  # Use if_else to select between a[i] and b[i] based on ind[i]\n    return c\n", "response_1": "def indicator_if_else(a, b, ind):\n    \"\"\"\n    Return an array c with the same length of a and b.\n    The element of c is set to be the corresponding element of a if the indicator is 1,\n    and is set to be the corresponding element of b if the indicator is 0.\n    \"\"\"\n    c = Array(len(ind), sfix)  # Initialize an array of secure fixed-point numbers\n    @for_range(len(ind))\n    def _(i):\n        c[i] = if_else(ind[i], a[i], b[i])  # Use if_else to select between a[i] and b[i] based on ind[i]\n    return c\n", "model_name": "deepseek-v3"}
{"test_name": "elementwise_multiplication", "response_0": "def elementwise_multiplication(a, b):\n    \"\"\"\n    Compute the elementwise multiplication of the two input vectors.\n    \"\"\"\n    # Initialize the result vector with the same length as input vectors\n    ret = Array(len(a), sfix)\n    \n    # Perform elementwise multiplication\n    for i in range(len(ret)):\n        ret[i] = a[i] * b[i]\n    \n    return ret\n", "response_1": "def elementwise_multiplication(a, b):\n    \"\"\"\n    Compute the elementwise multiplication of the two input vectors.\n    \"\"\"\n    ret = Array(len(a), sint)  # Initialize an array of secure integers\n    for i in range(len(a)):\n        ret[i] = a[i] * b[i]  # Perform elementwise multiplication\n    return ret\n", "model_name": "deepseek-v3"}
{"test_name": "get_subarr_by_indices", "response_0": "def get_subarr_by_indices(a, indices):\n    \"\"\"\n    Get the subarray of the input array indicated by the indices.\n    The inputs are guaranteed to be legal.\n    \"\"\"\n    ret = Array(len(indices), sfix)\n    for i in range(len(indices)):\n        ret[i] = a[indices[i]]\n    return ret\n", "response_1": "def get_subarr_by_indices(a, indices):\n    \"\"\"\n    Get the subarray of the input array indicated by the indices. \n    The inputs are guaranteed to be legal.\n    \"\"\"\n    ret = Array(len(indices), sgf2n)  # Initialize an array of the same length as indices\n    for i in range(len(indices)):\n        ret[i] = a[indices[i]]  # Access the element at the index and assign it to the result array\n    return ret\n", "model_name": "deepseek-v3"}
{"test_name": "inc_array", "response_0": "def inc_array(num):\n    \"\"\"\n    Return an array with length num and elements 1 to num.\n    The input is guaranteed to be a cleartext positive integer.\n    \"\"\"\n    arr = Array(num, sint)  # Create an array of size num with secret integers\n    @for_range(num)\n    def _(i):\n        arr[i] = i + 1  # Fill the array with values from 1 to num\n    return arr\n", "response_1": "def inc_array(num):\n    \"\"\"\n    Return an array with length num and elements 1 to num.\n    The input is guaranteed to be a cleartext positive integer.\n    \"\"\"\n    arr = Array(num, sint)  # Create an array of size num with secret integers\n    for i in range(num):\n        arr[i] = sint(i + 1)  # Assign i+1 to each element in the array\n    return arr\n", "model_name": "deepseek-v3"}
{"test_name": "cut_last_five", "response_0": "def cut_last_five(arr):\n    \"\"\"\n    Return the array composed of the last 5 elements of the input array. \n    If the input array does not have 5 elements, pad with 0 (at the beginning).\n    \"\"\"\n    ret = Array(5, sfix(0))\n    n = len(arr)\n    for i in range(5):\n        if n - 1 - i >= 0:\n            ret[4 - i] = arr[n - 1 - i]\n        else:\n            ret[4 - i] = sfix(0)\n    return ret\n", "response_1": "def cut_last_five(arr):\n    \"\"\"\n    Return the array composed of the last 5 elements of the input array. \n    If the input array does not have 5 elements, pad with 0 (at the beginning).\n    \"\"\"\n    ret = Array(5, sint(0))  # Initialize an array of size 5 with 0s\n    n = len(arr)\n    for i in range(5):\n        if i < n:\n            ret[4 - i] = arr[n - 1 - i]\n        else:\n            ret[4 - i] = sint(0)  # Pad with 0 if the array is shorter than 5\n    return ret\n", "model_name": "deepseek-v3"}
{"test_name": "average_pooling_1d", "response_0": "def average_pooling_1d(vec, step):\n    \"\"\"\n    Do 1-dimensional average pooling on vec with step.\n    Ignoring the remaining elements in the vector.\n    \"\"\"\n    ret_length = len(vec) // step\n    ret = Array(ret_length, sfix)\n    \n    for i in range(ret_length):\n        avg = sfix(0)\n        for j in range(step):\n            avg = avg + vec[i * step + j] / step\n        ret[i] = avg\n    \n    return ret\n", "response_1": "def average_pooling_1d(vec, step):\n    \"\"\"\n    Do 1-dimensional average pooling on vec with step.\n    Ignoring the remaining elements in the vector.\n    \"\"\"\n    ret_length = len(vec) // step\n    ret = Array(ret_length, sfix)\n    \n    @for_range(ret_length)\n    def _(i):\n        avg = sfix(0)\n        @for_range(step)\n        def _(j):\n            avg = avg + vec[i * step + j] / step\n        ret[i] = avg\n    \n    return ret\n", "model_name": "deepseek-v3"}
{"test_name": "array_relu", "response_0": "def array_relu(arr):\n    \"\"\"\n    Apply ReLU function elementwisely to the input array.\n    \"\"\"\n    ret = Array(len(arr), sint)\n    for i in range(len(arr)):\n        ret[i] = arr[i].if_else(sint(0), arr[i] >= 0)\n    return ret\n", "response_1": "def array_relu(arr):\n    \"\"\"\n    Apply ReLU function elementwisely to the input array.\n    \"\"\"\n    ret = Array(len(arr), sint)  # Create an array of secret integers with the same length as input\n    for i in range(len(arr)):\n        ret[i] = if_else(arr[i] >= 0, arr[i], 0)  # Apply ReLU function\n    return ret\n", "model_name": "deepseek-v3"}
{"test_name": "move_to_end", "response_0": "def move_to_end(arr, index):\n    \"\"\"\n    Move the element with given index in the array to the end of the array.\n    The index is guaranteed to be legal.\n    \"\"\"\n    temp = arr[index]\n    for i in range(index + 1, len(arr)):\n        arr[i - 1] = arr[i]\n    arr[len(arr) - 1] = temp\n    return arr\n", "response_1": "def move_to_end(arr, index):\n    \"\"\"\n    Move the element with given index in the array to the end of the array.\n    The index is guaranteed to be legal.\n    \"\"\"\n    temp = arr[index]\n    @for_range_opt(index + 1, len(arr))\n    def _(i):\n        arr[i - 1] = arr[i]\n    arr[len(arr) - 1] = temp\n    return arr\n", "model_name": "deepseek-v3"}
{"test_name": "set_to_zero", "response_0": "def set_to_zero(arr, index):\n    \"\"\"\n    Set the element in the input array with given index to zero.\n    The input index is guaranteed to be legal.\n    \"\"\"\n    @for_range(len(arr))\n    def _(i):\n        arr[i] = arr[i] * (i != index)\n    return arr\n", "response_1": "from Compiler import types\n\ndef set_to_zero(arr, index):\n    \"\"\"\n    Set the element in the input array with given index to zero.\n    The input index is guaranteed to be legal.\n    \"\"\"\n    # Create a zero value of the same type as the array elements\n    zero = types.sint(0)\n    \n    # Update the array at the given index with the zero value\n    arr[index] = zero\n    \n    return arr\n", "model_name": "deepseek-v3"}
{"test_name": "last_partial_sum", "response_0": "def last_partial_sum(arr, n):\n    \"\"\"\n    Return the sum of the last n elements in the input array.\n    n is guaranteed to be legal.\n    \"\"\"\n    ret = sfix(0)\n    for i in range(len(arr) - n, len(arr)):\n        ret = ret + arr[i]\n    return ret\n", "response_1": "def last_partial_sum(arr, n):\n    \"\"\"\n    Return the sum of the last n elements in the input array.\n    n is guaranteed to be legal.\n    \"\"\"\n    ret = 0\n    start = len(arr) - n\n    for i in range(start, len(arr)):\n        ret = ret + arr[i]\n    return ret\n", "model_name": "deepseek-v3"}
{"test_name": "permute_by_indices", "response_0": "def permute_by_indices(a, indices):\n    \"\"\"\n    Permute the input array a by the indices.\n    The i'th element in the returned array will be a[indices[i]].\n    The input indices are guaranteed to be a legal permutation.\n    \"\"\"\n    ret = Array(len(a), sint)  # Initialize an array of the same length as a\n    @for_range(len(a))\n    def _(i):\n        ret[i] = a[indices[i]]\n    return ret\n", "response_1": "def permute_by_indices(a, indices):\n    \"\"\"\n    Permute the input array a by the indices.\n    The i'th element in the returned array will be a[indices[i]].\n    The input indices are guaranteed to be a legal permutation.\n    \"\"\"\n    ret = Array(len(a), sint)  # Initialize an array of secret integers\n    @for_range(len(a))\n    def _(i):\n        ret[i] = a[indices[i]]\n    return ret\n", "model_name": "deepseek-v3"}
{"test_name": "get_rank", "response_0": "def get_rank(arr, index):\n    \"\"\"\n    Get the rank in the array of the element (how many elements are smaller than the element) with given index.\n    \"\"\"\n    rank = 0\n    for i in range(len(arr)):\n        if arr[i] < arr[index]:\n            rank = rank + 1\n    return rank\n", "response_1": "def get_rank(arr, index):\n    \"\"\"\n    Get the rank in the array of the element (how many elements are smaller than the element) with given index.\n    \"\"\"\n    rank = sint(0)\n    for item in arr:\n        rank += (item < arr[index])\n    return rank\n", "model_name": "deepseek-v3"}
{"test_name": "interchange_by_indices", "response_0": "def interchange_by_indices(arr, index1, index2):\n    \"\"\"\n    Interchange the two elements in the array with given indices.\n    The input indices are guaranteed to be legal.\n    \"\"\"\n    temp = arr[index1]\n    arr[index1] = arr[index2]\n    arr[index2] = temp\n    return arr\n", "response_1": "def interchange_by_indices(arr, index1, index2):\n    \"\"\"\n    Interchange the two elements in the array with given indices.\n    The input indices are guaranteed to be legal.\n    \"\"\"\n    temp = arr[index1]\n    arr[index1] = arr[index2]\n    arr[index2] = temp\n    return arr\n", "model_name": "deepseek-v3"}
{"test_name": "increase_by", "response_0": "def increase_by(arr, index, k):\n    \"\"\"\n    Increase the element arr[index] in the array arr by k.\n    \"\"\"\n    # Create a new array where all elements are 0 except the one at the secret index\n    mask = Array(len(arr), sint(0))\n    mask[index] = sint(1)\n    \n    # Multiply the mask by k and add it to the original array\n    arr = arr + mask * k\n    return arr\n", "response_1": "def increase_by(arr, index, k):\n    \"\"\"\n    Increase the element arr[index] in the array arr by k.\n    \"\"\"\n    arr[index] = arr[index] + k\n    return arr\n", "model_name": "deepseek-v3"}
{"test_name": "retrieve_by_index", "response_0": "# Assuming arr is an array of sint and index is an sint\narr = Array(10, sint)\nindex = sint(5)\nelement = retrieve_by_index(arr, index)\nprint_ln(\"Element at index %s: %s\", index.reveal(), element.reveal())\n", "response_1": "def retrieve_by_index(arr, index):\n    \"\"\"\n    Retrieve the element in the array by index.\n    The input index is guaranteed to be legal.\n    \"\"\"\n    return arr.get(index)\n", "model_name": "deepseek-v3"}
{"test_name": "scale_by", "response_0": "from Compiler.types import Array, sint\n\ndef scale_by(arr: Array, index: int, k: sint) -> Array:\n    \"\"\"\n    Multiply the element arr[index] in the array arr by k.\n    \"\"\"\n    arr[index] = arr[index] * k\n    return arr\n", "response_1": "def scale_by(arr, index, k):\n    \"\"\"\n    Multiply the element arr[index] in the array arr by k.\n    \"\"\"\n    arr[index] = arr[index] * k\n    return arr\n", "model_name": "deepseek-v3"}
{"test_name": "take_opposite_to", "response_0": "def take_opposite_to(arr, index):\n    \"\"\"\n    Take opposite to the element in the array with given index.\n    The input index is guaranteed to be legal.\n    \"\"\"\n    # Access the element at the given index\n    element = arr[index]\n    \n    # Compute the opposite of the element\n    opposite_element = -element\n    \n    # Update the array with the opposite element\n    arr[index] = opposite_element\n    \n    # Return the modified array\n    return arr\n", "response_1": "def take_opposite_to(arr, index):\n    \"\"\"\n    Take opposite to the element in the array with given index.\n    The input index is guaranteed to be legal.\n    \"\"\"\n    arr[index] = -arr[index]\n    return arr\n", "model_name": "deepseek-v3"}
{"test_name": "array_rank", "response_0": "def array_rank(l):\n    \"\"\"\n    Return an array with the same size of the original array, \n    each position of which records the number of elements smaller than the element at the same position. \n    \"\"\"\n    ret = Array(len(l), sint(0))\n    for i in range(len(l)):\n        for j in range(len(l)):\n            if l[j] < l[i]:\n                ret[i] = ret[i] + 1\n    return ret\n", "response_1": "from Compiler import types\n\ndef array_rank(l):\n    \"\"\"\n    Return an array with the same size of the original array, \n    each position of which records the number of elements smaller than the element at the same position. \n    \"\"\"\n    n = len(l)\n    ret = types.Array(n, types.sint)  # Initialize an array of secret integers\n    for i in range(n):\n        ret[i] = types.sint(0)  # Initialize each element to 0\n        for j in range(n):\n            ret[i] += (l[j] < l[i]).if_else(1, 0)  # Increment if l[j] < l[i]\n    return ret\n", "model_name": "deepseek-v3"}
{"test_name": "remove_by_index", "response_0": "def remove_by_index(arr, index):\n    \"\"\"\n    Remove the element in the array by index and return the remaining array.\n    The input index is guaranteed to be legal.\n    \"\"\"\n    ret = Array(len(arr) - 1, sfix)\n    for i in range(len(arr) - 1):\n        if i < index:\n            ret[i] = arr[i]\n        else:\n            ret[i] = arr[i + 1]\n    return ret\n", "response_1": "def remove_by_index(arr, index):\n    \"\"\"\n    Remove the element in the array by index and return the remaining array.\n    The input index is guaranteed to be legal.\n    \"\"\"\n    ret = Array(len(arr) - 1, sint)\n    @for_range(len(arr) - 1)\n    def _(i):\n        if_then_else(i < index, \n            lambda: ret[i].update(arr[i]), \n            lambda: ret[i].update(arr[i + 1]))\n    return ret\n", "model_name": "deepseek-v3"}
{"test_name": "process_by_index", "response_0": "def process_by_index(arr, index, func):\n    \"\"\"\n    Process the element in the input array with given index.\n    The input index is guaranteed to be legal.\n    \"\"\"\n    arr[index] = func(arr[index])\n    return arr\n", "response_1": "def process_by_index(arr, index, func):\n    \"\"\"\n    Process the element in the input array with given index.\n    The input index is guaranteed to be legal.\n    \"\"\"\n    arr[index] = func(arr[index])\n    return arr\n", "model_name": "deepseek-v3"}
{"test_name": "sum_by_indices", "response_0": "def sum_by_indices(arr, indices):\n    \"\"\"\n    Compute the sum of elements in the array with given indices.\n    The input indices are guaranteed to be legal.\n    \"\"\"\n    sum = sfix(0)\n    for index in indices:\n        sum = sum + arr[index]\n    return sum\n", "response_1": "def sum_by_indices(arr, indices):\n    \"\"\"\n    Compute the sum of elements in the array with given indices.\n    The input indices are guaranteed to be legal.\n    \"\"\"\n    sum = sfix(0)\n    for index in indices:\n        sum = sum + arr[index]\n    return sum\n", "model_name": "deepseek-v3"}
