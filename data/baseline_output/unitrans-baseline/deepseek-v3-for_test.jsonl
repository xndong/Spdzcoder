{"test_name": "multiply_first_five", "response_0": "def multiply_first_five(array):\n    \"\"\"\n    Multiply the first five elements in the array (if len(array)<5 then multiply all)\n    \"\"\"\n    prod = 1\n    for i in range(len(array)):\n        prod *= array[i]\n        if i >= 4:\n            break\n    return prod\n", "response_1": "def multiply_first_five(array):\n    \"\"\"\n    Multiply the first five elements in the array (if len(array)<5 then multiply all)\n    \"\"\"\n    prod = 1\n    for i in range(len(array)):\n        prod *= array[i]\n        if i >= 4:\n            break\n    return prod\n", "model_name": "deepseek-v3"}
{"test_name": "second_largest", "response_0": "def second_largest(arr):\n    \"\"\"\n    Return the second largest element in the array.\n    \"\"\"\n    # Initialize largest and second largest values\n    largest = arr[0] if arr[0] >= arr[1] else arr[1]\n    second = arr[1] if arr[0] >= arr[1] else arr[0]\n\n    # Iterate through the array to find the second largest element\n    for i in range(len(arr)):\n        if i > 1:\n            # Compare the current element with the largest\n            cmp_largest = arr[i] >= largest\n            # Update second and largest accordingly\n            second = cmp_largest.if_else(largest, second)\n            largest = cmp_largest.if_else(arr[i], largest)\n            # Compare the current element with the second largest\n            cmp_second = arr[i] >= second\n            # Update second if necessary\n            second = cmp_second.if_else(arr[i], second)\n\n    return second\n", "response_1": "def second_largest(arr):\n    \"\"\"\n    Return the second largest element in the array.\n    \"\"\"\n    # Initialize largest and second largest values\n    largest = arr[0] if arr[0] >= arr[1] else arr[1]\n    second = arr[1] if arr[0] >= arr[1] else arr[0]\n    \n    # Iterate through the array to find the second largest element\n    for i in range(len(arr)):\n        if i > 1:\n            # Check if the current element is greater than the largest\n            is_greater_than_largest = arr[i] >= largest\n            # Update second and largest accordingly\n            second = if_else(is_greater_than_largest, largest, if_else(arr[i] >= second, arr[i], second))\n            largest = if_else(is_greater_than_largest, arr[i], largest)\n    \n    return second\n", "model_name": "deepseek-v3"}
{"test_name": "partial_sum", "response_0": "from Compiler import types\n\ndef partial_sum(arr):\n    \"\"\"\n    Compute the partial sum of the array.\n    \"\"\"\n    partial = types.sint(0)\n    for i in range(len(arr)):\n        partial = partial + arr[i]\n        arr[i] = partial\n    return arr\n", "response_1": "def partial_sum(arr):\n    \"\"\"\n    Compute the partial sum of the array.\n    \"\"\"\n    partial = sfix(0)\n    for i in range(len(arr)):\n        partial = partial + arr[i]\n        arr[i] = partial\n    return arr\n", "model_name": "deepseek-v3"}
{"test_name": "max_adjacent_product", "response_0": "from util import if_else\nfrom Compiler import types\n\ndef max_adjacent_product(arr):\n    \"\"\"\n    Return the max product of adjacent elements in the array.\n    The input array is guaranteed to have length at least 2.\n    \"\"\"\n    # Initialize the current maximum product\n    cur = arr[0] * arr[1]\n    \n    # Iterate through the array to find the maximum product of adjacent elements\n    for i in range(len(arr) - 1):\n        product = arr[i] * arr[i + 1]\n        cur = if_else(product > cur, product, cur)\n    \n    return cur\n", "response_1": "def max_adjacent_product(arr):\n    \"\"\"\n    Return the max product of adjacent elements in the array.\n    The input array is guaranteed to have length at least 2. \n    \"\"\"\n    # Initialize the current maximum product\n    cur = arr[0] * arr[1]\n    \n    # Iterate through the array to find the maximum product of adjacent elements\n    for i in range(len(arr) - 1):\n        product = arr[i] * arr[i + 1]\n        # Update cur if the current product is greater\n        cur = if_else(product > cur, product, cur)\n    \n    return cur\n", "model_name": "deepseek-v3"}
{"test_name": "argmax", "response_0": "def argmax(a):\n    \"\"\"\n    Return the index of the max value of an array.\n    \"\"\"\n    current = a[0]\n    index = 0\n    for i in range(len(a)):\n        comp = current >= a[i]\n        index = comp.if_else(index, i)\n        current = comp.if_else(current, a[i])\n    return index\n", "response_1": "def argmax(a):\n    \"\"\"\n    Return the index of the max value of an array.\n    \"\"\"\n    current = a[0]\n    index = 0\n    for i in range(len(a)):\n        greater = a[i] > current\n        index = greater.if_else(i, index)\n        current = greater.if_else(a[i], current)\n    return index\n", "model_name": "deepseek-v3"}
{"test_name": "count_distinct", "response_0": "def count_distinct(arr):\n    \"\"\"\n    Return the number of distinct values in the array.\n    \"\"\"\n    counter = sint(0)\n    n = len(arr)\n    for i in range(n):\n        unique = sint(1)\n        for j in range(i):\n            unique = unique * (1 - (arr[j] == arr[i]))\n        counter = counter + unique\n    return counter\n", "response_1": "program count_distinct(arr):\n    \"\"\"\n    Return the number of distinct values in the array.\n    \"\"\"\n    counter = sint(0)\n    for i in range(len(arr)):\n        unique = sint(1)\n        for j in range(i):\n            if arr[j] == arr[i]:\n                unique = sint(0)\n        counter = counter + unique\n    return counter\n", "model_name": "deepseek-v3"}
{"test_name": "exists_true", "response_0": "def exists_true(arr):\n    \"\"\"\n    Check whether the boolean array contains a True.\n    \"\"\"\n    ret = sbool(False)\n    for item in arr:\n        ret = ret or item\n    return ret\n", "response_1": "def exists_true(arr):\n    \"\"\"\n    Check whether the boolean array contains a True.\n    \"\"\"\n    ret = sbits(False)  # Initialize ret as a secret-shared False\n    for item in arr:\n        ret = ret | item  # Perform a bitwise OR operation\n    return ret\n", "model_name": "deepseek-v3"}
{"test_name": "range", "response_0": "def range(arr):\n    \"\"\"\n    Return the range of the array.\n    \"\"\"\n    max_value = arr[0]\n    min_value = arr[0]\n    \n    for i in range(len(arr)):\n        max_value = max(max_value, arr[i])\n        min_value = min(min_value, arr[i])\n    \n    return max_value - min_value\n", "response_1": "def range(arr):\n    \"\"\"\n    Return the range of the array.\n    \"\"\"\n    max_value = arr[0]\n    min_value = arr[0]\n    for item in arr:\n        max_value = if_else(max_value >= item, max_value, item)\n        min_value = if_else(min_value <= item, min_value, item)\n    return max_value - min_value\n", "model_name": "deepseek-v3"}
{"test_name": "count_larger_than_5", "response_0": "from Compiler.library import *\n\ndef count_larger_than_5(arr):\n    \"\"\"\n    Count the number of elements in the given array larger than 5.\n    \"\"\"\n    counter = regint(0)\n    for item in arr:\n        @if_(item > 5)\n        def _():\n            counter.iadd(1)\n    return counter\n", "response_1": "def count_larger_than_5(arr):\n    \"\"\"\n    Count the number of elements in the given array larger than 5.\n    \"\"\"\n    counter = sint(0)\n    for i in range(len(arr)):\n        if arr[i] > 5:\n            counter = counter + 1\n    return counter\n", "model_name": "deepseek-v3"}
{"test_name": "exists_dominator", "response_0": "def exists_dominator(arr):\n    \"\"\"\n    Check whether there exists a dominator in the given array, \n    whose absolute value is strictly larger than the sum of the absolute values of all other elements. \n    \"\"\"\n    # Initialize max and sum as secret-shared values\n    max_val = sfix(0)\n    total_sum = sfix(0)\n    \n    for item in arr:\n        # Compute the absolute value of the current item\n        abs_item = abs(item)\n        \n        # Update max_val if the current item's absolute value is greater\n        max_val = max(max_val, abs_item)\n        \n        # Accumulate the sum of absolute values\n        total_sum += abs_item\n    \n    # Check if 2 * max_val > total_sum\n    return 2 * max_val > total_sum\n", "response_1": "def exists_dominator(arr):\n    \"\"\"\n    Check whether there exists a dominator in the given array, \n    whose absolute value is strictly larger than the sum of the absolute values of all other elements. \n    \"\"\"\n    # Initialize max and sum\n    max = sfix(0)\n    sum = sfix(0)\n    \n    # Iterate through the array\n    for item in arr:\n        # Update max if the current item's absolute value is greater\n        max = if_else(abs(item) > max, abs(item), max)\n        # Accumulate the sum of absolute values\n        sum = sum + abs(item)\n    \n    # Check if 2*max > sum\n    return 2 * max > sum\n", "model_name": "deepseek-v3"}
{"test_name": "greedy_picker", "response_0": "def greedy_picker(items, captivity):\n    num = sint(0)\n    for item in items:\n        condition = item <= captivity\n        captivity = captivity - condition * item\n        num = num + condition\n    return num\n", "response_1": "def greedy_picker(items, captivity):\n    \"\"\"\n    There is a greedy picker with a bag picking items. \n    Once the picker sees an item that his bag has space for, he will pick up the item (which will take some space) and put it into his bag. \n    You should compute how many items the greedy picker can finally get with the greedy strategy. \n    \"\"\"\n    num = sint(0)\n    for item in items:\n        if item <= captivity:\n            captivity = captivity - item\n            num = num + 1\n    return num\n", "model_name": "deepseek-v3"}
{"test_name": "scalar_add_array", "response_0": "def scalar_add_array(s, l):\n    \"\"\"\n    Add all the elements in the array to the scalar and return the result.\n    \"\"\"\n    for i in range(len(l)):\n        s = s + l[i]\n    return s\n", "response_1": "def scalar_add_array(s, l):\n    \"\"\"\n    Add all the elements in the array to the scalar and return the result.\n    \"\"\"\n    result = s\n    for item in l:\n        result = result + item\n    return result\n", "model_name": "deepseek-v3"}
{"test_name": "is_equidistant_seq", "response_0": "def is_equidistant_seq(arr):\n    \"\"\"\n    Return whether or not the array is an equidistant sequence. \n    If the array has length 1 or 0, return True.\n    \"\"\"\n    n = len(arr)\n    if n <= 1:\n        return True\n    \n    d = arr[1] - arr[0]\n    for i in range(1, n-1):\n        if arr[i+1] - arr[i] != d:\n            return False\n    return True\n", "response_1": "def is_equidistant_seq(arr):\n    \"\"\"\n    Return whether or not the array is an equidistant sequence. \n    If the array has length 1 or 0, return True.\n    \"\"\"\n    n = len(arr)\n    if n <= 1:\n        return True\n    \n    d = arr[1] - arr[0]\n    for i in range(1, n-1):\n        if arr[i+1] - arr[i] != d:\n            return False\n    return True\n", "model_name": "deepseek-v3"}
{"test_name": "inner_product", "response_0": "def inner_product(vec1, vec2):\n    \"\"\"\n    Compute the inner product of the two arrays.\n    \"\"\"\n    sum = sfix(0)\n    for i in range(len(vec1)):\n        sum = sum + vec1[i] * vec2[i]\n    return sum\n", "response_1": "def inner_product(vec1, vec2):\n    \"\"\"\n    Compute the inner product of the two arrays.\n    \"\"\"\n    sum = sfix(0)\n    for i in range(len(vec1)):\n        sum = sum + vec1[i] * vec2[i]\n    return sum\n", "model_name": "deepseek-v3"}
{"test_name": "more_distinct_nonnegative", "response_0": "from Compiler import types\n\ndef more_distinct_nonnegative(arr):\n    \"\"\"\n    Return whether the array has more distinct nonnegative elements than distinct negative elements.\n    \"\"\"\n    nonnegative_counter = types.sint(0)\n    negative_counter = types.sint(0)\n    n = len(arr)\n    \n    for i in range(n):\n        unique = types.sint(1)\n        for j in range(i):\n            unique = unique * (1 - (arr[j] == arr[i]))\n        nonnegative_counter = nonnegative_counter + unique * (arr[i] >= 0)\n        negative_counter = negative_counter + unique * (arr[i] < 0)\n    \n    return nonnegative_counter > negative_counter\n", "response_1": "def more_distinct_nonnegative(arr):\n    \"\"\"\n    Return whether the array has more distinct nonnegative elements than distinct negative elements.\n    \"\"\"\n    nonnegative_counter = sint(0)\n    negative_counter = sint(0)\n    \n    for i in range(len(arr)):\n        unique = True\n        for j in range(i):\n            if arr[j] == arr[i]:\n                unique = False\n                break\n        if unique:\n            if arr[i] >= 0:\n                nonnegative_counter = nonnegative_counter + 1\n            else:\n                negative_counter = negative_counter + 1\n                \n    return nonnegative_counter > negative_counter\n", "model_name": "deepseek-v3"}
{"test_name": "flip_positives", "response_0": "def flip_positives(array):\n    \"\"\"\n    Flip the positive elements in the array\n    \"\"\"\n    for i in range(len(array)):\n        # Check if the element is positive\n        is_positive = array[i] > 0\n        \n        # If positive, flip the sign; otherwise, keep the value\n        array[i] = if_else(is_positive, -array[i], array[i])\n    \n    return array\n", "response_1": "from Compiler.types import Array, cint\n\ndef flip_positives(array):\n    \"\"\"\n    Flip the positive elements in the array\n    \"\"\"\n    for i in range(len(array)):\n        @if_(array[i] > 0)\n        def _():\n            array[i] = -array[i]\n    return array\n", "model_name": "deepseek-v3"}
{"test_name": "divide_and_plus", "response_0": "def divide_and_plus(x):\n    \"\"\"\n    Repeat the following to the input for 4 times:\n    divide by 2, then plus 1\n    \"\"\"\n    for i in range(4):\n        x = x / 2  # Division in MP-SPDZ\n        x = x + 1  # Addition in MP-SPDZ\n    return x\n", "response_1": "program divide_and_plus:\n    # Input: x (secret integer)\n    # Output: x after applying the operation 4 times\n    def divide_and_plus(x):\n        for i in range(4):\n            x = x / 2\n            x = x + 1\n        return x\n", "model_name": "deepseek-v3"}
{"test_name": "array_log2", "response_0": "def array_log2(arr):\n    \"\"\"\n    Take logarithm with base two to all elements in the input array.\n    \"\"\"\n    # MP-SPDZ does not have a built-in log2 function, so we need to implement it\n    # Using the change of base formula: log2(x) = log(x) / log(2)\n    log2 = lambda x: log(x) / log(2)\n    \n    # Apply the log2 function to each element in the array\n    for i in range(len(arr)):\n        arr[i] = log2(arr[i])\n    \n    return arr\n", "response_1": "from util import *\nfrom fixedpt import *\n\ndef array_log2(arr):\n    \"\"\"\n    Take logarithm with base two to all elements in the input array.\n    This function assumes the input array contains fixed-point numbers.\n    \"\"\"\n    result = Array(len(arr), sfix)\n    for i in range(len(arr)):\n        result[i] = log2_fx(arr[i])\n    return result\n", "model_name": "deepseek-v3"}
{"test_name": "sum_to_ten", "response_0": "def sum_to_ten(array):\n    \"\"\"\n    Compute partial sum of the array until the sum becomes no smaller than 10.\n    \"\"\"\n    sum = sfix(0)\n    for i in range(len(array)):\n        sum = sum + array[i]\n        if sum >= sfix(10):\n            break\n    return sum\n", "response_1": "def sum_to_ten(array):\n    \"\"\"\n    Compute partial sum of the array until the sum becomes no smaller than 10.\n    \"\"\"\n    sum = sfix(0)\n    for i in range(len(array)):\n        sum += array[i]\n        if sum >= 10:\n            break\n    return sum\n", "model_name": "deepseek-v3"}
{"test_name": "choppy_plus_minus", "response_0": "from Compiler.library import *\nfrom Compiler.types import *\n\ndef choppy_plus_minus(arr):\n    \"\"\"\n    Return the array with the following modification of the input array:\n    For the element with odd index, increment the element by 1, \n    for the element with even index, decrement the element by 1. \n    \"\"\"\n    for i in range(len(arr)):\n        if i % 2 == 1:\n            arr[i] = arr[i] + 1\n        else:\n            arr[i] = arr[i] - 1\n    return arr\n", "response_1": "def choppy_plus_minus(arr):\n    \"\"\"\n    Return the array with the following modification of the input array:\n    For the element with odd index, increment the element by 1, \n    for the element with even index, decrement the element by 1. \n    \"\"\"\n    for i in range(len(arr)):\n        if i % 2 == 1:\n            arr[i] = arr[i] + 1\n        else:\n            arr[i] = arr[i] - 1\n    return arr\n", "model_name": "deepseek-v3"}
{"test_name": "min_element", "response_0": "def min_element(a):\n    \"\"\"\n    Return the min value of an array.\n    \"\"\"\n    current = a[0]\n    for item in a:\n        current = if_else(current <= item, current, item)\n    \n    return current\n", "response_1": "def min_element(a):\n    \"\"\"\n    Return the minimum value of an array.\n    \"\"\"\n    current = a[0]\n    for item in a:\n        current = current.min(item)\n    \n    return current\n", "model_name": "deepseek-v3"}
{"test_name": "soft_max", "response_0": "from util import if_else\nfrom Compiler import types\n\ndef soft_max(arr):\n    \"\"\"\n    Return the array of soft-max of the input array.\n    \"\"\"\n    # Initialize denominator to 0\n    denominator = types.sint(0)\n    \n    # Compute the denominator\n    for item in arr:\n        denominator = denominator + item.exp()\n    \n    # Compute the soft-max for each element\n    brr = [None] * len(arr)\n    for i in range(len(arr)):\n        brr[i] = arr[i].exp() / denominator\n    \n    return brr\n", "response_1": "from Compiler import types\nfrom Compiler import instructions\nfrom Compiler import util\n\ndef soft_max(arr):\n    \"\"\"\n    Return the array of soft-max of the input array.\n    \"\"\"\n    # Initialize denominator to 0\n    denominator = types.sfix(0)\n    \n    # Calculate the sum of e^arr[i] for all i\n    for item in arr:\n        denominator += item.exp()\n    \n    # Create a new array to store the soft-max values\n    brr = types.Array(len(arr), types.sfix)\n    \n    # Calculate the soft-max for each element\n    for i in range(len(arr)):\n        brr[i] = arr[i].exp() / denominator\n    \n    return brr\n", "model_name": "deepseek-v3"}
{"test_name": "count_reverse_pair_with_break", "response_0": "def count_reverse_pair_with_break(arr):\n    \"\"\"\n    Count the number of reverse pairs before we find an element bigger than 10\n    \"\"\"\n    count = sint(0)\n    n = len(arr)\n    for i in range(1, n):\n        if arr[i] > 10:\n            break\n        for j in range(i):\n            if arr[j] > arr[i]:\n                count = count + 1\n    return count\n", "response_1": "def count_reverse_pair_with_break(arr):\n    \"\"\"\n    Count the number of reverse pairs before we find an element bigger than 10\n    \"\"\"\n    count = sint(0)\n    n = len(arr)\n    break_flag = sint(0)\n    \n    for i in range(1, n):\n        if break_flag == 0:\n            if arr[i] > 10:\n                break_flag = sint(1)\n            else:\n                for j in range(i):\n                    if arr[j] > arr[i]:\n                        count += sint(1)\n    return count\n", "model_name": "deepseek-v3"}
{"test_name": "sum_unique", "response_0": "def sum_unique(arr):\n    \"\"\"\n    Return the sum of unique elements in the array.\n    \"\"\"\n    sum = sfix(0)\n    n = len(arr)\n    for i in range(n):\n        unique = sbit(True)\n        for j in range(n):\n            if j != i:\n                unique = unique & (arr[j] != arr[i])\n        sum = sum + arr[i] * unique\n    return sum\n", "response_1": "def sum_unique(arr):\n    \"\"\"\n    Return the sum of unique elements in the array.\n    \"\"\"\n    sum = 0\n    n = len(arr)\n    for i in range(n):\n        unique = True\n        for j in range(n):\n            if j != i and arr[j] == arr[i]:\n                unique = False\n                break\n        if unique:\n            sum = sum + arr[i]\n    return sum\n", "model_name": "deepseek-v3"}
{"test_name": "check_sum", "response_0": "from Compiler.library import *\n\ndef check_sum(array, target):\n    \"\"\"\n    Check whether the sum of the array equals the target value.\n    \"\"\"\n    sum = sfix(0)\n    for num in array:\n        sum = sum + num\n    return sum == target\n", "response_1": "def check_sum(array, target):\n    \"\"\"\n    Check whether the sum of the array equals the target value.\n    \"\"\"\n    sum = sfix(0)\n    for num in array:\n        sum = sum + num\n    return sum == target\n", "model_name": "deepseek-v3"}
{"test_name": "prod", "response_0": "def prod(array):\n    \"\"\"\n    Multiply together all elements in the array.\n    \"\"\"\n    prod = 1\n    for num in array:\n        prod = prod * num\n    return prod\n", "response_1": "def prod(array):\n    \"\"\"\n    Multiply together all elements in the array.\n    \"\"\"\n    prod = 1\n    for num in array:\n        prod = prod * num\n    return prod\n", "model_name": "deepseek-v3"}
{"test_name": "sum_till_negative", "response_0": "def sum_till_negative(array):\n    \"\"\"\n    Sum from the first element in the array until a negative one occurs\n    \"\"\"\n    sum = 0\n    for i in range(len(array)):\n        if array[i] < 0:\n            break\n        sum += array[i]\n    return sum\n", "response_1": "program sum_till_negative\n    sfix sum = 0\n    sfix i = 0\n    sfix array_length = len(array)\n    while i < array_length:\n        sfix element = array[i]\n        if element < 0:\n            break\n        sum += element\n        i += 1\n    return sum\n", "model_name": "deepseek-v3"}
{"test_name": "count_satisfied", "response_0": "def count_satisfied(arr, predicator):\n    \"\"\"\n    Count the number of elements in the array satisfies the predicator.\n    \"\"\"\n    sum = sint(0)  # Initialize sum as a secret integer\n    for i in range(len(arr)):\n        # Apply the predicator to the current element\n        condition = predicator(arr[i])\n        # Increment sum if the condition is true\n        sum = sum + condition\n    return sum\n", "response_1": "def count_satisfied(arr, predicator):\n    \"\"\"\n    Count the number of elements in the array that satisfy the predicator.\n    \"\"\"\n    sum = 0\n    for i in range(len(arr)):\n        if predicator(arr[i]):\n            sum = sum + 1\n    return sum\n", "model_name": "deepseek-v3"}
{"test_name": "standard_deviation", "response_0": "def standard_deviation(arr):\n    \"\"\"\n    Return the standard deviation of the array.\n    \"\"\"\n    # Calculate the average\n    average = 0\n    for item in arr:\n        average = average + item / len(arr)\n    \n    # Calculate the variance\n    variance = 0\n    for item in arr:\n        variance = variance + (item - average) ** 2 / len(arr)\n    \n    # Return the standard deviation\n    return variance.sqrt()\n", "response_1": "from util import if_else\nfrom Compiler import types\n\ndef standard_deviation(arr):\n    \"\"\"\n    Return the standard deviation of the array.\n    \"\"\"\n    # Calculate the average\n    average = types.sint(0)\n    for item in arr:\n        average = average + item / len(arr)\n    \n    # Calculate the variance\n    variance = types.sint(0)\n    for item in arr:\n        diff = item - average\n        variance = variance + (diff * diff) / len(arr)\n    \n    # Return the standard deviation\n    return variance.sqrt()\n", "model_name": "deepseek-v3"}
{"test_name": "dominate", "response_0": "def dominate(a, b):\n    \"\"\"\n    Return whether array a \"dominates\" array b,\n    which means, every element in a is no smaller than the corresponding element in b.\n    \"\"\"\n    ret = True\n    for i in range(len(a)):\n        ret = ret * (a[i] >= b[i])\n    return ret\n", "response_1": "def dominate(a, b):\n    \"\"\"\n    Return whether array a \"dominates\" array b,\n    which means, every element in a is no smaller than the corresponding element in b.\n    \"\"\"\n    ret = True\n    for i in range(len(a)):\n        ret = ret * (a[i] >= b[i])\n    return ret\n", "model_name": "deepseek-v3"}
{"test_name": "rescale", "response_0": "def rescale(brr):\n    \"\"\"\n    To rescale the array such that the array can be fitted into [-1,1]\n    The input is guaranteed to be nonempty with nonzero element.\n    \"\"\"\n    max_abs = sfix(0)\n    for item in brr:\n        abs_item = abs(item)\n        max_abs = max_abs.max(abs_item)\n    for i in range(len(brr)):\n        brr[i] = brr[i] / max_abs\n    return brr\n", "response_1": "def rescale(brr):\n    \"\"\"\n    To rescale the array such that the array can be fitted into [-1,1]\n    The input is guaranteed to be nonempty with nonzero element.\n    \"\"\"\n    max_abs = sfix(0)\n    for item in brr:\n        current_abs = abs(item)\n        max_abs = if_else(current_abs > max_abs, current_abs, max_abs)\n    \n    for i in range(len(brr)):\n        brr[i] = brr[i] / max_abs\n    \n    return brr\n", "model_name": "deepseek-v3"}
{"test_name": "array_minus7", "response_0": "def array_minus7(arr):\n    \"\"\"\n    Subtract all elements in the input array by 7.\n    \"\"\"\n    for i in range(len(arr)):\n        arr[i] = arr[i] - 7\n    return arr\n", "response_1": "def array_minus7(arr):\n    \"\"\"\n    Subtract all elements in the input array by 7.\n    \"\"\"\n    result = Array(len(arr), sfix)\n    for i in range(len(arr)):\n        result[i] = arr[i] - 7\n    return result\n", "model_name": "deepseek-v3"}
{"test_name": "traverse_and_sum", "response_0": "# Define the function in MP-SPDZ\ndef traverse_and_sum(arr1, arr2):\n    \"\"\"\n    Traverse all pairs of elements from the two inputs, \n    compute the product of the two elements and sum all of them up.\n    \"\"\"\n    sum = sfix(0)  # Initialize sum as a secret-shared fixed-point number\n    for i in range(len(arr1)):\n        for j in range(len(arr2)):\n            sum = sum + arr1[i] * arr2[j]  # Multiply and accumulate the products\n    return sum\n", "response_1": "def traverse_and_sum(arr1, arr2):\n    \"\"\"\n    Traverse all pairs of elements from the two inputs, \n    compute the product of the two elements and sum all of them up. \n    \"\"\"\n    sum = sfix(0)\n    for i in range(len(arr1)):\n        for j in range(len(arr2)):\n            sum = sum + arr1[i] * arr2[j]\n    return sum\n", "model_name": "deepseek-v3"}
{"test_name": "longest_nondec_subseq", "response_0": "def longest_nondec_subseq(a):\n    \"\"\"\n    Return the length of the longest non-decreasing subsequence in the input array.\n    \"\"\"\n    max_length = sint(0)\n    cur_length = sint(0)\n    \n    for i in range(len(a)):\n        if i == 0:\n            cur_length = sint(1)\n        else:\n            if a[i] >= a[i-1]:\n                cur_length = cur_length + 1\n            else:\n                max_length = max(max_length, cur_length)\n                cur_length = sint(1)\n    \n    max_length = max(max_length, cur_length)\n    return max_length\n", "response_1": "program longest_nondec_subseq(a):\n    \"\"\"\n    Return the length of the longest non-decreasing subsequence in the input array.\n    \"\"\"\n    max_length = sint(0)\n    cur_length = sint(0)\n    for i in range(len(a)):\n        if i == 0:\n            cur_length = sint(1)\n            continue\n        if a[i] >= a[i-1]:\n            cur_length = cur_length + sint(1)\n        else:\n            max_length = max(max_length, cur_length)\n            cur_length = sint(1)\n    max_length = max(max_length, cur_length)\n    return max_length\n", "model_name": "deepseek-v3"}
{"test_name": "sum_but_skip_biggest", "response_0": "program sum_but_skip_biggest\n\ndef sum_but_skip_biggest(array):\n    \"\"\"\n    Compute partial sum of the array but skip the biggest element in until now every time.\n    \"\"\"\n    sum = 0\n    biggest = array[0]\n    for i in range(len(array)):\n        if array[i] >= biggest:\n            biggest = array[i]\n            continue\n        sum += array[i]\n    return sum\n\n# Example usage\narray = [3, 1, 4, 1, 5, 9]\nresult = sum_but_skip_biggest(array)\nprint_ln(\"Result: %s\", result)\n", "response_1": "def sum_but_skip_biggest(array):\n    \"\"\"\n    Compute partial sum of the array but skip the biggest element in until now every time.\n    \"\"\"\n    sum = sfix(0)\n    biggest = array[0]\n    for i in range(len(array)):\n        if array[i] >= biggest:\n            biggest = array[i]\n            continue\n        sum += array[i]\n    return sum\n", "model_name": "deepseek-v3"}
{"test_name": "second_test", "response_0": "def second_test(arr):\n    \"\"\"\n    Return whether or not the first element in the array is smaller than exactly one element.\n    \"\"\"\n    count = sint(0)\n    first_element = arr[0]\n    for i in range(1, len(arr)):\n        comparison = first_element < arr[i]\n        count = count + comparison\n    result = count == 1\n    return result\n", "response_1": "def second_test(arr):\n    \"\"\"\n    Return whether or not the first element in the array is smaller than exactly one element.\n    \"\"\"\n    count = sint(0)\n    for i in range(1, len(arr)):\n        comp = arr[0] < arr[i]\n        count = count + comp\n    return count == 1\n", "model_name": "deepseek-v3"}
{"test_name": "Manhattan_distance", "response_0": "def Manhattan_distance(a, b):\n    \"\"\"\n    Compute the Manhattan distance of the two vectors.\n    \"\"\"\n    ret = sfix(0)\n    for i in range(len(a)):\n        ret = ret + abs(a[i] - b[i])\n    return ret\n", "response_1": "def Manhattan_distance(a, b):\n    \"\"\"\n    Compute the Manhattan distance of the two vectors.\n    \"\"\"\n    ret = sfix(0)\n    for i in range(len(a)):\n        ret = ret + abs(a[i] - b[i])\n    return ret\n", "model_name": "deepseek-v3"}
{"test_name": "deal_with_only_positive", "response_0": "def deal_with_only_positive(array):\n    \"\"\"\n    Add and subtract the positive elements in the array to the partial sum\n    Non-positive elements are skipped\n    \"\"\"\n    sign = sfix(1)\n    sum = sfix(0)\n    for i in range(len(array)):\n        if array[i] <= 0:\n            continue\n        sum = sum + sign * array[i]\n        sign = -sign\n    return sum\n", "response_1": "def deal_with_only_positive(array):\n    \"\"\"\n    Add and subtract the positive elements in the array to the partial sum\n    Non-positive elements are skipped\n    \"\"\"\n    sign = 1\n    sum = 0\n    for i in range(len(array)):\n        if array[i] > 0:\n            sum = sum + sign * array[i]\n            sign = -sign\n    return sum\n", "model_name": "deepseek-v3"}
{"test_name": "compare_and_return", "response_0": "def compare_and_return(arr, brr):\n    \"\"\"\n    Compare the elements in arrays `arr` and `brr`, and return the first index `i` with arr[i]==brr[i]\n    \"\"\"\n    ret = -1\n    for i in range(len(arr)):\n        # Compare elements securely\n        equal = arr[i] == brr[i]\n        # If equal is true and ret is still -1, update ret\n        ret = equal.if_else(i, ret)\n        # Break the loop if a match is found\n        break_if(equal)\n    return ret\n", "response_1": "from Compiler import types\n\ndef compare_and_return(arr, brr):\n    \"\"\"\n    Compare the elements in arrays `arr` and `brr`, and return the first index `i` with arr[i]==brr[i]\n    \"\"\"\n    ret = -1\n    for i in range(len(arr)):\n        # Compare the elements using the secure equality check\n        match = arr[i] == brr[i]\n        # Use a secure if_else to update the return value\n        ret = match.if_else(i, ret)\n        # Break the loop if a match is found\n        @if_(match)\n        def _():\n            break_point()\n    return ret\n", "model_name": "deepseek-v3"}
{"test_name": "sum_odd_positive", "response_0": "def sum_odd_positive(arr):\n    \"\"\"\n    Return the sum of all the odd positive numbers in the array.\n    \"\"\"\n    sum = sfix(0)\n    for item in arr:\n        if (item % 2 == 1) * (item > 0):\n            sum = sum + item\n    return sum\n", "response_1": "def sum_odd_positive(arr):\n    \"\"\"\n    Return the sum of all the odd positive numbers in the array.\n    \"\"\"\n    sum = sfix(0)\n    for item in arr:\n        is_odd = item % 2\n        is_positive = item > 0\n        if is_odd * is_positive:\n            sum = sum + item\n    return sum\n", "model_name": "deepseek-v3"}
{"test_name": "two_sum", "response_0": "def two_sum(arr, target):\n    \"\"\"\n    Return whether the input array contains two elements (can be the same) whose sum equals to the target value.\n    \"\"\"\n    n = len(arr)\n    result = False\n    for i in range(n):\n        for j in range(n):\n            sum = arr[i] + arr[j]\n            if sum == target:\n                result = True\n    return result\n", "response_1": "from util import if_else\nfrom Compiler import types\n\ndef two_sum(arr, target):\n    \"\"\"\n    Return whether the input array contains two elements (can be the same) whose sum equals to the target value.\n    \"\"\"\n    n = len(arr)\n    found = types.sint(0)  # Initialize found as a secret-shared integer (0 means False, 1 means True)\n    \n    for i in range(n):\n        for j in range(n):\n            # Check if arr[i] + arr[j] == target\n            condition = (arr[i] + arr[j] == target)\n            # Update found using the condition\n            found = if_else(condition, types.sint(1), found)\n    \n    # Return the result as a secret-shared integer (1 if True, 0 if False)\n    return found\n", "model_name": "deepseek-v3"}
{"test_name": "seq_search", "response_0": "def seq_search(arr, target):\n    \"\"\"\n    Do sequential search in the array for the target.\n    Return the index of the target, return -1 if target not found.\n    The array is guaranteed to have all different elements.\n    \"\"\"\n    index = -1\n    for i in range(len(arr)):\n        match = arr[i] == target\n        index = match.if_else(i, index)\n    return index\n", "response_1": "def seq_search(arr, target):\n    \"\"\"\n    Perform a sequential search in the array for the target.\n    Return the index of the target, return -1 if the target is not found.\n    The array is guaranteed to have all different elements.\n    \"\"\"\n    result = -1\n    for i in range(len(arr)):\n        # Compare the current element with the target\n        found = arr[i] == target\n        # If found, update the result with the current index\n        result = found.if_else(i, result)\n    return result\n", "model_name": "deepseek-v3"}
{"test_name": "choppy_array", "response_0": "def choppy_array(arr):\n    \"\"\"\n    Return whether or not the input array is a \"choppy array\".\n    A \"choppy array\" is the following array: \n    The first element is the smallest, \n    the second is the largest of the remaining, \n    the third is the smallest of the remaining, \n    the fourth is the largest of the remaining, etc.\n    \"\"\"\n    n = len(arr)\n    for i in range(n):\n        for j in range(n - i):\n            if i % 2 == 1:\n                if arr[i + j] > arr[i]:\n                    return False\n            else:\n                if arr[i + j] < arr[i]:\n                    return False\n    return True\n", "response_1": "def choppy_array(arr):\n    \"\"\"\n    Return whether or not the input array is a \"choppy array\".\n    A \"choppy array\" is the following array: \n    The first element is the smallest, \n    the second is the largest of the remaining, \n    the third is the smallest of the remaining, \n    the fourth is the largest of the remaining, etc.\n    \"\"\"\n    n = len(arr)\n    is_choppy = True\n\n    for i in range(n):\n        for j in range(n - i):\n            if i % 2 == 1:\n                if arr[i + j] > arr[i]:\n                    is_choppy = False\n            else:\n                if arr[i + j] < arr[i]:\n                    is_choppy = False\n\n    return is_choppy\n", "model_name": "deepseek-v3"}
{"test_name": "array_process", "response_0": "arr = [sint(1), sint(2), sint(3)]\nprocessed_arr = array_process(arr, square)\n", "response_1": "def array_process(arr, func):\n    \"\"\"\n    Process all elements in the input array with the given function.\n    \"\"\"\n    for i in range(len(arr)):\n        arr[i] = func(arr[i])\n    return arr\n", "model_name": "deepseek-v3"}
{"test_name": "normalize", "response_0": "def normalize(vec):\n    \"\"\"\n    Normalize the vector.\n    \"\"\"\n    sum = sfix(0)\n    for item in vec:\n        sum = sum + item * item\n    base = sfix.sqrt(sum)\n    for i in range(len(vec)):\n        vec[i] = vec[i] / base\n    return vec\n", "response_1": "def normalize(vec):\n    \"\"\"\n    Normalize the vector.\n    \"\"\"\n    sum = sfix(0)\n    for item in vec:\n        sum = sum + item * item\n    base = sum.sqrt()\n    for i in range(len(vec)):\n        vec[i] = vec[i] / base\n    return vec\n", "model_name": "deepseek-v3"}
{"test_name": "impatient_merchant", "response_0": "def impatient_merchant(days):\n    \"\"\"\n    You are given the prices of some goods in consecutive days. \n    Here's an impatient merchant who will buy the good at the first days, \n    and sell it until its price becomes higher than its original cost. \n    Then he will buy the good in the next day and repeat the above process. \n    The good left in the hand of the merchant in the last day will worth nothing.\n    You should calculate the net value the impatient merchant can earn.\n    \"\"\"\n    can_buy = sbit(True)\n    net = sbit(0)\n    orig_price = sbit(0)\n    for i in range(len(days)):\n        if can_buy:\n            net = net - days[i]\n            orig_price = days[i]\n            can_buy = sbit(False)\n        else:\n            if days[i] > orig_price:\n                net = net + days[i]\n                can_buy = sbit(True)\n    return net\n", "response_1": "def impatient_merchant(days):\n    \"\"\"\n    You are given the prices of some goods in consecutive days. \n    Here's an impatient merchant who will buy the good at the first days, \n    and sell it until its price becomes higher than its original cost. \n    Then he will buy the good in the next day and repeat the above process. \n    The good left in the hand of the merchant in the last day will worth nothing.\n    You should calculate the net value the impatient merchant can earn.\n    \"\"\"\n    can_buy = True\n    net = 0\n    orig_price = 0\n    for i in range(len(days)):\n        if can_buy:\n            net = net - days[i]\n            orig_price = days[i]\n            can_buy = False\n        else:\n            if days[i] > orig_price:\n                net = net + days[i]\n                can_buy = True\n    return net\n", "model_name": "deepseek-v3"}
{"test_name": "array_shift", "response_0": "def array_shift(a):\n    \"\"\"\n    Shift the array on index by 1.\n    For example, [0,1,2] will be shifted to [1,2,0]\n    \"\"\"\n    n = len(a)\n    temp = a[n-1]\n    @for_range(n-1)\n    def _(i):\n        a[n-i-1] = a[n-i-2]\n    a[0] = temp\n    return a\n", "response_1": "def array_shift(a):\n    \"\"\"\n    Shift the array on index by 1.\n    For example, [0,1,2] will be shifted to [1,2,0]\n    \"\"\"\n    n = len(a)\n    temp = a[n - 1]\n    for i in range(n - 1):\n        a[n - i - 1] = a[n - i - 2]\n    a[0] = temp\n    return a\n", "model_name": "deepseek-v3"}
{"test_name": "array_double", "response_0": "def array_double(arr):\n    \"\"\"\n    Double all elements in the input array.\n    \"\"\"\n    n = len(arr)\n    for i in range(n):\n        arr[i] = arr[i] * 2\n    return arr\n", "response_1": "def array_double(arr):\n    \"\"\"\n    Double all elements in the input array.\n    \"\"\"\n    for i in range(len(arr)):\n        arr[i] = arr[i] * sfix(2)\n    return arr\n", "model_name": "deepseek-v3"}
{"test_name": "stop_at_zero", "response_0": "def stop_at_zero(array):\n    \"\"\"\n    Add 1 to all elements in the array, but stop if found an element equal to 0\n    \"\"\"\n    for i in range(len(array)):\n        if array[i] == 0:\n            break\n        array[i] = array[i] + 1\n    return array\n", "response_1": "from Compiler.types import Array, cint\n\ndef stop_at_zero(array: Array):\n    \"\"\"\n    Add 1 to all elements in the array, but stop if found an element equal to 0\n    \"\"\"\n    n = len(array)\n    for i in range(n):\n        # Check if the current element is zero\n        is_zero = (array[i] == 0)\n        # Break the loop if the element is zero\n        break_loop = is_zero\n        # Add 1 to the element if it's not zero\n        array[i] = array[i] + (1 - is_zero)\n        # Break the loop if the condition is met\n        if break_loop:\n            break\n    return array\n", "model_name": "deepseek-v3"}
{"test_name": "array_not", "response_0": "def array_not(arr):\n    \"\"\"\n    Take opposite to all elements in the input array.\n    \"\"\"\n    for i in range(len(arr)):\n        arr[i] = 1 - arr[i]  # In MP-SPDZ, 1 - x is equivalent to not x for binary values\n    return arr\n", "response_1": "def array_not(arr):\n    \"\"\"\n    Take opposite to all elements in the input array.\n    \"\"\"\n    result = Array(len(arr), sfix)\n    for i in range(len(arr)):\n        result[i] = 1 - arr[i]\n    return result\n", "model_name": "deepseek-v3"}
{"test_name": "array_process_then_clip", "response_0": "def array_process_then_clip(arr, func):\n    \"\"\"\n    Process all elements in the input array with given function, \n    then clip the outcome into range [-10,10]\n    \"\"\"\n    for i in range(len(arr)):\n        arr[i] = func(arr[i])\n        arr[i] = if_else(arr[i] > 10, 10, arr[i])\n        arr[i] = if_else(arr[i] < -10, -10, arr[i])\n    return arr\n", "response_1": "from Compiler.library import for_range\nfrom Compiler.types import Array, cint, sint\n\ndef array_process_then_clip(arr, func):\n    \"\"\"\n    Process all elements in the input array with given function, \n    then clip the outcome into range [-10, 10].\n    \"\"\"\n    n = len(arr)\n    for i in for_range(n):\n        arr[i] = func(arr[i])\n        arr[i] = arr[i].if_else(10, arr[i] > 10)\n        arr[i] = arr[i].if_else(-10, arr[i] < -10)\n    return arr\n", "model_name": "deepseek-v3"}
{"test_name": "add_and_count_positive", "response_0": "def add_and_count_positive(array, k):\n    \"\"\"\n    Add k to all elements in the given array, and count the number of positive numbers in the output array. \n    Return both the output array and the count. \n    \"\"\"\n    count = sint(0)\n    output_array = Array(len(array), sint)\n    \n    for i in range(len(array)):\n        output_array[i] = array[i] + k\n        if output_array[i] > 0:\n            count = count + 1\n    \n    return output_array, count\n", "response_1": "def add_and_count_positive(array, k):\n    \"\"\"\n    Add k to all elements in the given array, and count the number of positive numbers in the output array.\n    Return both the output array and the count.\n    \"\"\"\n    count = sint(0)\n    output_array = Array(len(array), sint)\n    \n    for i in range(len(array)):\n        output_array[i] = array[i] + k\n        if output_array[i] > 0:\n            count = count + 1\n    \n    return output_array, count\n", "model_name": "deepseek-v3"}
{"test_name": "array_subtract", "response_0": "def array_subtract(a, b):\n    \"\"\"\n    Subtract the first array by the second one elementwise.\n    If one of the arrays is shorter than the other, it will be padded with 0.\n    \"\"\"\n    len_a = len(a)\n    len_b = len(b)\n    max_len = max(len_a, len_b)\n    \n    # Initialize the result array with zeros\n    ret = Array(max_len, sint(0))\n    \n    # Subtract the elements from a and b\n    for i in range(min(len_a, len_b)):\n        ret[i] = a[i] - b[i]\n    \n    # Handle the case where a is longer than b\n    if len_a > len_b:\n        for i in range(len_b, len_a):\n            ret[i] = a[i]\n    \n    # Handle the case where b is longer than a\n    else:\n        for i in range(len_a, len_b):\n            ret[i] = -b[i]\n    \n    return ret\n", "response_1": "def array_subtract(a, b):\n    \"\"\"\n    Subtract the first array by the second one elementwise.\n    If one of the arrays is shorter than the other, it will be padded with 0.\n    \"\"\"\n    len_a = len(a)\n    len_b = len(b)\n    max_len = max(len_a, len_b)\n    \n    # Initialize the result array with zeros\n    ret = Array(max_len, sint(0))\n    \n    # Subtract elementwise up to the length of the shorter array\n    for i in range(min(len_a, len_b)):\n        ret[i] = a[i] - b[i]\n    \n    # Handle the remaining elements if a is longer than b\n    for i in range(len_a, max_len):\n        ret[i] = a[i] if i < len_a else sint(0)\n    \n    # Handle the remaining elements if b is longer than a\n    for i in range(len_b, max_len):\n        ret[i] = -b[i] if i < len_b else sint(0)\n    \n    return ret\n", "model_name": "deepseek-v3"}
{"test_name": "lower_bound", "response_0": "def lower_bound(arr, x):\n    \"\"\"\n    Return the index of the largest element not bigger than x in arr.\n    If such element does not exist, return -1.\n    \"\"\"\n    ret = -1\n    distance = 0\n    found = False\n    n = len(arr)\n    \n    for i in range(n):\n        if arr[i] <= x:\n            if not found or (x - arr[i]) < distance:\n                ret = i\n                distance = x - arr[i]\n                found = True\n                \n    return ret\n", "response_1": "def lower_bound(arr, x):\n    \"\"\"\n    Return the index of the largest element not bigger than x in arr.\n    If such element does not exist, return -1.\n    \"\"\"\n    ret = -1\n    distance = 0\n    found = False\n    for i in range(len(arr)):\n        cond = arr[i] <= x\n        new_distance = x - arr[i]\n        cond2 = not found or new_distance < distance\n        update_cond = cond * cond2\n        ret = update_cond * i + (1 - update_cond) * ret\n        distance = update_cond * new_distance + (1 - update_cond) * distance\n        found = update_cond * True + (1 - update_cond) * found\n    return ret\n", "model_name": "deepseek-v3"}
{"test_name": "argmin", "response_0": "def argmin(a):\n    \"\"\"\n    Return the index of the minimum value of an array in a privacy-preserving manner.\n    \"\"\"\n    current = a[0]\n    index = 0\n    for i in range(1, len(a)):\n        condition = current > a[i]\n        index = condition * i + (1 - condition) * index\n        current = condition * a[i] + (1 - condition) * current\n    return index\n", "response_1": "def argmin(a):\n    \"\"\"\n    Return the index of the min value of an array.\n    \"\"\"\n    current = a[0]\n    index = 0\n    for i in range(1, len(a)):\n        if a[i] < current:\n            current = a[i]\n            index = i\n    return index\n", "model_name": "deepseek-v3"}
{"test_name": "independent_robbery", "response_0": "# Define the function to solve the independent robbery problem\ndef independent_robbery(houses):\n    # Get the number of houses\n    n = len(houses)\n    \n    # Initialize the dp array with zeros\n    dp = Array(n, sint)\n    \n    # Base cases\n    dp[0] = houses[0]\n    dp[1] = max(houses[0], houses[1])\n    \n    # Fill the dp array using dynamic programming\n    for i in range(2, n):\n        dp[i] = max(dp[i-2] + houses[i], dp[i-1])\n    \n    # Return the result\n    return dp[n-1]\n", "response_1": "from Compiler import types\n\ndef independent_robbery(houses):\n    \"\"\"\n    Use dynamic programming to solve the \"independent robbery\" problem in MP-SPDZ.\n    \"\"\"\n    n = len(houses)\n    dp = types.Array(n, types.sint)\n    \n    dp[0] = houses[0]\n    dp[1] = dp[1].if_else(dp[1] >= dp[0], dp[0])\n    \n    for i in range(2, n):\n        condition = dp[i-2] + houses[i] >= dp[i-1]\n        dp[i] = condition.if_else(dp[i-2] + houses[i], dp[i-1])\n    \n    return dp[n-1]\n", "model_name": "deepseek-v3"}
{"test_name": "sum_odd_and_odd", "response_0": "def sum_odd_and_odd(arr):\n    \"\"\"\n    A strange sum function in MP-SPDZ\n    \"\"\"\n    sum = sint(0)\n    n = len(arr)\n    for i in range(n):\n        if i % 2 == 0:\n            continue\n        for j in range(i):\n            if j % 2 == 0:\n                continue\n            sum += arr[j]\n    return sum\n", "response_1": "def sum_odd_and_odd(arr):\n    \"\"\"\n    A strange sum function\n    \"\"\"\n    sum = 0\n    n = len(arr)\n    for i in range(n):\n        if i % 2 == 0:\n            continue\n        for j in range(i):\n            if j % 2 == 0:\n                continue\n            sum += arr[j]\n    return sum\n", "model_name": "deepseek-v3"}
{"test_name": "is_monotonous", "response_0": "def is_monotonous(arr):\n    \"\"\"\n    Return whether or not the array is strictly monotonous.\n    \"\"\"\n    d = 0\n    n = len(arr)\n    for i in range(n-1):\n        if i > 0:\n            diff = arr[i+1] - arr[i]\n            cond = (diff * d) <= 0\n            if cond.reveal():\n                return False\n        d = arr[i+1] - arr[i]\n    return True\n", "response_1": "def is_monotonous(arr):\n    \"\"\"\n    Return whether or not the array is strictly monotonous.\n    \"\"\"\n    n = len(arr)\n    d = sfix(0)\n    result = sbit(True)\n    \n    for i in range(n - 1):\n        if i > 0:\n            diff = arr[i+1] - arr[i]\n            result = result & ((diff * d) > 0)\n        d = arr[i+1] - arr[i]\n    \n    return result\n", "model_name": "deepseek-v3"}
{"test_name": "positive_count_negative_sum", "response_0": "def positive_count_negative_sum(arr):\n    \"\"\"\n    Traverse the array, return the number of all positive elements and the sum of all negative elements.\n    \"\"\"\n    count = sint(0)\n    sum = sint(0)\n    for item in arr:\n        count = count + (item > 0).if_else(sint(1), sint(0))\n        sum = sum + (item < 0).if_else(item, sint(0))\n    return count, sum\n", "response_1": "def positive_count_negative_sum(arr):\n    \"\"\"\n    Traverse the array, return the number of all positive elements and the sum of all negative elements.\n    \"\"\"\n    count = sint(0)\n    sum = sint(0)\n    for item in arr:\n        if item > 0:\n            count = count + 1\n        if item < 0:\n            sum = sum + item\n    return count, sum\n", "model_name": "deepseek-v3"}
{"test_name": "sum_even", "response_0": "def sum_even(arr):\n    \"\"\"\n    Return the sum of all the even numbers in the array.\n    \"\"\"\n    sum = sfix(0)\n    for item in arr:\n        is_even = (item % 2) == 0\n        sum = sum + if_else(is_even, item, sfix(0))\n    return sum\n", "response_1": "def sum_even(arr):\n    \"\"\"\n    Return the sum of all the even numbers in the array.\n    \"\"\"\n    sum = sfix(0)\n    for item in arr:\n        is_even = (item % 2) == 0\n        sum = sum + item * is_even\n    return sum\n", "model_name": "deepseek-v3"}
{"test_name": "one_norm", "response_0": "def one_norm(vec):\n    \"\"\"\n    Return the one-norm of the vector.\n    \"\"\"\n    sum = sfix(0)\n    for item in vec:\n        sum = sum + item.abs()\n    return sum\n", "response_1": "def one_norm(vec):\n    \"\"\"\n    Return the one-norm of the vector.\n    \"\"\"\n    sum = sfix(0)\n    for item in vec:\n        sum = sum + abs(item)\n    return sum\n", "model_name": "deepseek-v3"}
{"test_name": "array_floor", "response_0": "def array_floor(arr):\n    \"\"\"\n    Apply Gaussian floor function to all elements in the input array.\n    \"\"\"\n    ret = Array(len(arr), sfix)\n    for i in range(len(arr)):\n        ret[i] = floor(arr[i])\n    return ret\n", "response_1": "def array_floor(arr):\n    \"\"\"\n    Apply Gaussian floor function to all elements in the input array.\n    \"\"\"\n    ret = Array(len(arr), sfix)\n    for i in range(len(arr)):\n        ret[i] = floor(arr[i])\n    return ret\n", "model_name": "deepseek-v3"}
{"test_name": "three_five", "response_0": "def three_five(arr):\n    \"\"\"\n    If the input array contains both/neither 3 and/or 5, return True, \n    otherwise return False.\n    \"\"\"\n    has3 = False\n    has5 = False\n    for item in arr:\n        has3 = has3 or (item == 3)\n        has5 = has5 or (item == 5)\n    return (has3 and has5) or ((not has3) and (not has5))\n", "response_1": "def three_five(arr):\n    \"\"\"\n    If the input array contain both/neither 3 and/or 5, return True, \n    otherwise return False. \n    \"\"\"\n    has3 = False\n    has5 = False\n    for item in arr:\n        has3 = has3 or (item == 3)\n        has5 = has5 or (item == 5)\n    return (has3 and has5) or ((not has3) and (not has5))\n", "model_name": "deepseek-v3"}
{"test_name": "num_above_average", "response_0": "def num_above_average(arr):\n    \"\"\"\n    Return the number of elements in the array larger than or equal to the average value.\n    \"\"\"\n    sum = sfix(0)\n    count = sfix(0)\n    length = len(arr)\n    \n    for i in range(length):\n        sum = sum + arr[i]\n    \n    avg = sum / length\n    \n    for item in arr:\n        cmp = item >= avg\n        count = count + cmp\n    \n    return count\n", "response_1": "def num_above_average(arr):\n    \"\"\"\n    Return the number of elements in the array larger than or equal to the average value.\n    \"\"\"\n    sum = sfix(0)\n    count = sfix(0)\n    n = len(arr)\n    \n    # Calculate the sum of the array elements\n    for i in range(n):\n        sum = sum + arr[i]\n    \n    # Calculate the average\n    avg = sum / n\n    \n    # Count the number of elements above or equal to the average\n    for i in range(n):\n        if arr[i] >= avg:\n            count = count + 1\n    \n    return count\n", "model_name": "deepseek-v3"}
{"test_name": "clip", "response_0": "def clip(arr, upper_bound=1, lower_bound=-1):\n    \"\"\"\n    For the given array, clip the elements to the range [lower_bound, upper_bound]\n    \"\"\"\n    for i in range(len(arr)):\n        arr[i] = sbits.if_else(arr[i] < lower_bound, lower_bound, arr[i])\n        arr[i] = sbits.if_else(arr[i] > upper_bound, upper_bound, arr[i])\n    return arr\n", "response_1": "def clip(arr, upper_bound=1, lower_bound=-1):\n    \"\"\"\n    For the given array, clip the elements to the range [lower_bound, upper_bound]\n    \"\"\"\n    for i in range(len(arr)):\n        # Check if arr[i] is less than lower_bound\n        is_less = arr[i] < lower_bound\n        # Assign lower_bound if arr[i] is less than lower_bound\n        arr[i] = is_less * lower_bound + (1 - is_less) * arr[i]\n        \n        # Check if arr[i] is greater than upper_bound\n        is_greater = arr[i] > upper_bound\n        # Assign upper_bound if arr[i] is greater than upper_bound\n        arr[i] = is_greater * upper_bound + (1 - is_greater) * arr[i]\n    \n    return arr\n", "model_name": "deepseek-v3"}
{"test_name": "sum_with_certain_element_skipped", "response_0": "def sum_with_certain_element_skipped(array):\n    \"\"\"\n    Compute partial sum of the array with all elements causing the partial sum to be in [5,10] skipped.\n    \"\"\"\n    sum = 0\n    for i in range(len(array)):\n        # Compute the potential sum if the current element is added\n        potential_sum = sum + array[i]\n        \n        # Check if the potential sum is in the range [5, 10]\n        condition = (potential_sum >= 5) * (potential_sum <= 10)\n        \n        # If the condition is true, skip adding the element\n        sum = sum + (1 - condition) * array[i]\n    \n    return sum\n", "response_1": "def sum_with_certain_element_skipped(array):\n    \"\"\"\n    Compute partial sum of the array with all elements causing the partial sum to be in [5,10] skipped.\n    \"\"\"\n    sum = 0\n    for i in range(len(array)):\n        # Check if adding the current element would make the sum fall in [5,10]\n        condition = (sum + array[i] >= 5) * (sum + array[i] <= 10)\n        # If the condition is not met, add the element to the sum\n        sum = sum + array[i] * (1 - condition)\n    return sum\n", "model_name": "deepseek-v3"}
{"test_name": "sum_of_odd_and_even", "response_0": "def sum_of_odd_and_even(arr):\n    \"\"\"\n    Return the sum of odd number and even number in the array.\n    The elements in the input array are guaranteed to be integers.\n    \"\"\"\n    odd_sum = sfix(0)\n    even_sum = sfix(0)\n    \n    for item in arr:\n        is_odd = item % 2\n        odd_sum = odd_sum + is_odd * item\n        even_sum = even_sum + (1 - is_odd) * item\n    \n    return odd_sum, even_sum\n", "response_1": "def sum_of_odd_and_even(arr):\n    \"\"\"\n    Return the sum of odd number and even number in the array.\n    The elements in the input array are guaranteed to be integers.\n    \"\"\"\n    odd_sum = sint(0)\n    even_sum = sint(0)\n    for item in arr:\n        is_odd = item % 2\n        odd_sum = odd_sum + is_odd * item\n        even_sum = even_sum + (1 - is_odd) * item\n    return odd_sum, even_sum\n", "model_name": "deepseek-v3"}
{"test_name": "distance", "response_0": "def distance(vec1, vec2):\n    \"\"\"\n    Compute the Euclidean distance between the two vectors.\n    \"\"\"\n    sum_squares = sfix(0)\n    for i in range(len(vec1)):\n        diff = vec1[i] - vec2[i]\n        sum_squares = sum_squares + diff * diff\n    return sqrt(sum_squares)\n", "response_1": "def distance(vec1, vec2):\n    \"\"\"\n    Compute the Euclidean distance between the two vectors.\n    \"\"\"\n    sum = sfix(0)\n    for i in range(len(vec1)):\n        diff = vec1[i] - vec2[i]\n        sum = sum + diff * diff\n    return sum.sqrt()\n", "model_name": "deepseek-v3"}
{"test_name": "num_occurrence", "response_0": "def num_occurrence(arr, target):\n    \"\"\"\n    Return the number of occurrences of the target in the given array.\n    \"\"\"\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] == target:\n            count = count + 1\n    return count\n", "response_1": "def num_occurrence(arr, target):\n    \"\"\"\n    Return the number of occurrence of the target in the given array.\n    \"\"\"\n    count = sint(0)  # Initialize count as a secure integer\n    for item in arr:\n        # Compare each item with the target securely\n        comparison = (item == target)\n        # Add 1 to count if the comparison is true, else add 0\n        count = count + comparison\n    return count\n", "model_name": "deepseek-v3"}
{"test_name": "palindrome", "response_0": "def palindrome(arr):\n    \"\"\"\n    Check whether the array is a palindrome.\n    \"\"\"\n    n = len(arr)\n    flag = True\n    for i in range(n):\n        flag = flag * (arr[i] == arr[n - 1 - i])\n    return flag\n", "response_1": "def palindrome(arr):\n    \"\"\"\n    Check whether the array is a palindrome.\n    \"\"\"\n    flag = True\n    n = len(arr)\n    for i in range(n):\n        flag = flag * (arr[i] == arr[n - 1 - i])\n    return flag\n", "model_name": "deepseek-v3"}
{"test_name": "reverse_order_pair", "response_0": "def reverse_order_pair(arr):\n    \"\"\"\n    Count the number of reverse order pairs in the array.\n    \"\"\"\n    num = sfix(0)\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                num = num + sfix(1)\n    return num\n", "response_1": "def reverse_order_pair(arr):\n    \"\"\"\n    Count the number of reverse order pairs in the array.\n    \"\"\"\n    num = sfix(0)  # Initialize the counter as a secret-shared fixed-point number\n    n = len(arr)   # Get the length of the array\n\n    for i in range(n):\n        for j in range(i+1, n):\n            # Compare arr[i] and arr[j] securely\n            if arr[i] > arr[j]:\n                num = num + sfix(1)  # Increment the counter securely\n\n    return num  # Return the secret-shared count\n", "model_name": "deepseek-v3"}
{"test_name": "sum_of_cubes", "response_0": "# MP-SPDZ program to compute the sum of cubes of elements in an array\n\ndef sum_of_cubes(arr):\n    # Initialize the result as a secret-shared integer\n    ret = sfix(0)\n    \n    # Iterate over each element in the array\n    for item in arr:\n        # Compute the cube of the element and add it to the result\n        ret = ret + item * item * item\n    \n    # Return the final result\n    return ret\n", "response_1": "def sum_of_cubes(arr):\n    \"\"\"\n    Return the sum of cubes of elements in the array.\n    \"\"\"\n    ret = sfix(0)  # Initialize ret as a secret-shared fixed-point number\n    for item in arr:\n        ret = ret + item * item * item  # Compute the cube of item and add to ret\n    return ret\n", "model_name": "deepseek-v3"}
{"test_name": "max_element", "response_0": "def max_element(a):\n    \"\"\"\n    Return the max value of an array.\n    \"\"\"\n    current = a[0]\n    for item in a:\n        current = if_else(current >= item, current, item)\n    \n    return current\n", "response_1": "# Function to find the maximum element in an array\ndef max_element(a):\n    \"\"\"\n    Return the max value of an array.\n    \"\"\"\n    # Initialize current with the first element of the array\n    current = a[0]\n    \n    # Iterate over the array to find the maximum element\n    for i in range(1, len(a)):\n        item = a[i]\n        # Update current if the current item is greater than current\n        current = if_else(current >= item, current, item)\n    \n    return current\n", "model_name": "deepseek-v3"}
{"test_name": "array_if_else", "response_0": "def array_if_else(arr, predicator, if_func, else_func):\n    \"\"\"\n    For each element in the input array, \n    if the predicator returns True, then apply the if-function to the element, \n    otherwise apply the else-function to the element.\n    \"\"\"\n    result = Array(len(arr), arr[0].type)\n    for i in range(len(arr)):\n        result[i] = if_func(arr[i]).if_else(predicator(arr[i]), else_func(arr[i]))\n    return result\n", "response_1": "def array_if_else(arr, predicator, if_func, else_func):\n    \"\"\"\n    For each element in the input array, \n    if the predicator returns True, then apply the if-function to the element, \n    otherwise apply the else-function to the element.\n    \"\"\"\n    result = Array(len(arr), arr.value_type)\n    for i in range(len(arr)):\n        result[i] = if_func(arr[i]) if predicator(arr[i]) else else_func(arr[i])\n    return result\n", "model_name": "deepseek-v3"}
{"test_name": "inf_norm", "response_0": "from Compiler.types import sfix\n\ndef inf_norm(vec):\n    \"\"\"\n    Return the infinite-norm of the vector.\n    \"\"\"\n    max_val = sfix(0)\n    for item in vec:\n        abs_item = abs(item)\n        max_val = max(max_val, abs_item)\n    return max_val\n", "response_1": "from Compiler import types\n\ndef inf_norm(vec):\n    \"\"\"\n    Return the infinite-norm of the vector.\n    \"\"\"\n    max_val = types.sint(0)\n    for item in vec:\n        abs_item = item.abs()\n        max_val = max_val.max(abs_item)\n    return max_val\n", "model_name": "deepseek-v3"}
{"test_name": "array_inc", "response_0": "def array_inc(arr):\n    \"\"\"\n    Increment all elements in the input array by 1\n    \"\"\"\n    for i in range(len(arr)):\n        arr[i] = arr[i] + 1\n    return arr\n", "response_1": "def array_inc(arr):\n    \"\"\"\n    Increment all elements in the input array by 1\n    \"\"\"\n    for i in range(len(arr)):\n        arr[i] = arr[i] + sfix(1)\n    return arr\n", "model_name": "deepseek-v3"}
{"test_name": "count_rises", "response_0": "def count_rises(arr):\n    \"\"\"\n    Count the number of rises in the array.\n    \"\"\"\n    count = sint(0)\n    n = len(arr)\n    for i in range(n - 1):\n        if arr[i] < arr[i + 1]:\n            count = count + 1\n    return count\n", "response_1": "def count_rises(arr):\n    \"\"\"\n    Count the number of rises in the array.\n    \"\"\"\n    count = sint(0)  # Initialize count as a secret integer\n    n = len(arr)\n    for i in range(n - 1):\n        if arr[i] < arr[i + 1]:\n            count = count + 1\n    return count\n", "model_name": "deepseek-v3"}
{"test_name": "skip_at_zero", "response_0": "def skip_at_zero(array):\n    \"\"\"\n    Add 1 to all elements in the array, but skip if found an element equal to 0\n    \"\"\"\n    n = len(array)\n    for i in range(n):\n        if array[i] == 0:\n            continue\n        array[i] = array[i] + 1\n    return array\n", "response_1": "def skip_at_zero(array):\n    \"\"\"\n    Add 1 to all elements in the array, but skip if found an element equal to 0\n    \"\"\"\n    for i in range(len(array)):\n        # Check if the element is not equal to 0\n        condition = array[i] != 0\n        # If the element is not 0, add 1 to it\n        array[i] = array[i] + condition * 1\n    return array\n", "model_name": "deepseek-v3"}
{"test_name": "array_intersect", "response_0": "def array_intersect(p, q):\n    \"\"\"\n    Return whether the two arrays share any common element.\n    \"\"\"\n    result = False\n    for i in range(len(p)):\n        for j in range(len(q)):\n            result = result or (p[i] == q[j])\n    return result\n", "response_1": "def array_intersect(p, q):\n    \"\"\"\n    Return whether the two arrays share any common element.\n    \"\"\"\n    found = False\n    for i in range(len(p)):\n        for j in range(len(q)):\n            if p[i] == q[j]:\n                found = True\n                break\n        if found:\n            break\n    return found\n", "model_name": "deepseek-v3"}
{"test_name": "two_norm", "response_0": "def two_norm(vec):\n    \"\"\"\n    Return the two-norm of the vector.\n    \"\"\"\n    sum = sfix(0)\n    for item in vec:\n        sum = sum + item * item\n    return sum.sqrt()\n", "response_1": "from Compiler.library import *\nfrom Compiler.types import *\n\ndef two_norm(vec):\n    \"\"\"\n    Return the two-norm of the vector.\n    \"\"\"\n    sum = sfix(0)\n    for item in vec:\n        sum = sum + item * item\n    return sum.sqrt()\n", "model_name": "deepseek-v3"}
{"test_name": "sum_between", "response_0": "def sum_between(arr, l, u):\n    \"\"\"\n    Return the sum of elements in arr within range [l,u].\n    \"\"\"\n    sum = sfix(0)\n    for item in arr:\n        condition = (l <= item) * (item <= u)\n        sum = sum + condition * item\n    return sum\n", "response_1": "def sum_between(arr, l, u):\n    \"\"\"\n    Return the sum of elements in arr within range [l,u].\n    \"\"\"\n    sum = 0\n    for item in arr:\n        if_((l <= item) & (item <= u)):\n            sum = sum + item\n    return sum\n", "model_name": "deepseek-v3"}
{"test_name": "largest_gap", "response_0": "def largest_gap(arr):\n    \"\"\"\n    Return the largest gap in the array.\n    The length of the input array is guaranteed to be at least 2.\n    \"\"\"\n    cur = sint(0)\n    for i in range(len(arr)-1):\n        gap = abs(arr[i+1] - arr[i])\n        if gap > cur:\n            cur = gap\n    return cur\n", "response_1": "def largest_gap(arr):\n    \"\"\"\n    Return the largest gap in the array.\n    The length of the input array is guaranteed to be at least 2.\n    \"\"\"\n    cur = 0\n    for i in range(len(arr) - 1):\n        diff = abs(arr[i+1] - arr[i])\n        cur = if_else(diff > cur, diff, cur)\n    return cur\n", "model_name": "deepseek-v3"}
{"test_name": "totally_dominate", "response_0": "def totally_dominate(a, b):\n    \"\"\"\n    Return whether array a \"totally dominates\" array b, \n    which means, any element in a is no smaller than any element in b.\n    \"\"\"\n    # Initialize amin and bmax with the first elements of a and b\n    amin = a[0]\n    bmax = b[0]\n    \n    # Find the minimum element in array a\n    @for_range(len(a))\n    def _(i):\n        amin = min(amin, a[i])\n    \n    # Find the maximum element in array b\n    @for_range(len(b))\n    def _(i):\n        bmax = max(bmax, b[i])\n    \n    # Check if the minimum of a is greater than or equal to the maximum of b\n    return amin >= bmax\n", "response_1": "def totally_dominate(a, b):\n    \"\"\"\n    Return whether array a \"totally dominates\" array b, \n    which means, any element in a is no smaller than any element in b. \n    \"\"\"\n    amin = a[0]\n    bmax = b[0]\n    \n    # Find the minimum value in array a\n    for i in range(len(a)):\n        amin = min(amin, a[i])\n    \n    # Find the maximum value in array b\n    for i in range(len(b)):\n        bmax = max(bmax, b[i])\n    \n    # Return whether the minimum of a is greater than or equal to the maximum of b\n    return amin >= bmax\n", "model_name": "deepseek-v3"}
{"test_name": "element_count", "response_0": "def element_count(arr, target):\n    \"\"\"\n    Count the number of times the target element occurs in the array.\n    \"\"\"\n    ret = sfix(0)  # Initialize ret as a secure fixed-point number\n    for i in range(len(arr)):\n        if arr[i] == target:\n            ret = ret + sfix(1)  # Increment ret by 1 if the element matches the target\n    return ret\n", "response_1": "def element_count(arr, target):\n    \"\"\"\n    Count the number of times the target element occurs in the array.\n    \"\"\"\n    ret = sint(0)\n    for item in arr:\n        ret += (item == target).if_else(sint(1), sint(0))\n    return ret\n", "model_name": "deepseek-v3"}
{"test_name": "is_subarray", "response_0": "from util import if_else\nfrom Compiler import types\n\ndef is_subarray(c, d):\n    \"\"\"\n    Return whether the first array is a continuous subarray of the second array.\n    \"\"\"\n    n = len(d)\n    m = len(c)\n    result = types.sint(0)\n    \n    for i in range(n):\n        if_else(m <= n - i, lambda: (\n            flag = types.sint(1),\n            for j in range(m):\n                flag = flag * (d[i + j] == c[j]),\n            result = result + flag\n        ), lambda: None)\n    \n    return result > 0\n", "response_1": "def is_subarray(c, d):\n    \"\"\"\n    Return whether the first array is a continuous subarray of the second array.\n    \"\"\"\n    len_c = len(c)\n    len_d = len(d)\n    \n    for i in range(len_d):\n        if len_c <= len_d - i:\n            flag = True\n            for j in range(len_c):\n                flag = flag * (d[i + j] == c[j])\n            if flag:\n                return True\n    return False\n", "model_name": "deepseek-v3"}
{"test_name": "exists_5_or_7", "response_0": "def exists_5_or_7(arr):\n    \"\"\"\n    Check whether the array contains 5 or 7.\n    \"\"\"\n    result = False\n    for item in arr:\n        if item == 5 or item == 7:\n            result = True\n            break\n    return result\n", "response_1": "def exists_5_or_7(arr):\n    \"\"\"\n    Check whether the array contains 5 or 7.\n    \"\"\"\n    result = False\n    for item in arr:\n        # Check if the item is 5 or 7\n        is_5 = item == 5\n        is_7 = item == 7\n        is_5_or_7 = is_5 + is_7\n        # Update the result if either 5 or 7 is found\n        result = result + is_5_or_7\n    # Return the result (True if 5 or 7 was found, False otherwise)\n    return result\n", "model_name": "deepseek-v3"}
{"test_name": "variance", "response_0": "def variance(arr):\n    \"\"\"\n    Return the variance of the array.\n    \"\"\"\n    # Calculate the average\n    average = sfix(0)\n    n = len(arr)\n    for item in arr:\n        average = average + item / n\n    \n    # Calculate the variance\n    variance = sfix(0)\n    for item in arr:\n        variance = variance + (item - average) ** 2 / n\n    \n    return variance\n", "response_1": "def variance(arr):\n    \"\"\"\n    Return the variance of the array.\n    \"\"\"\n    n = len(arr)\n    average = sfix(0)\n    variance = sfix(0)\n    \n    # Compute the average\n    for item in arr:\n        average = average + item / n\n    \n    # Compute the variance\n    for item in arr:\n        variance = variance + (item - average) ** 2 / n\n    \n    return variance\n", "model_name": "deepseek-v3"}
{"test_name": "is_ascending", "response_0": "def is_ascending(arr):\n    \"\"\"\n    Return whether or not the array is in strictly ascending order.\n    If the length of input array is 1, you should return True.\n    \"\"\"\n    result = True\n    for i in range(len(arr) - 1):\n        if arr[i] >= arr[i + 1]:\n            result = False\n            break\n    return result\n", "response_1": "def is_ascending(arr):\n    \"\"\"\n    Return whether or not the array is in strictly ascending order.\n    If the length of input array is 1, you should return True.\n    \"\"\"\n    n = len(arr)\n    if n == 1:\n        return True\n    for i in range(n-1):\n        if arr[i] >= arr[i+1]:\n            return False\n    return True\n", "model_name": "deepseek-v3"}
{"test_name": "xor_all", "response_0": "def xor_all(arr):\n    \"\"\"\n    XOR all elements in the array and return the output.\n    The input array is guaranteed to contain only 0's and 1's.\n    \"\"\"\n    ret = arr[0]\n    for i in range(1, len(arr)):\n        ret = ret.bit_xor(arr[i])\n    return ret\n", "response_1": "def xor_all(arr):\n    \"\"\"\n    XOR all elements in the array and return the output.\n    The input array is guaranteed to contain only 0's and 1's.\n    \"\"\"\n    ret = arr[0]\n    for i in range(1, len(arr)):\n        ret = ret ^ arr[i]\n    return ret\n", "model_name": "deepseek-v3"}
{"test_name": "upper_bound", "response_0": "def upper_bound(arr, x):\n    \"\"\"\n    Return the index of the smallest element bigger than x in arr.\n    If such element does not exist, return -1.\n    \"\"\"\n    ret = -1\n    distance = 0\n    found = False\n    for i in range(len(arr)):\n        if arr[i] > x:\n            if not found or arr[i] - x < distance:\n                ret = i\n                distance = arr[i] - x\n                found = True\n    return ret\n", "response_1": "def upper_bound(arr, x):\n    \"\"\"\n    Return the index of the smallest element bigger than x in arr.\n    If such element does not exist, return -1.\n    \"\"\"\n    ret = -1\n    distance = 0\n    found = False\n    for i in range(len(arr)):\n        condition = arr[i] > x\n        if condition:\n            if not found or arr[i] - x < distance:\n                ret = i\n                distance = arr[i] - x\n                found = True\n    return ret\n", "model_name": "deepseek-v3"}
{"test_name": "array_process_then_sum", "response_0": "# Assuming arr is a list of sfix values and func is a function that operates on sfix values\nresult = array_process_then_sum(arr, func)\nprint_ln(\"The sum is: %s\", result.reveal())\n", "response_1": "from util import if_else\nfrom Compiler import types\n\ndef array_process_then_sum(arr, func):\n    \"\"\"\n    Process all elements in the input array with given function, \n    then sum up the processed elements.\n    \"\"\"\n    sum = types.sint(0)\n    for i in range(len(arr)):\n        arr[i] = func(arr[i])\n        sum = sum + arr[i]\n    return sum\n", "model_name": "deepseek-v3"}
{"test_name": "average", "response_0": "def average(arr):\n    \"\"\"\n    Compute the average value of the array.\n    \"\"\"\n    sum = 0\n    length = len(arr)\n    for i in range(length):\n        sum = sum + arr[i]\n    ret = sum / length\n    return ret\n", "response_1": "def average(arr):\n    \"\"\"\n    Compute the average value of the array.\n    \"\"\"\n    sum = sfix(0)\n    length = len(arr)\n    for i in range(length):\n        sum = sum + arr[i]\n    ret = sum / length\n    return ret\n", "model_name": "deepseek-v3"}
{"test_name": "array_filter", "response_0": "def array_filter(arr, predicator):\n    \"\"\"\n    For each element in the input array, \n    if the predicator returns True, then preserve the element, \n    otherwise set the element to 0.\n    \"\"\"\n    result = Array(len(arr), sfix)\n    for i in range(len(arr)):\n        result[i] = arr[i] * predicator(arr[i])\n    return result\n", "response_1": "from util import if_else\n\ndef array_filter(arr, predicator):\n    \"\"\"\n    For each element in the input array, \n    if the predicator returns True, then preserve the element, \n    otherwise set the element to 0.\n    \"\"\"\n    for i in range(len(arr)):\n        arr[i] = if_else(predicator(arr[i]), arr[i], 0)\n    return arr\n", "model_name": "deepseek-v3"}
{"test_name": "sum_up", "response_0": "def sum_up(array):\n    \"\"\"\n    The sum_up function in MP-SPDZ\n    \"\"\"\n    sum = 0\n    for num in array:\n        sum = sum + num\n    return sum\n", "response_1": "def sum_up(array):\n    \"\"\"\n    The sum_up function in MP-SPDZ\n    \"\"\"\n    sum = sfix(0)  # Initialize sum as a secure fixed-point number\n    for num in array:\n        sum = sum + num\n    return sum\n", "model_name": "deepseek-v3"}
{"test_name": "negative_to_zero", "response_0": "def negative_to_zero(array):\n    \"\"\"\n    Turn the negative elements in the array to zero\n    \"\"\"\n    for i in range(len(array)):\n        # Check if the element is negative\n        is_negative = array[i] < 0\n        \n        # If the element is negative, set it to zero, otherwise keep it as is\n        array[i] = is_negative.if_else(0, array[i])\n    \n    return array\n", "response_1": "def negative_to_zero(array):\n    \"\"\"\n    Turn the negative elements in the array to zero\n    \"\"\"\n    for i in range(len(array)):\n        if array[i] >= 0:\n            continue\n        array[i] = 0\n    return array\n", "model_name": "deepseek-v3"}
{"test_name": "sum_only_positive_to_ten", "response_0": "def sum_only_positive_to_ten(array):\n    \"\"\"\n    Compute partial sum of the array with only the positive elements until the sum becomes no smaller than 10.\n    \"\"\"\n    sum = sint(0)\n    for i in range(len(array)):\n        if array[i] <= 0:\n            continue\n        if sum >= 10:\n            break\n        sum = sum + array[i]\n    return sum\n", "response_1": "def sum_only_positive_to_ten(array):\n    \"\"\"\n    Compute partial sum of the array with only the positive elements until the sum becomes no smaller than 10.\n    \"\"\"\n    sum = sint(0)\n    for i in range(len(array)):\n        if array[i] <= 0:\n            continue\n        if sum >= 10:\n            break\n        sum = sum + array[i]\n    return sum\n", "model_name": "deepseek-v3"}
{"test_name": "bubble_sort", "response_0": "def bubble_sort(arr):\n    \"\"\"\n    Perform bubble sort to the array in MP-SPDZ.\n    \"\"\"\n    n = len(arr)\n    for i in range(n - 1):\n        for j in range(n - 1 - i):\n            if arr[j] >= arr[j + 1]:\n                # Swap arr[j] and arr[j + 1]\n                temp = arr[j]\n                arr[j] = arr[j + 1]\n                arr[j + 1] = temp\n    return arr\n", "response_1": "from util import if_else\n\ndef bubble_sort(arr):\n    \"\"\"\n    Perform bubble sort on the array.\n    \"\"\"\n    n = len(arr)\n    for i in range(n - 1):\n        for j in range(n - 1 - i):\n            # Compare arr[j] and arr[j+1]\n            swap = arr[j] >= arr[j + 1]\n            # Swap if necessary\n            temp = arr[j]\n            arr[j] = if_else(swap, arr[j + 1], arr[j])\n            arr[j + 1] = if_else(swap, temp, arr[j + 1])\n    return arr\n", "model_name": "deepseek-v3"}
