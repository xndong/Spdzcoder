'''*
tags::for, if_else

input:
def array_greater(arr,brr):
    """
    For the two input arrays arr and brr, return an array ret with the same size. 
    For index i, if arr[i]>brr[i], ret[i] will be set to 1, otherwise ret[i] will be set to 0. 
    The two input arrays are guaranteed to have the same length. 
    """
    ret = [0 for i in range(len(arr))]
    for i in range(len(arr)):
        if arr[i]>brr[i]:
            ret[i] = 1
        else:
            ret[i] = 0
    return ret

output:
def array_greater(arr,brr):
    """
    For the two input arrays arr and brr, return an array ret with the same size. 
    For index i, if arr[i]>brr[i], ret[i] will be set to 1, otherwise ret[i] will be set to 0. 
    The two input arrays are guaranteed to have the same length. 
    """
    ret = sint.Array(len(arr))
    @for_range(len(arr))
    def _(i):
        ret[i] = arr[i]>brr[i]
    return ret
*'''

####################################################################

# insert here #

####################################################################

def standard(arr,brr):
    """
    For the two input arrays arr and brr, return an array ret with the same size. 
    For index i, if arr[i]>brr[i], ret[i] will be set to 1, otherwise ret[i] will be set to 0. 
    The two input arrays are guaranteed to have the same length. 
    """
    ret = [0 for i in range(len(arr))]
    for i in range(len(arr)):
        if arr[i]>brr[i]:
            ret[i] = 1
        else:
            ret[i] = 0
    return ret

array = [-7000,1.1,-45.1,4,0.01,-1919,810]
brray = [20,0.8,-60,4,0.001,-1919,120]
sarr = sfix.Array(len(array))
sbrr = sfix.Array(len(brray))
for i in range(len(array)):
    sarr[i] = array[i]
for i in range(len(brray)):
    sbrr[i] = brray[i]

output = array_greater(sarr,sbrr)
expected = standard(array,brray)
output.reveal()

flag = sint(1)
for i in range(len(array)):
    flag.update(flag.bit_and(output[i]==expected[i]))

@if_e(flag.reveal())
def _():
    print_ln("Pass the test")
@else_
def _():
    pass