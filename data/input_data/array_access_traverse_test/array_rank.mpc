'''*
tags::array_access, for

input:
def array_rank(l):
    """
    Return an array with the same size of the original array, 
    each position of which records the number of elements smaller than the element at the same position. 
    """
    ret = [0 for i in range(len(l))]
    for i in range(len(l)):
        for j in range(len(l)):
            if l[j]<l[i]:
                ret[i] = ret[i] + 1
    return ret

output:
def array_rank(l):
    """
    Return an array with the same size of the original array, 
    each position of which records the number of elements smaller than the element at the same position. 
    """
    ret = sint.Array(len(l))
    @for_range(len(l))
    def _(i):
        @for_range(len(l))
        def _(j):
            ret[i] = (l[j]<l[i]).if_else(ret[i]+1,ret[i])
    return ret
*'''

####################################################################

# insert here #

####################################################################

def standard(l):
    """
    Return an array with the same size of the original array, 
    each position of which records the number of elements smaller than the element at the same position. 
    """
    ret = [0 for i in range(len(l))]
    for i in range(len(l)):
        for j in range(len(l)):
            if l[j]<l[i]:
                ret[i] = ret[i] + 1
    return ret

arr = [11,4,5,14,191,98,10]
sarr = sfix.Array(len(arr))
for i in range(len(arr)):
    sarr[i] = arr[i]
    
expected = standard(arr)
output = array_rank(sarr)
output.reveal()

flag = sint(1)
for i in range(len(arr)):
    flag.update(flag.bit_and(output[i]==expected[i]))

@if_e(flag.reveal())
def _():
    print_ln("Pass the test")
@else_
def _():
    pass