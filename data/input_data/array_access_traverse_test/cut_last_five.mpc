'''*
tags::for

input:
def cut_last_five(arr):
    """
    Return the array composed of the last 5 elements of the input array. 
    If the input array does not have 5 elements, pad with 0 (at the beginning).
    """
    ret = [0 for i in range(5)]
    for i in range(min(5,len(arr))):
        ret[4-i] = arr[len(arr)-1-i]
    return ret

output:
def cut_last_five(arr):
    """
    Return the array composed of the last 5 elements of the input array. 
    If the input array does not have 5 elements, pad with 0 (at the beginning).
    """
    ret = sfix.Array(5)
    @for_range(min(5,len(arr)))
    def _(i):
        ret[4-i] = arr[len(arr)-1-i]    
    return ret
*'''

####################################################################

# insert here #

####################################################################

arr1 = [1,1,4,5,1,4,1,9,1,9,8,1,0]
arr2 = [9,1,8]
sarr1 = sfix.Array(len(arr1))
sarr2 = sfix.Array(len(arr2))

for i in range(len(arr1)):
    sarr1[i] = arr1[i]
for i in range(len(arr2)):
    sarr2[i] = arr2[i]

out1 = cut_last_five(sarr1)
out2 = cut_last_five(sarr2)
out1.reveal()
out2.reveal()

expected1 = [1,9,8,1,0]
expected2 = [0,0,9,1,8]

flag = sint(1)
for i in range(5):
    flag.update(flag.bit_and(out1[i]==expected1[i]))
for i in range(5):
    flag.update(flag.bit_and(out2[i]==expected2[i]))

@if_e(flag.reveal())
def _():
    print_ln("Pass the test")
@else_
def _():
    pass