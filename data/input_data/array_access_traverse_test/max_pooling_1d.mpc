'''*
tags::for, if_else

input:
def max_pooling_1d(vec,step):
    """
    Do 1-dimensional max pooling on vec with step.
    Ignoring the remaining elements in the vector.
    """
    ret_length = len(vec)//step
    ret = [0 for i in range(ret_length)]
    for i in range(len(ret)):
        max = vec[i*step]
        for j in range(step):
            if vec[i*step+j]>max:
                max = vec[i*step+j]
        ret[i] = max
    return ret

output:
def max_pooling_1d(vec,step):
    """
    Do 1-dimensional max pooling on vec with step.
    Ignoring the remaining elements in the vector.
    """
    ret_length = len(vec)//step
    ret = sfix.Array(ret_length)
    @for_range(len(ret))
    def _(i):
        max = vec[i*step]
        @for_range(step)
        def _(j):
            max.update((vec[i*step+j]>max).if_else(vec[i*step+j],max))
        ret[i] = max
    return ret
*'''

####################################################################

# insert here #

####################################################################

def standard(vec,step):
    """
    Do 1-dimensional max pooling on vec with step.
    Ignoring the remaining elements in the vector.
    """
    ret_length = len(vec)//step
    ret = [0 for i in range(ret_length)]
    for i in range(len(ret)):
        max = vec[i*step]
        for j in range(step):
            if vec[i*step+j]>max:
                max = vec[i*step+j]
        ret[i] = max
    return ret

array = [-7000,1.1,-45.1,4,0.0001,-1919,810,11,24]
sarr = sfix.Array(len(array))
for i in range(len(array)):
    sarr[i] = array[i]

output = max_pooling_1d(sarr,2)
expected = standard(array,2)

try:
    output.reveal()
    flag = sint(1)
    for i in range(len(output)):
        flag.update(flag.bit_and(output[i]==expected[i]))
except Exception as e:
    flag = sint(1)
    for i in range(len(output)):
        flag.update(flag.bit_and(output[i].reveal()==expected[i]))


@if_e(flag.reveal())
def _():
    print_ln("Pass the test")
@else_
def _():
    pass