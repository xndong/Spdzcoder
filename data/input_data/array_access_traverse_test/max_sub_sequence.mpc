'''*
tags::for, if_else

input:
def max_sub_sequence(arr):
    """
    Use dynamic programming to find the sum of max continuous subsequence of the input array.
    """
    partial_max = [0 for i in range(len(arr))]
    suffix_max = [0 for i in range(len(arr))]
    partial_max[0] = arr[0]
    suffix_max[0] = arr[0]
    for i in range(1,len(arr)):
        suffix_max[i] = suffix_max[i-1]+arr[i] if suffix_max[i-1]>=0 else arr[i]
        partial_max[i] = partial_max[i-1] if partial_max[i-1]>=suffix_max[i] else suffix_max[i]
    return partial_max[len(arr)-1]

output:
def max_sub_sequence(arr):
    """
    Use dynamic programming to find the sum of max continuous subsequence of the input array.
    """
    partial_max = sfix.Array(len(arr))
    suffix_max = sfix.Array(len(arr))
    partial_max[0] = arr[0]
    suffix_max[0] = arr[0]
    @for_range(1,len(arr))
    def _(i):
        suffix_max[i] = (suffix_max[i-1]>=0).if_else(suffix_max[i-1]+arr[i], arr[i])
        partial_max[i] = (partial_max[i-1]>=suffix_max[i]).if_else(partial_max[i-1], suffix_max[i])
    return partial_max[len(arr)-1]
*'''

####################################################################

# insert here #

####################################################################

def standard(arr):
    """
    Use dynamic programming to find the sum of max continuous subsequence of the input array.
    """
    partial_max = [0 for i in range(len(arr))]
    suffix_max = [0 for i in range(len(arr))]
    partial_max[0] = arr[0]
    suffix_max[0] = arr[0]
    for i in range(1,len(arr)):
        suffix_max[i] = suffix_max[i-1]+arr[i] if suffix_max[i-1]>=0 else arr[i]
        partial_max[i] = partial_max[i-1] if partial_max[i-1]>=suffix_max[i] else suffix_max[i]
    return partial_max[len(arr)-1]

arr1 = [1,2,3]
arr2 = [-7,-2,-3,-0.5,-21]
arr3 = [7,-20,1,3,5,-2,6,-100,2]
sarr1 = sfix.Array(len(arr1))
sarr2 = sfix.Array(len(arr2))
sarr3 = sfix.Array(len(arr3))

for i in range(len(arr1)):
    sarr1[i] = arr1[i]
for i in range(len(arr2)):
    sarr2[i] = arr2[i]
for i in range(len(arr3)):
    sarr3[i] = arr3[i]

out1 = max_sub_sequence(sarr1)
out2 = max_sub_sequence(sarr2)
out3 = max_sub_sequence(sarr3)
out1.reveal()
out2.reveal()
out3.reveal()

flag = (out1==standard(arr1)).bit_and(out2==standard(arr2)).bit_and(out3==standard(arr3))
@if_e(flag.reveal())
def _():
    print_ln("Pass the test")
@else_
def _():
    pass