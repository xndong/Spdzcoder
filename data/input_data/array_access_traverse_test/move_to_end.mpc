'''*
tags::array_access

input:
def move_to_end(arr, index):
    """
    Move the element with given index in the array to the end of the array.
    The index is guaranteed to be legal.
    """
    temp = arr[index]
    for i in range(index+1,len(arr)):
        arr[i-1]=arr[i]
    arr[len(arr)-1] = temp
    return arr

output:
def move_to_end(arr, index):
    """
    Move the element with given index in the array to the end of the array.
    The index is guaranteed to be legal.
    """
    def retrieve(arr,index):
        """
        Retrieve the element in the array by index.
        """
        ret = sfix(0)
        @for_range(len(arr))
        def _(i):
            ret.update((index==i).if_else(arr[i],ret))
        return ret
    temp = retrieve(arr, index)
    @for_range(1,len(arr))
    def _(i):
        arr[i-1] = (i>=index+1).if_else(arr[i],arr[i-1])
    arr[len(arr)-1] = temp
    return arr
*'''

####################################################################

# insert here #

####################################################################

def standard(arr, index):
    """
    Move the element with given index in the array to the end of the array.
    The index is guaranteed to be legal.
    """
    temp = arr[index]
    for i in range(index+1,len(arr)):
        arr[i-1]=arr[i]
    arr[len(arr)-1] = temp
    return arr

arr = [0, 1, 2, 3, 4, 5, 6, 7]
sarr = sint.Array(len(arr))
indices = [0, 1, 3, 7]
sindices = sint.Array(len(indices))

for i in range(len(arr)):
    sarr[i] = arr[i]
for i in range(len(indices)):
    sindices[i] = indices[i]

flag = sint(1)

for i in range(len(indices)):
    out = move_to_end(sarr, indices[i]) # sindices[i]
    expected = standard(arr, indices[i])
    out.reveal()
    for j in range(len(arr)):
        flag.update(flag.bit_and(out[j]==expected[j]))

@if_e(flag.reveal())
def _():
    print_ln("Pass the test")
@else_
def _():
    pass