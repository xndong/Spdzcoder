'''*
tags::for, array_access

input:
def permute_by_indices(a,indices):
    """
    Permute the input array a by the indices.
    The i'th element in the returned array will be a[indices[i]].
    The input indices are guaranteed to be a legal permutation.
    """
    ret = [0 for i in range(len(a))]
    for i in range(len(a)):
        ret[i] = a[indices[i]]
    return ret

output:
def permute_by_indices(a,indices):
    """
    Permute the input array a by the indices.
    The i'th element in the returned array will be a[indices[i]].
    The input indices are guaranteed to be a legal permutation.
    """
    def retrieve(arr,index):
        """
        Retrieve the element in the array by index.
        """
        ret = sfix(0)
        @for_range(len(arr))
        def _(i):
            ret.update((index==i).if_else(arr[i],ret))
        return ret

    ret = sfix.Array(len(a))
    @for_range(len(a))
    def _(i):
        ret[i] = retrieve(a,indices[i])
    return ret
*'''

####################################################################

# insert here #

####################################################################

arr = [11,0.45,14,19.1,9810]
indices = [4,2,0,1,3]
expected = [9810,14,11,0.45,19.1]

sarr = sfix.Array(len(arr))
sindices = sint.Array(len(indices))
regindices = regint.Array(len(indices))

for i in range(len(arr)):
    sarr[i] = arr[i]
for i in range(len(indices)):
    sindices[i] = indices[i]
    regindices[i] = indices[i]

output = permute_by_indices(sarr, regindices) # sindices
output.reveal()

flag = sint(1)
for i in range(len(arr)):
    flag.update(flag.bit_and(output[i]==expected[i]))

@if_e(flag.reveal())
def _():
    print_ln("Pass the test")
@else_
def _():
    pass