'''*
tags::for, array_access

input:
def sum_by_indices(arr,indices):
    """
    Compute the sum of elements in the array with given indices.
    The input indices are guaranteed to be legal.
    """
    sum = 0
    for index in indices:
        sum = sum + arr[index]
    return sum

output:
def sum_by_indices(arr,indices):
    """
    Compute the sum of elements in the array with given indices.
    The input indices are guaranteed to be legal.
    """
    def retrieve(arr,index):
        """
        Retrieve the element in the array by index.
        """
        ret = sfix(0)
        @for_range(len(arr))
        def _(i):
            ret.update((index==i).if_else(arr[i],ret))
        return ret
    sum = sfix(0)
    @for_range(len(indices))
    def _(i):
        sum.update(sum+retrieve(arr,indices[i]))
    return sum
*'''

####################################################################

# insert here #

####################################################################

def standard(arr,indices):
    """
    Compute the sum of elements in the array with given indices.
    The input indices are guaranteed to be legal.
    """
    sum = 0
    for index in indices:
        sum = sum + arr[index]
    return sum

arr = [11, 45, 14, 19.1, 98, 10]
indices = [0,1,3,4]
sarr = sfix.Array(len(arr))
# sindices = sint.Array(len(indices))
regindices = regint.Array(len(indices))

for i in range(len(arr)):
    sarr[i] = arr[i]
for i in range(len(indices)):
    # sindices[i] = indices[i]
    regindices[i] = indices[i]

# out = sum_by_indices(sarr,sindices)
out = sum_by_indices(sarr,regindices)
out.reveal()

flag = out==standard(arr,indices)

@if_e(flag.reveal())
def _():
    print_ln("Pass the test")
@else_
def _():
    pass