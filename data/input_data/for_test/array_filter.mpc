'''*
tags::for, if_else

input:
def array_filter(arr,predicator):
    """
    For each element in the input array, 
    if the predicator returns Ture, then preserve the element, 
    otherwise set the element to 0. 
    """
    for i in range(len(arr)):
        arr[i] = arr[i] if predicator(arr[i]) else 0
    return arr

output:
def array_filter(arr,predicator):
    """
    For each element in the input array, 
    if the predicator returns Ture, then preserve the element, 
    otherwise set the element to 0. 
    """
    @for_range(len(arr))
    def _(i):
        arr[i] = (predicator(arr[i])).if_else(arr[i],0)
    return arr
*'''

####################################################################

# insert here #

####################################################################

def p(x):
    return x%2

arr = [1,2,0,3]
sarr = sint.Array(len(arr))
for i in range(len(arr)):
    sarr[i] = arr[i]

out = array_filter(sarr,p)
out.reveal()
flag = (out[0]==1).bit_and(out[1]==0).bit_and(out[2]==0).bit_and(out[3]==3)

@if_e(flag.reveal())
def _():
    print_ln("Pass the test")
@else_
def _():
    pass
