'''*
tags::for, math

input:
def array_log2(arr):
    """
    Take logarithm with base two to all elements in the input array.
    """
    import math
    for i in range(len(arr)):
        arr[i] = math.log2(arr[i])
    return arr

output:
def array_log2(arr):
    """
    Take logarithm with base two to all elements in the input array.
    """
    from Compiler import mpc_math
    @for_range(len(arr))
    def _(i):
        arr[i] = mpc_math.log2_fx(arr[i])
    return arr
*'''

####################################################################

# insert here #

####################################################################

def standard(arr):
    """
    Take logarithm with base two to all elements in the input array.
    """
    import math
    for i in range(len(arr)):
        arr[i] = math.log2(arr[i])
    return arr

arr = [1,4,9,114]
sarr = sfix.Array(len(arr))
for i in range(len(arr)):
    sarr[i] = arr[i]

expected = standard(arr)
out = array_log2(sarr)
out.reveal()

flag = sint(1)
for i in range(len(arr)):
    flag.update(flag.bit_and(abs(out[i]-expected[i])<0.01))

@if_e(flag.reveal())
def _():
    print_ln("Pass the test")
@else_
def _():
    pass
