'''*
tags::for

input:
def bubble_sort(arr):
    """
    Perform bubble sort to the array. 
    """
    for i in range(len(arr)-1):
        for j in range(len(arr)-1-i):
            if arr[j]>=arr[j+1]:
                temp = arr[j]
                arr[j] = arr[j+1]
                arr[j+1] = temp
    return arr

output:
def bubble_sort(arr):
    """
    Perform bubble sort to the array. 
    """
    @for_range(len(arr)-1)
    def outer(i):
        @for_range(len(arr)-1-i)
        def inner(j):
            temp = arr[j]
            swap = arr[j]>=arr[j+1]
            arr[j] = swap.if_else(arr[j+1],arr[j])
            arr[j+1] = swap.if_else(temp,arr[j+1])
    return arr
*'''

####################################################################

# insert here #

####################################################################

def standard(arr):
    """
    Perform bubble sort to the array. 
    """
    if len(arr)<=1:
        return arr
    for i in range(len(arr)-1):
        for j in range(len(arr)-1-i):
            if arr[j]>=arr[j+1]:
                temp = arr[j]
                arr[j] = arr[j+1]
                arr[j+1] = temp
    return arr

array = [7000,1.1,-45.1,4,0.01,-1919,810]
sarr = sfix.Array(len(array))
for i in range(len(array)):
    sarr[i] = array[i]

output = bubble_sort(sarr)
expected = standard(array)
output.reveal()

flag = sint(1)
for i in range(len(array)):
    flag.update(flag.bit_and(output[i]==expected[i]))

@if_e(flag.reveal())
def _():
    print_ln("Pass the test")
@else_
def _():
    pass