'''*
tags::for, if_else

input:
def count_distinct(arr):
    """
    Return the number of distinct values in the array.
    """
    counter = 0
    for i in range(len(arr)):
        unique = True
        for j in range(i):
            if arr[j] == arr[i]:
                unique = False
        if unique:
            counter = counter + 1
    return counter

output:
def count_distinct(arr):
    """
    Return the number of distinct values in the array.
    """
    counter = sint(0)
    @for_range(len(arr))
    def _(i):
        unique = sint(1)
        @for_range(i)
        def _(j):
            unique.update((arr[j]==arr[i]).if_else(False,unique))
        counter.update(unique.if_else(counter+1,counter))
    return counter
*'''

####################################################################

# insert here #

####################################################################

arr1 = [1,1,4,5,1,4,1,9,1,9,8,1,0]
arr2 = [65,47,2,142,65,65.3]
sarr1 = sfix.Array(len(arr1))
sarr2 = sfix.Array(len(arr2))
for i in range(len(arr1)):
    sarr1[i] = sfix(arr1[i])
for i in range(len(arr2)):
    sarr2[i] = sfix(arr2[i])

out1 = count_distinct(sarr1)
out2 = count_distinct(sarr2)
out1.reveal()
out2.reveal()

flag = (out1==6).bit_and(out2==5)

@if_e(flag.reveal())
def _():
    print_ln("Pass the test")
@else_
def _():
    pass
