'''*
tags::

input:
def count_reverse_pair_with_break(arr):
    """
    Count the number of reverse pairs before we find an element bigger than 10
    """
    count = 0
    for i in range(1,len(arr)):
        if arr[i]>10:
            break
        for j in range(i):
            if arr[j]>arr[i]:
                count += 1
    return count

output:
def count_reverse_pair_with_break(arr):
    """
    Count the number of reverse pairs before we find an element bigger than 10
    """
    count = sint(0)
    stop = sint(0)
    @for_range(1,len(arr))
    def _(i):
        stop.update(stop.bit_or(arr[i]>10))
        @for_range(i)
        def _(j):
            count.iadd(stop.if_else(0,arr[j]>arr[i]))
    return count
*'''

####################################################################

# insert here #

####################################################################

def standard(arr):
    """
    Count the number of reverse pairs before we find an element bigger than 10
    """
    count = 0
    for i in range(1,len(arr)):
        if arr[i]>10:
            break
        for j in range(i-1):
            if arr[j]>arr[i]:
                count += 1
    return count

arr1 = [1,1,-4,19,5]
sarr1 = sint.Array(len(arr1))
for i in range(len(arr1)):
    sarr1[i] = arr1[i]

arr2 = [1,2,3,88,100]
sarr2 = sint.Array(len(arr2))
for i in range(len(arr2)):
    sarr2[i] = arr2[i]

arr3 = [100,3,2,1,11]
sarr3 = sint.Array(len(arr3))
for i in range(len(arr3)):
    sarr3[i] = arr3[i]

output1 = count_reverse_pair_with_break(sarr1)
output2 = count_reverse_pair_with_break(sarr2)
output3 = count_reverse_pair_with_break(sarr3)

flag = (output1==2).bit_and(output2==0).bit_and(output3==6)

@if_e(flag.reveal())
def _():
    print_ln("Pass the test")
@else_
def _():
    pass
