'''*
tags::for, if_else

input:
def count_rises(arr):
    """
    Count the number of rises in the array. 
    """
    count = 0
    for i in range(len(arr)-1):
        if arr[i]<arr[i+1]:
            count = count + 1
    return count

output:
def count_rises(arr):
    """
    Count the number of rises in the array. 
    """
    count = sint(0)
    @for_range(len(arr)-1)
    def _(i):
        count.update((arr[i]<arr[i+1]).if_else(count+1,count))
    return count
*'''

####################################################################

# insert here #

####################################################################

def standard(arr):
    """
    Count the number of rises in the array. 
    Check first if the array is empty.
    """
    if len(arr)==0:
        raise ValueError("The input array should not be empty!")
    count = 0
    for i in range(len(arr)-1):
        if arr[i]<arr[i+1]:
            count = count + 1
    return count


arr1 = [4,167,1,7,1024,9]
arr2 = [114,514]
sarr1 = sint.Array(len(arr1))
sarr2 = sint.Array(len(arr2))
for i in range(len(arr1)):
    sarr1[i] = sint(arr1[i])
for i in range(len(arr2)):
    sarr2[i] = sint(arr2[i])

out1 = count_rises(sarr1)
out2 = count_rises(sarr2)
out1.reveal()
out2.reveal()

flag = (out1==standard(arr1)).bit_and(out2==standard(arr2))

@if_e(flag.reveal())
def _():
    print_ln("Pass the test")
@else_
def _():
    pass
