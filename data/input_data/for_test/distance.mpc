'''*
tags::for, math

input:
def distance(vec1, vec2):
    """
    Compute the Euclidean distance between the two vectors.
    """
    import math
    sum = 0
    for i in range(len(vec1)):
        sum = sum + (vec1[i]-vec2[i])**2
    return math.sqrt(sum)

output:
def distance(vec1, vec2):
    """
    Compute the Euclidean distance between the two vectors.
    """
    from Compiler import mpc_math
    sum = sfix(0)
    @for_range(len(vec1))
    def _(i):
        sum.update(sum+(vec1[i]-vec2[i])**2)
    return mpc_math.sqrt_simplified_fx(sum)
*'''

####################################################################

# insert here #

####################################################################

def standard(vec1, vec2):
    """
    Compute the Euclidean distance between the two vectors.
    You should check first whether the vectors have the same length and whether the vectors are empty.
    """
    import math
    if len(vec1)!=len(vec2):
        raise ValueError("The vectors should have the same size!")
    if len(vec1)==0 or len(vec2)==0:
        raise ValueError("The input vectors should not be empty!")
    sum = 0
    for i in range(len(vec1)):
        sum = sum + (vec1[i]-vec2[i])**2
    return math.sqrt(sum)

arr1 = [1,12.4,3,1.5]
arr2 = [-3,-3.6,2,-5.7]
sarr1 = sfix.Array(len(arr1))
sarr2 = sfix.Array(len(arr2))
for i in range(len(arr1)):
    sarr1[i] = sfix(arr1[i])
    sarr2[i] = sfix(arr2[i])

standard_output = standard(arr1,arr2)
func_output = distance(sarr1,sarr2)
func_output.reveal()
result = abs((func_output.reveal()-standard_output)/standard_output)

flag = sint(1)
@if_e(result < 0.01)
def _():
    pass
@else_
def _():
    flag.update(sint(0))

@if_e(flag.reveal())
def _():
    print_ln("Pass the test")
@else_
def _():
    pass
