'''*
tags::for, if_else

input:
def largest_gap(arr):
    """
    Return the largest gap in the array.
    The length of the input array is guaranteed to be at least 2.
    """
    cur = 0
    for i in range(len(arr)-1):
        if abs(arr[i+1]-arr[i]) > cur:
            cur = abs(arr[i+1]-arr[i])
    return cur

output:
def largest_gap(arr):
    """
    Return the largest gap in the array.
    The length of the input array is guaranteed to be at least 2.
    """
    cur = sfix(0)
    @for_range(len(arr)-1)
    def _(i):
        cur.update((abs(arr[i+1]-arr[i])>cur).if_else(abs(arr[i+1]-arr[i]),cur))
    return cur
*'''

####################################################################

# insert here #

####################################################################

def standard(arr):
    """
    Return the largest gap in the array.
    The length of the input array is guaranteed to be at least 2.
    """
    cur = 0
    for i in range(len(arr)-1):
        if abs(arr[i+1]-arr[i]) > cur:
            cur = abs(arr[i+1]-arr[i])
    return cur

arr1 = [1,7,1,3,3.1,4]
arr2 = [2,3,9,-4,2.5,7,14]

sarr1 = sfix.Array(len(arr1))
sarr2 = sfix.Array(len(arr2))

for i in range(len(arr1)):
    sarr1[i] = sfix(arr1[i])
for i in range(len(arr2)):
    sarr2[i] = sfix(arr2[i])

expected1 = standard(arr1)
expected2 = standard(arr2)
output1 = largest_gap(sarr1)
output2 = largest_gap(sarr2)
output1.reveal()
output2.reveal()

flag = (output1==expected1).bit_and(output2==expected2)

@if_e(flag.reveal())
def _():
    print_ln("Pass the test")
@else_
def _():
    pass