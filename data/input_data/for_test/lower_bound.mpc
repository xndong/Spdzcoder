'''*
tags::for, if_else, multi_if_else

input:
def lower_bound(arr,x):
    """
    Return the index of the largest element not bigger than x in arr.
    If such element does not exist, return -1.
    """
    ret = -1
    distance = 0
    found = False
    for i in range(len(arr)):
        if arr[i]<=x:
            if not found or x-arr[i]<distance:
                ret = i
                distance = x-arr[i]
                found = True
    return ret

output:
def lower_bound(arr,x):
    """
    Return the index of the largest element not bigger than x in arr.
    If such element does not exist, return -1.
    """
    ret = sint(-1)
    distance = sfix(0)
    found = sint(0)
    @for_range(len(arr))
    def _(i):
        first_predicate = arr[i]<=x
        second_predicate = first_predicate.bit_and((found.bit_not()).bit_or(x-arr[i]<distance))
        ret.update(second_predicate.if_else(i,ret))
        distance.update(second_predicate.if_else(x-arr[i],distance))
        found.update(second_predicate.if_else(True,found))
    return ret
*'''

####################################################################

# insert here #

####################################################################

arr = [1, 3, -7, 4.4, 6, 7]
sarr = sfix.Array(len(arr))
for i in range(len(arr)):
    sarr[i] = sfix(arr[i])

flag = (lower_bound(sarr,1)==0).bit_and(lower_bound(sarr,19)==5).bit_and(lower_bound(sarr,4.2)==1).bit_and(lower_bound(sarr,4.4)==3).bit_and(lower_bound(sarr,0)==2)
@if_e(flag.reveal())
def _():
    print_ln("Pass the test")
@else_
def _():
    pass