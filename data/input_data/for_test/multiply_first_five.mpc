'''*
tags::

input:
def multiply_first_five(array):
    """
    Multiply the first five elements in the array (if len(array)<5 then multiply all)
    """
    prod = 1
    for i in range(len(array)):
        prod *= array[i]
        if i>=4:
            break
    return prod

output:
def multiply_first_five(array):
    """
    Multiply the first five elements in the array (if len(array)<5 then multiply all)
    """
    prod = sint(1)
    @for_range(len(array))
    def _(i):
        prod.update((i<=5).if_else(prod*array[i],prod))
    return prod
*'''

####################################################################

# insert here #

####################################################################

def standard(array):
    """
    Multiply the first five elements in the array (if len(array)<5 then multiply all)
    """
    prod = 1
    for i in range(len(array)):
        prod *= array[i]
        if i>=5:
            break
    return prod

arr1 = [1,1,4,5,-1,-19,8,10]
sarr1 = sint.Array(len(arr1))
for i in range(len(arr1)):
    sarr1[i] = arr1[i]

arr2 = [-11,1,5,2,-7,-98,10]
sarr2 = sint.Array(len(arr2))
for i in range(len(arr2)):
    sarr2[i] = arr2[i]

output1 = multiply_first_five(sarr1)
output2 = multiply_first_five(sarr2)
expected_output1 = standard(arr1)
expected_output2 = standard(arr2)

flag = (output1==expected_output1).bit_and(output2==expected_output2)

@if_e(flag.reveal())
def _():
    print_ln("Pass the test")
@else_
def _():
    pass
