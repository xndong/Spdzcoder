'''*
tags::for, multi_if_else

input:
def second_largest(arr):
    """
    Return the second largest element in the array. 
    """
    largest = arr[0] if arr[0]>=arr[1] else arr[1]
    second = arr[1] if arr[0]>=arr[1] else arr[0]
    for i in range(len(arr)):
        if i>1:
            if arr[i] >= largest:
                second = largest
                largest = arr[i]
            else:
                if arr[i]>=second:
                    second = arr[i]
    
    return second

output:
def second_largest(arr):
    """
    Return the second largest element in the array. 
    """
    largest = (arr[0]>=arr[1]).if_else(arr[0],arr[1])
    second = (arr[0]>=arr[1]).if_else(arr[1],arr[0])
    @for_range(len(arr))
    def update(i):
        proceed = i>1
        largest_updated = (arr[i]>=largest).bit_and(proceed)
        second_updated = largest_updated.bit_not().bit_and(arr[i]>=second).bit_and(proceed)
        second.update(largest_updated.if_else(largest,second))
        largest.update(largest_updated.if_else(arr[i],largest))
        second.update(second_updated.if_else(arr[i],second))
    
    return second
*'''

####################################################################

# insert here #

####################################################################

def standard(arr):
    """
    Return the second largest element in the array. 
    Check first whether the array has at least 2 elements. 
    """
    if len(arr)<=1:
        raise ValueError("The array has less than 2 elements!")
    largest = arr[0] if arr[0]>=arr[1] else arr[1]
    second = arr[1] if arr[0]>=arr[1] else arr[0]
    for i in range(len(arr)):
        if i>1:
            if arr[i] >= largest:
                second = largest
                largest = arr[i]
            else:
                if arr[i]>=second:
                    second = arr[i]
    
    return second

arr1 = [1,7,1,3,5.4,5,-4,5.2]
arr2 = [-3,-7,-19,-4,-1.66,33,-1.66,-1.7]

sarr1 = sfix.Array(len(arr1))
sarr2 = sfix.Array(len(arr2))

for i in range(len(arr1)):
    sarr1[i] = sfix(arr1[i])
for i in range(len(arr2)):
    sarr2[i] = sfix(arr2[i])

expected1 = standard(arr1)
expected2 = standard(arr2)
output1 = second_largest(sarr1)
output2 = second_largest(sarr2)
output1.reveal()
output2.reveal()

flag = ((output1.reveal()-expected1)/expected1<0.01).bit_and((output2.reveal()-expected2)/expected2<0.01)
@if_e(flag.reveal())
def _():
    print_ln("Pass the test")
@else_
def _():
    pass
