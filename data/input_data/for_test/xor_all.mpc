'''*
tags::for

input:
def xor_all(arr):
    """
    XOR all elements in the array and return the output.
    The input array is guaranteed to contain only 0's and 1's.
    """
    ret = arr[0]
    for i in range(1,len(arr)):
        ret = ret^arr[i]
    return ret

output:
def xor_all(arr):
    """
    XOR all elements in the array and return the output.
    The input array is guaranteed to contain only 0's and 1's.
    """
    ret = arr[0]
    @for_range(1,len(arr))
    def _(i):
        ret.update(ret.bit_xor(arr[i]))
    return ret
*'''

####################################################################

# insert here #

####################################################################

arr1 = [0,1,1,0,1,0]
arr2 = [1,1,0]
sarr1 = sint.Array(len(arr1))
sarr2 = sint.Array(len(arr2))

for i in range(len(arr1)):
    sarr1[i] = arr1[i]
for i in range(len(arr2)):
    sarr2[i] = arr2[i]

flag = (xor_all(sarr1)).bit_and(xor_all(sarr2).bit_not())

@if_e(flag.reveal())
def _():
    print_ln("Pass the test")
@else_
def _():
    pass
