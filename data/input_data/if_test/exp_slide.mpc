# 2023-09-24 22:10:00
'''*
tags::if_else, math

input:
def exp_slide(x):
    """
    If x is nonnegative, return e^x, otherwise x+1.
    """
    import math
    if x >= 0:
        return math.pow(math.e,x)
    return x+1

output:
def exp_slide(x):
    """
    If x is nonnegative, return e^x, otherwise x+1.
    """
    import math
    from Compiler import mpc_math
    return (x>=0).if_else(mpc_math.pow_fx(math.e,x),x+1)
*'''

####################################################################

# insert here #

####################################################################

def standard(x):
    """
    If x is nonnegative, return e^x, otherwise x+1.
    """
    import math
    if x >= 0:
        return math.pow(math.e,x)
    return x+1

flag = (abs(exp_slide(sfix(1.2))-standard(1.2))<0.005).bit_and(abs(exp_slide(sfix(0))-standard(0))<0.005).bit_and(abs(exp_slide(sfix(-1.3))-standard(-1.3))<0.005)

@if_e(flag.reveal())
def _():
    print_ln("Pass the test")
@else_
def _():
    pass