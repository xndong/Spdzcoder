# 2023-09-24 22:09:54
'''*
tags::if_else

input:
def median(arr):
    """
    Return the median of the array. 
    Check first whether the array is empty
    """
    if len(arr)==0:
        raise ValueError("The length of the array is 0!")
    arr.sort()
    ret = 0
    if len(arr)%2: 
        ret = arr[len(arr)//2]
    else:
        ret = (arr[len(arr)//2]+arr[len(arr)//2-1])/2
    return ret

output:
def median(arr):
    """
    Return the median of the array. 
    Check first whether the array is empty
    """
    if len(arr)==0:
        raise ValueError("The length of the array is 0!")
    arr.sort()
    odd_length = sint(len(arr)%2)
    ret = odd_length.if_else(arr[int(len(arr)-1)//2],(arr[int(len(arr))//2]+arr[int(len(arr))//2-1])/sfix(2))
    return ret
*'''

####################################################################

# insert here #

####################################################################

def standard(arr):
    """
    Return the median of the array. 
    Check first whether the array is empty
    """
    if len(arr)==0:
        raise ValueError("The length of the array is 0!")
    arr.sort()
    ret = 0
    if len(arr)%2: 
        ret = arr[len(arr)//2]
    else:
        ret = (arr[len(arr)//2]+arr[len(arr)//2-1])/2
    return ret

arr1 = [1,7,1,3,3.1,4]
arr2 = [2,3,9,-4,2.5]

sarr1 = sfix.Array(len(arr1))
sarr2 = sfix.Array(len(arr2))

for i in range(len(arr1)):
    sarr1[i] = sfix(arr1[i])
for i in range(len(arr2)):
    sarr2[i] = sfix(arr2[i])

expected1 = standard(arr1)
expected2 = standard(arr2)
output1 = median(sarr1)
output2 = median(sarr2)
output1.reveal()
output2.reveal()

flag = ((output1.reveal()-expected1)/expected1<0.01).bit_and((output2.reveal()-expected2)/expected2<0.01)
@if_e(flag.reveal())
def _():
    print_ln("Pass the test")
@else_
def _():
    pass