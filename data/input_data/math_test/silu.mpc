'''*
tags::math

input:
def silu(x):
    """
    SiLU function
    """
    import math
    return x/(1+math.pow(math.e,-x))

output:
def silu(x):
    """
    SiLU function
    """
    import math
    from Compiler import mpc_math
    return x/(1+mpc_math.pow_fx(math.e,-x))
*'''

####################################################################

# insert here #

####################################################################

def standard(x):
    """
    SiLU function
    """
    import math
    return x/(1+math.pow(math.e,-x))

inputs = [-5,-4,-2,0,1.5,9,10]
sinputs = sfix.Array(len(inputs))
for i in range(len(inputs)):
    sinputs[i] = inputs[i]

flag = sint(1)

for i in range(len(inputs)):
    out = silu(sinputs[i])
    out.reveal()
    flag.update(flag.bit_and(abs(out-standard(inputs[i]))<0.01))

@if_e(flag.reveal())
def _():
    print_ln("Pass the test")
@else_
def _():
    pass