'''*
tags::

input:
def cost_matrix(profit_matrix):
    """
    Converts a profit matrix into a cost matrix.
    """
    import numpy as np
    matrix_shape = profit_matrix.shape
    offset_matrix = np.ones(matrix_shape) * profit_matrix.max()
    cost_matrix = offset_matrix - profit_matrix
    return cost_matrix

output:
def cost_matrix(profit_matrix):
    """
    Converts a profit matrix into a cost matrix.
    """
    matrix_shape = profit_matrix.shape
    offset_matrix = sfix.Tensor(matrix_shape)
    max_ = profit_matrix[0][0]
    @for_range(matrix_shape[0])
    def _(i):
        @for_range(matrix_shape[1])
        def _(j):
            max_.update((profit_matrix[i][j]>max_).if_else(profit_matrix[i][j],max_))
    offset_matrix.assign_all(max_)
    cost_matrix = offset_matrix - profit_matrix
    return cost_matrix

*'''

####################################################################

# insert here #

####################################################################

import numpy as np

def standard(profit_matrix):
    """
    Converts a profit matrix into a cost matrix.
    """
    import numpy as np
    matrix_shape = profit_matrix.shape
    offset_matrix = np.ones(matrix_shape) * profit_matrix.max()
    cost_matrix = offset_matrix - profit_matrix
    return cost_matrix

arr = [[2,3],[4,5]]
sarr = sfix.Matrix(2,2)
for i in range(2):
    for j in range(2):
        sarr[i][j] = arr[i][j]

expected_out = standard(np.array(arr))
out = cost_matrix(sarr)

flag = sint(1)
for i in range(2):
    for j in range(2):
        flag = flag.bit_and(abs(out[i][j]-expected_out[i][j])<0.05)

@if_e(flag.reveal())
def _():
    print_ln("Pass the test")
@else_
def _():
    pass