
'''*
tags::

input:
# plain text variables: indices
def integer_array_indexing(array, indices):
    """
    indexing a numpy array from an integer array.
    """
    import numpy as np
    indices = np.array(indices)
    ret_array = array(indices)
    return ret_array

annotation:
Indexing an array from an integer array.
The return value should be a subarray obtained from the original array by the indices.

output:
def integer_array_indexing(spdzarray, indices):
    """
    indexing an array from an integer array.
    """
    indices = regint.Array(len(indices)).assign(indices)
    vector = spdzarray.get(indices)
    array = spdzarray.get_part(base=0, size=len(indices)).assign(vector)
    return array
*'''

####################################################################

# insert here #

####################################################################

indices = [1,3,4,6,9,12]
alist = list(range(20,40))
idx_value = [alist[i] for i in indices]
idx_vector = sfix.Array(len(indices)).assign(idx_value).get_vector()
spdzarray = sfix.Array(20).assign(alist)
indexing_array = integer_array_indexing(spdzarray, indices)
indexing_vector = indexing_array.get_vector()
sintbit_vec = (indexing_vector == idx_vector) # vector
sintbit_arr = Array.create_from(sintbit_vec) # array

flag = sint(1)
@for_range(len(indices))
def _(i):
    flag.update(flag.bit_and(sintbit_arr[i]))

@if_e(flag.reveal())
def _():
    print_ln("Pass the test")
@else_
def _():
    pass
