'''*
tags::array concatenation on rows

input:
import numpy as np
def array_simple_concate_rows(ndarrayA, ndarrayB):
    """
    NumPy program to concatnate elements from two 2-D arrays along axis 0.
    """
    array = np.concatenate((ndarrayA, ndarrayB), axis=0).copy()
    return array

output:
def array_simple_concate_rows(spdzArrayA, spdzArrayB):
    """
    MP-SPDZ program to concatnate elements from two 2-D arrays along axis 0.
    """
    spdzArrayA_t = spdzArrayA.transpose()
    spdzArrayB_t = spdzArrayB.transpose()
    array_t = spdzArrayA_t.concat_columns(spdzArrayB_t)
    array = array_t.transpose()
    return array
*'''

####################################################################

# insert here #

####################################################################

import numpy as np

a = Matrix.create_from([[sfix(1),sfix(1)],[sfix(2),sfix(2)]])
b = Matrix.create_from([[sfix(3),sfix(3)],[sfix(4),sfix(4)]])
c = array_simple_concate_rows(a,b)

flag = (c[0][0]==1).bit_and(c[0][1]==1).bit_and(c[1][0]==2).bit_and(c[1][1]==2).bit_and(c[2][0]==3).bit_and(c[2][1]==3).bit_and(c[3][0]==4).bit_and(c[3][1]==4)

@if_e(flag.reveal())
def _():
    print_ln("Pass the test")
@else_
def _():
    pass