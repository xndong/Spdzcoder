'''*
tags::array concatenation along column, complex array indexing, complex array slicing

input:
import numpy as np
def array_special_concate(ndarrayA, ndarrayB):
    """
    NumPy program to concatnate elements from two 2-D arrays along axis 1. Concretely, collect all the even columns from the first array and collect all the odd columns from the second array.
    """
    viewA = ndarrayA[:][::2]
    viewB = ndarrayB[:][1:][::2]
    array = np.concatenate((viewA,viewB), axis=1).copy()
    return array

output:
def array_special_concate(spdzArrayA, spdzArrayB):
    """
    MP-SPDZ program to concatnate elements from two 2-D arrays along axis 1. Concretely, collect all the even columns from the first array and collect all the odd columns from the second array.
    """
    rowA, colA = spdzArrayA.sizes
    rowB, colB = spdzArrayB.sizes

    concat_array = spdzArrayA.concat_columns(spdzArrayB)
    idx_a = [i for i in range(0, colA, 2)]
    idx_b = [i+colA for i in range(1, colB, 2)]
    idx_list = idx_a + idx_b
    idx_list = [regint(e) for e in idx_list]
    idx_array = Array.create_from(idx_list)
    array = sfix.Matrix(rowA, len(idx_list))

    @for_range(len(idx_list))
    def _(i):
        idx = idx_array[i]
        vec = concat_array.get_vector_by_indices(None, idx)
        array.assign_vector_by_indices(vec, None,i)

    return array
*'''

####################################################################

# insert here #

####################################################################

import numpy as np

a = Matrix.create_from([[sfix(1),sfix(1),sfix(1)],[sfix(2),sfix(2),sfix(2)]])
b = Matrix.create_from([[sfix(3),sfix(3)],[sfix(4),sfix(4)]])
c = array_special_concate(a,b)

flag = (c[0][0]==1).bit_and(c[0][1]==1).bit_and(c[0][2]==3).bit_and(c[1][0]==2).bit_and(c[1][1]==2).bit_and(c[1][2]==4)

@if_e(flag.reveal())
def _():
    print_ln("Pass the test")
@else_
def _():
    pass