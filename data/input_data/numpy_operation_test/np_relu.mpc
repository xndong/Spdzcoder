'''*
tags::

input:
def relu(y):
    """
    Compute the ReLU function.
    """
    import numpy as np
    return np.clip(y, 0, np.inf)

output:
def relu(y):
    """
    Compute the ReLU function.
    """
    ret = sfix.Tensor(y.shape)
    ret_vec = ret.get_vector()
    y_vec = y.get_vector()
    ret_vec = (y_vec>0).if_else(y_vec,0)
    ret.assign_vector(ret_vec)
    return ret

*'''

####################################################################

# insert here #

####################################################################

arr = [2,3,-4,5,-1]
sarr = sint.Array(len(arr))
for i in range(len(sarr)):
    sarr[i] = arr[i]

out = relu(sarr)

flag = (out[0]==2).bit_and(out[1]==3).bit_and(out[2]==0).bit_and(out[3]==5).bit_and(out[4]==0)

@if_e(flag.reveal())
def _():
    print_ln("Pass the test")
@else_
def _():
    pass