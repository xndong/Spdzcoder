'''*
tags:: compute cosine function.

input:
import numpy
def compute_cosine(array):
    """This function calculate trigonometric cosine, element-wise."""
    cos_res = numpy.cos(array)
    return cos_res

output:
from Compiler import mpc_math
def compute_cosine(spdzarray):            # sfix
    vector = spdzarray.get_vector()
    cos_res = mpc_math.cos(vector)
    cos_res = Array.create_from(cos_res)
    return cos_res
*'''

####################################################################

# insert here #

####################################################################

import numpy as np

def standard(array):
    """This function calculate trigonometric cosine, element-wise."""
    cos_res = np.cos(array)
    return cos_res

a = np.array([0.5,-1.2,10.7,5.0,-7.2])
sa = sfix.Array(len(a))
for i in range(len(sa)):
    sa[i] = a[i]

out = standard(a)
sout = compute_cosine(sa)

flag = sint(1)

for i in range(len(sout)):
    flag = flag.bit_and(abs(sout[i]-out[i])<0.05)

@if_e(flag.reveal())
def _():
    print_ln("Pass the test")
@else_
def _():
    pass
