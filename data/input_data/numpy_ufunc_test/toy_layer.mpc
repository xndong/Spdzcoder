'''*
tags::math

input:
import numpy as np
def sigmoid(x):
    return 1 / (1 + np.exp(-x))
    
def toy_layer(input_data, weights, biases):
    layer1_input = np.dot(input_data, weights[0]) + biases[0]
    layer1_output = sigmoid(layer1_input)
    layer2_input = np.dot(layer1_output, weights[1]) + biases[1]
    layer2_output = sigmoid(layer2_input)
    return layer2_output

annotation:
The input of function `sigmoid` is a 1D array. 
For function `toy_layer`, the parameter `input_data` is a 1D array, `weights` and `biases` are two lists of 1D arrays with the same size as `input_data`.
After translation, the 1D array should have type `sfix.Array`.
The function `np.exp` called in function `sigmoid` computes the exponential function with base e (2.71828).

output:
def sigmoid(x):
    import math
    from Compiler import mpc_math
    return 1/(1+mpc_math.pow_fx(math.e,-x))

def toy_layer(input_data, weights, biases):
    def dot(a,b):
        ret = sfix(0)
        @for_range(len(a))
        def _(i):
            ret.iadd(a[i]*b[i])
        return ret
    layer1_input = Array.create_from(dot(input_data,weights[0])+biases[0])
    layer1_output = Array.create_from(sigmoid(layer1_input))
    layer2_input = Array.create_from(dot(layer1_output,weights[1])+biases[1])
    layer2_output = Array.create_from(sigmoid(layer2_input))
    return layer2_output

*'''

####################################################################

# insert here #

####################################################################

import numpy as np

def standard_sigmoid(x):
    return 1 / (1 + np.exp(-x))

def standard(input_data, weights, biases):
    layer1_input = np.dot(input_data, weights[0]) + biases[0]
    layer1_output = standard_sigmoid(layer1_input)
    layer2_input = np.dot(layer1_output, weights[1]) + biases[1]
    layer2_output = standard_sigmoid(layer2_input)
    return layer2_output

weights = np.array([[1.0,2.0],[2.0,1.0]])
biases = np.array([[1.0,-1.0],[-1.0,1.0]])
input_data = [2.0,2.0]

a = MultiArray([2,2],sfix)
a[0] = [1,2]
a[1] = [3,2]

s_weights = MultiArray([2,2],sfix)
s_weights[0] = [1.0,2.0]
s_weights[1] = [2.0,1.0]

s_biases = MultiArray([2,2],sfix)
s_biases[0] = [1.0,-1.0]
s_biases[1] = [-1.0,1.0]

s_input_data = Array(2,sfix)
s_input_data[0] = 2.0
s_input_data[1] = 2.0

standard_output = standard(input_data,weights,biases)
s_out = toy_layer(s_input_data, s_weights, s_biases)

flag = (abs(s_out[0]-standard_output[0])<0.05).bit_and(abs(s_out[1]-standard_output[1])<0.05)

@if_e(flag.reveal())
def _():
    print_ln("Pass the test")
@else_
def _():
    pass
