{"test_name": "indicate_positive", "instruction": "Translate the following code snippet from Python/Numpy to MP-SPDZ.", "input": "def indicate_positive(arr):\n    \"\"\"\n    For the given array, return an array with the same size. \n    If one element in the input array is positive, \n    then the corresponding element in the returned array will be 1, \n    otherwise the element in the returned array will be 0. \n    \"\"\"\n    ret = [0 for i in range(len(arr))]\n    for i in range(len(arr)):\n        if arr[i]>0:\n            ret[i] = 1\n        else:\n            ret[i] = 0\n    return ret\n\n", "annotation": "No annotation.", "output": "def indicate_positive(arr):\n    \"\"\"\n    For the given array, return an array with the same size. \n    If one element in the input array is positive, \n    then the corresponding element in the returned array will be 1, \n    otherwise the element in the returned array will be 0. \n    \"\"\"\n    ret = sint.Array(len(arr))\n    @for_range(len(arr))\n    def _(i):\n        ret[i] = (arr[i]>0).if_else(1,0)\n    return ret\n"}
{"test_name": "array_xor", "instruction": "Translate the following code snippet from Python/Numpy to MP-SPDZ.", "input": "def array_xor(a,b):\n    \"\"\"\n    Compute the elementwise XOR of the two input vectors.  \n    \"\"\"\n    ret = [0 for i in range(len(a))]\n    for i in range(len(ret)):\n        ret[i] = a[i]^b[i]\n    return ret\n\n", "annotation": "No annotation.", "output": "def array_xor(a,b):\n    \"\"\"\n    Compute the elementwise XOR of the two input vectors. \n    \"\"\"\n    ret = sfix.Array(len(a))\n    @for_range(len(ret))\n    def _(i):\n        ret[i] = a[i].bit_xor(b[i])\n    return ret\n"}
{"test_name": "interlaced_placement", "instruction": "Translate the following code snippet from Python/Numpy to MP-SPDZ.", "input": "def interlaced_placement(a,b):\n    \"\"\"\n    Interleave the elements in two sequences.\n    The two input arrays are guaranteed to have the same length. \n    \"\"\"\n    ret = [0 for i in range(len(a)*2)]\n    for i in range(len(a)*2):\n        if i%2:\n            ret[i] = b[(i-1)//2]\n        else:\n            ret[i] = a[i//2]\n    return ret\n\n", "annotation": "No annotation.", "output": "def interlaced_placement(a,b):\n    \"\"\"\n    Interleave the elements in two sequences.\n    The two input arrays are guaranteed to have the same length. \n    \"\"\"\n    ret = sfix.Array(len(a)*2)\n    @for_range(len(a)*2)\n    def _(i):\n        ret[i] = (i%2).if_else(b[(i-1)/2],a[i/2])\n    return ret\n"}
{"test_name": "array_and", "instruction": "Translate the following code snippet from Python/Numpy to MP-SPDZ.", "input": "def array_and(a,b):\n    \"\"\"\n    Compute the elementwise AND of the two input vectors. \n    \"\"\"\n    ret = [0 for i in range(len(a))]\n    for i in range(len(ret)):\n        ret[i] = a[i] and b[i]\n    return ret\n\n", "annotation": "No annotation.", "output": "def array_and(a,b):\n    \"\"\"\n    Compute the elementwise AND of the two input vectors. \n    \"\"\"\n    ret = sfix.Array(len(a))\n    @for_range(len(ret))\n    def _(i):\n        ret[i] = a[i].bit_and(b[i])\n    return ret\n"}
{"test_name": "array_indicator", "instruction": "Translate the following code snippet from Python/Numpy to MP-SPDZ.", "input": "def array_indicator(arr,predicator):\n    \"\"\"\n    Return an array with the same size of the input array. \n    For each element in the input array, \n    the corresponding value in the returned array is set to be the value of the predicator. \n    \"\"\"\n    ret = [False for i in range(len(arr))]\n    for i in range(len(arr)):\n        ret[i] = predicator(arr[i])\n    return ret\n\n", "annotation": "No annotation.", "output": "def array_indicator(arr,predicator):\n    \"\"\"\n    Return an array with the same size of the input array. \n    For each element in the input array, \n    the corresponding value in the returned array is set to be the value of the predicator. \n    \"\"\"\n    ret = sint.Array(len(arr))\n    @for_range(len(arr))\n    def _(i):\n        ret[i] = predicator(arr[i])\n    return ret\n"}
{"test_name": "array_greater_than_scalar", "instruction": "Translate the following code snippet from Python/Numpy to MP-SPDZ.", "input": "def array_greater_than_scalar(arr, bound):\n    \"\"\"\n    Given an input array and a bound, \n    return an array indicating whether each element is greater than the bound. \n    \"\"\"\n    ret = [False for i in range(len(arr))]\n    for i in range(len(arr)):\n        ret[i] = arr[i]>bound\n    return ret\n\n", "annotation": "No annotation.", "output": "def array_greater_than_scalar(arr, bound):\n    \"\"\"\n    Given an input array and a bound, \n    return an array indicating whether each element is greater than the bound. \n    \"\"\"\n    ret = sint.Array(len(arr))\n    @for_range(len(arr))\n    def _(i):\n        ret[i] = arr[i]>bound\n    return ret\n"}
{"test_name": "array_no_greater_than_scalar", "instruction": "Translate the following code snippet from Python/Numpy to MP-SPDZ.", "input": "def array_no_greater_than_scalar(arr, bound):\n    \"\"\"\n    Given an input array and a bound, \n    return an array indicating whether each element is no greater than the bound. \n    \"\"\"\n    ret = [False for i in range(len(arr))]\n    for i in range(len(arr)):\n        ret[i] = arr[i]<=bound\n    return ret\n\n", "annotation": "No annotation.", "output": "def array_no_greater_than_scalar(arr, bound):\n    \"\"\"\n    Given an input array and a bound, \n    return an array indicating whether each element is no greater than the bound. \n    \"\"\"\n    ret = sint.Array(len(arr))\n    @for_range(len(arr))\n    def _(i):\n        ret[i] = arr[i]<=bound\n    return ret\n"}
{"test_name": "reverse_and_concat", "instruction": "Translate the following code snippet from Python/Numpy to MP-SPDZ.", "input": "def reverse_and_concat(a):\n    \"\"\"\n    Reverse the input array and concatenate it to the original array. \n    \"\"\"\n    b = [a[len(a)-1-i] for i in range(len(a))]\n    return a+b\n\n", "annotation": "No annotation.", "output": "def reverse_and_concat(a):\n    \"\"\"\n    Reverse the input array and concatenate it to the original array. \n    \"\"\"\n    b = sfix.Array(len(a))\n    @for_range(len(a))\n    def _(i):\n        b[i] = a[len(a)-1-i]\n    return a.concat(b)\n"}
{"test_name": "array_round", "instruction": "Translate the following code snippet from Python/Numpy to MP-SPDZ.", "input": "def array_round(arr):\n    \"\"\"\n    Round every element in the array to the nearest integer.\n    \"\"\"\n    import math\n    ret = [0 for i in range(len(arr))]\n    for i in range(len(arr)):\n        int_part = math.floor(arr[i])\n        ret[i] = int_part if arr[i]-int_part<0.5 else int_part+1\n    return ret\n\n", "annotation": "No annotation.", "output": "def array_round(arr):\n    \"\"\"\n    Round every element in the array to the nearest integer.\n    \"\"\"\n    from Compiler import mpc_math\n    ret = sfix.Array(len(arr))\n    @for_range(len(arr))\n    def _(i):\n        int_part = mpc_math.floor_fx(arr[i])\n        ret[i] = (arr[i]-int_part<0.5).if_else(int_part,int_part+1)\n    return ret\n"}
{"test_name": "array_greater_eq", "instruction": "Translate the following code snippet from Python/Numpy to MP-SPDZ.", "input": "def array_greater_eq(arr,brr):\n    \"\"\"\n    For the two input arrays arr and brr, return an array ret with the same size. \n    For index i, if arr[i]>b=rr[i], ret[i] will be set to 1, otherwise ret[i] will be set to 0. \n    The two input arrays are guaranteed to have the same length. \n    \"\"\"\n    ret = [0 for i in range(len(arr))]\n    for i in range(len(arr)):\n        ret[i] = 1 if arr[i]>=brr[i] else 0\n    return ret\n\n", "annotation": "No annotation.", "output": "def array_greater_eq(arr,brr):\n    \"\"\"\n    For the two input arrays arr and brr, return an array ret with the same size. \n    For index i, if arr[i]>=brr[i], ret[i] will be set to 1, otherwise ret[i] will be set to 0. \n    The two input arrays are guaranteed to have the same length. \n    \"\"\"\n    ret = sint.Array(len(arr))\n    @for_range(len(arr))\n    def _(i):\n        ret[i] = arr[i]>=brr[i]\n    return ret\n"}
{"test_name": "reverse", "instruction": "Translate the following code snippet from Python/Numpy to MP-SPDZ.", "input": "def reverse(arr):\n    \"\"\"\n    Reverse the array. \n    \"\"\"\n    ret = [0 for i in range(len(arr))]\n    for i in range(len(arr)):\n        ret[i] = arr[len(arr)-1-i]\n    return ret\n\n", "annotation": "No annotation.", "output": "def reverse(arr):\n    \"\"\"\n    Reverse the array. \n    \"\"\"\n    ret = sfix.Array(len(arr))\n    @for_range(len(arr))\n    def _(i):\n        ret[i] = arr[len(arr)-1-i]\n    return ret\n"}
{"test_name": "indicate_negative", "instruction": "Translate the following code snippet from Python/Numpy to MP-SPDZ.", "input": "def indicate_negative(arr):\n    \"\"\"\n    For the given array, return an array with the same size. \n    If one element in the input array is negative, \n    then the corresponding element in the returned array will be 1, \n    otherwise the element in the returned array will be 0. \n    \"\"\"\n    ret = [0 for i in range(len(arr))]\n    for i in range(len(arr)):\n        if arr[i]<0:\n            ret[i] = 1\n        else:\n            ret[i] = 0\n    return ret\n\n", "annotation": "No annotation.", "output": "def indicate_negative(arr):\n    \"\"\"\n    For the given array, return an array with the same size. \n    If one element in the input array is negative, \n    then the corresponding element in the returned array will be 1, \n    otherwise the element in the returned array will be 0. \n    \"\"\"\n    ret = sint.Array(len(arr))\n    @for_range(len(arr))\n    def _(i):\n        ret[i] = (arr[i]<0).if_else(1,0)\n    return ret\n"}
{"test_name": "max_sub_sequence", "instruction": "Translate the following code snippet from Python/Numpy to MP-SPDZ.", "input": "def max_sub_sequence(arr):\n    \"\"\"\n    Use dynamic programming to find the sum of max continuous subsequence of the input array.\n    \"\"\"\n    partial_max = [0 for i in range(len(arr))]\n    suffix_max = [0 for i in range(len(arr))]\n    partial_max[0] = arr[0]\n    suffix_max[0] = arr[0]\n    for i in range(1,len(arr)):\n        suffix_max[i] = suffix_max[i-1]+arr[i] if suffix_max[i-1]>=0 else arr[i]\n        partial_max[i] = partial_max[i-1] if partial_max[i-1]>=suffix_max[i] else suffix_max[i]\n    return partial_max[len(arr)-1]\n\n", "annotation": "No annotation.", "output": "def max_sub_sequence(arr):\n    \"\"\"\n    Use dynamic programming to find the sum of max continuous subsequence of the input array.\n    \"\"\"\n    partial_max = sfix.Array(len(arr))\n    suffix_max = sfix.Array(len(arr))\n    partial_max[0] = arr[0]\n    suffix_max[0] = arr[0]\n    @for_range(1,len(arr))\n    def _(i):\n        suffix_max[i] = (suffix_max[i-1]>=0).if_else(suffix_max[i-1]+arr[i], arr[i])\n        partial_max[i] = (partial_max[i-1]>=suffix_max[i]).if_else(partial_max[i-1], suffix_max[i])\n    return partial_max[len(arr)-1]\n"}
{"test_name": "compare_and_select", "instruction": "Translate the following code snippet from Python/Numpy to MP-SPDZ.", "input": "def compare_and_select(a,b):\n    \"\"\"\n    Compare the two arrays elementwise, \n    and save the larger value into the returned array. \n    \"\"\"\n    ret_array = [0 for i in range(len(a))]\n    for i in range(len(a)):\n        if a[i] > b[i]:\n            ret_array[i] = a[i]\n        else:\n            ret_array[i] = b[i]\n\n    return ret_array\n\n", "annotation": "No annotation.", "output": "def compare_and_select(a,b):\n    \"\"\"\n    Compare the two arrays elementwise, \n    and save the larger value into the returned array. \n    \"\"\"\n    output = sfix.Array(len(a))\n    @for_range(len(a))\n    def subroutine(i):\n        output[i] = (a[i]>b[i]).if_else(a[i],b[i])\n    \n    return output\n"}
{"test_name": "count_element_frequency", "instruction": "Translate the following code snippet from Python/Numpy to MP-SPDZ.", "input": "def count_element_frequency(l):\n    \"\"\"\n    Return an array with the same size of the original array, \n    each position of which records the number of occurrences of the element at the same position. \n    \"\"\"\n    ret = [0 for i in range(len(l))]\n    for i in range(len(l)):\n        for j in range(len(l)):\n            if l[j]==l[i]:\n                ret[i] = ret[i] + 1\n    return ret\n\n", "annotation": "No annotation.", "output": "def count_element_frequency(l):\n    \"\"\"\n    Return an array with the same size of the original array, \n    each position of which records the number of occurrences of the element at the same position. \n    \"\"\"\n    ret = sint.Array(len(l))\n    @for_range(len(l))\n    def _(i):\n        @for_range(len(l))\n        def _(j):\n            ret[i] = (l[j]==l[i]).if_else(ret[i]+1,ret[i])\n    return ret\n"}
{"test_name": "array_or", "instruction": "Translate the following code snippet from Python/Numpy to MP-SPDZ.", "input": "def array_or(a,b):\n    \"\"\"\n    Compute the elementwise OR of the two input vectors. \n    \"\"\"\n    ret = [0 for i in range(len(a))]\n    for i in range(len(ret)):\n        ret[i] = a[i] or b[i]\n    return ret\n\n", "annotation": "No annotation.", "output": "def array_or(a,b):\n    \"\"\"\n    Compute the elementwise OR of the two input vectors. \n    \"\"\"\n    ret = sfix.Array(len(a))\n    @for_range(len(ret))\n    def _(i):\n        ret[i] = a[i].bit_or(b[i])\n    return ret\n"}
{"test_name": "stock_predicator", "instruction": "Translate the following code snippet from Python/Numpy to MP-SPDZ.", "input": "def stock_predicator(days):\n    \"\"\"\n    Given the stock price in the next few days (at least 3 days).\n    Use dynamic programming to find to days, \n    such that buying on the earlier day and selling on the later day is the most profitable\n    If all choices causes negative profits, you should return 0.\n    \"\"\"\n    lowest = [0 for i in range(len(days))]\n    partial_max = [0 for i in range(len(days))]\n    lowest[0] = days[0]\n    for i in range(1,len(days)):\n        lowest[i] = lowest[i-1] if lowest[i-1]<=days[i] else days[i]\n        partial_max[i] = partial_max[i-1] if partial_max[i-1]>=days[i]-lowest[i-1] else days[i]-lowest[i-1]\n    return partial_max[len(days)-1]\n\n", "annotation": "No annotation.", "output": "def stock_predicator(days):\n    \"\"\"\n    Given the stock price in the next few days (at least 3 days).\n    Use dynamic programming to find to days, \n    such that buying on the earlier day and selling on the later day is the most profitable\n    If all choices causes negative profits, you should return 0.\n    \"\"\"\n    lowest = sfix.Array(len(days))\n    partial_max = sfix.Array(len(days))\n    lowest[0] = days[0]\n    @for_range(1,len(days))\n    def _(i):\n        lowest[i] = (lowest[i-1]<=days[i]).if_else(lowest[i-1],days[i])\n        partial_max[i] = (partial_max[i-1]>=days[i]-lowest[i-1]).if_else(partial_max[i-1], days[i]-lowest[i-1])\n    return partial_max[len(days)-1]\n"}
{"test_name": "len5_inc_array", "instruction": "Translate the following code snippet from Python/Numpy to MP-SPDZ.", "input": "def len5_inc_array(init):\n    \"\"\"\n    Return an increase-by-one array with given initial element and length 5.\n    \"\"\"\n    ret = [init+i for i in range(5)]\n    return ret\n\n", "annotation": "No annotation.", "output": "def len5_inc_array(init):\n    \"\"\"\n    Return an increase-by-one array with given initial element and length 5.\n    \"\"\"\n    ret = sfix.Array(5)\n    @for_range(5)\n    def _(i):\n        ret[i] = init + i\n    return ret\n"}
{"test_name": "cut_first_five", "instruction": "Translate the following code snippet from Python/Numpy to MP-SPDZ.", "input": "def cut_first_five(arr):\n    \"\"\"\n    Return the array composed of the first 5 elements of the input array. \n    If the input array does not have 5 elements, pad with 0.\n    \"\"\"\n    ret = [0 for i in range(5)]\n    for i in range(min(5,len(arr))):\n        ret[i] = arr[i]\n    return ret\n\n", "annotation": "No annotation.", "output": "def cut_first_five(arr):\n    \"\"\"\n    Return the array composed of the first 5 elements of the input array. \n    If the input array does not have 5 elements, pad with 0.\n    \"\"\"\n    ret = sfix.Array(5)\n    @for_range(min(5,len(arr)))\n    def _(i):\n        ret[i] = arr[i]    \n    return ret\n"}
{"test_name": "max_pooling_1d", "instruction": "Translate the following code snippet from Python/Numpy to MP-SPDZ.", "input": "def max_pooling_1d(vec,step):\n    \"\"\"\n    Do 1-dimensional max pooling on vec with step. \n    Ignoring the remaining elements in the vector.\n    \"\"\"\n    ret_length = len(vec)//step\n    ret = [0 for i in range(ret_length)]\n    for i in range(len(ret)):\n        max = vec[i*step]\n        for j in range(step):\n            if vec[i*step+j]>max:\n                max = vec[i*step+j]\n        ret[i] = max\n    return ret\n\n", "annotation": "No annotation.", "output": "def max_pooling_1d(vec,step):\n    \"\"\"\n    Do 1-dimensional max pooling on vec with step. \n    Ignoring the remaining elements in the vector.\n    \"\"\"\n    ret_length = len(vec)//step\n    ret = sfix.Array(ret_length)\n    @for_range(len(ret))\n    def _(i):\n        max = vec[i*step]\n        @for_range(step)\n        def _(j):\n            max.update((vec[i*step+j]>max).if_else(vec[i*step+j],max))\n        ret[i] = max\n    return ret\n"}
{"test_name": "array_greater", "instruction": "Translate the following code snippet from Python/Numpy to MP-SPDZ.", "input": "def array_greater(arr,brr):\n    \"\"\"\n    For the two input arrays arr and brr, return an array ret with the same size. \n    For index i, if arr[i]>brr[i], ret[i] will be set to 1, otherwise ret[i] will be set to 0. \n    The two input arrays are guaranteed to have the same length. \n    \"\"\"\n    ret = [0 for i in range(len(arr))]\n    for i in range(len(arr)):\n        if arr[i]>brr[i]:\n            ret[i] = 1\n        else:\n            ret[i] = 0\n    return ret\n\n", "annotation": "No annotation.", "output": "def array_greater(arr,brr):\n    \"\"\"\n    For the two input arrays arr and brr, return an array ret with the same size. \n    For index i, if arr[i]>brr[i], ret[i] will be set to 1, otherwise ret[i] will be set to 0. \n    The two input arrays are guaranteed to have the same length. \n    \"\"\"\n    ret = sint.Array(len(arr))\n    @for_range(len(arr))\n    def _(i):\n        ret[i] = arr[i]>brr[i]\n    return ret\n"}
{"test_name": "dumb_concat", "instruction": "Translate the following code snippet from Python/Numpy to MP-SPDZ.", "input": "def dumb_concat(arr,brr):\n    \"\"\"\n    Concatenate the second array to the first array in a dumb way.\n    \"\"\"\n    length = len(arr) + len(brr)\n    ret = [0 for i in range(length)]\n    for i in range(len(arr)):\n        ret[i] = arr[i]\n    for j in range(len(brr)):\n        ret[len(arr)+j] = brr[j]\n    return ret\n\n", "annotation": "No annotation.", "output": "def dumb_concat(arr,brr):\n    \"\"\"\n    Concatenate the second array to the first array in a dumb way.\n    \"\"\"\n    length = len(arr) + len(brr)\n    ret = sfix.Array(length)\n    @for_range(len(arr))\n    def _(i):\n        ret[i] = arr[i]\n    @for_range(len(brr))\n    def _(j):\n        ret[len(arr)+j] = brr[j]\n    return ret\n"}
{"test_name": "indicator_if_else", "instruction": "Translate the following code snippet from Python/Numpy to MP-SPDZ.", "input": "def indicator_if_else(a,b,ind):\n    \"\"\"\n    Return an array c with the same length of a and b. \n    The element of c is set to be the corresponding element of a if the indicator is 1, \n    and is set to be the corresponding element of b if the indicator is 0.\n    \"\"\"\n    c = [0 for i in range(len(ind))]\n    for i in range(len(ind)):\n        if ind[i]:\n            c[i] = a[i]\n        else:\n            c[i] = b[i]\n    return c\n\n", "annotation": "No annotation.", "output": "def indicator_if_else(a,b,ind):\n    \"\"\"\n    Return an array c with the same length of a and b. \n    The element of c is set to be the corresponding element of a if the indicator is 1, \n    and is set to be the corresponding element of b if the indicator is 0.\n    \"\"\"\n    c = sfix.Array(len(ind))\n    @for_range(len(ind))\n    def _(i):\n        c[i] = ind[i].if_else(a[i],b[i])\n    return c\n"}
{"test_name": "elementwise_multiplication", "instruction": "Translate the following code snippet from Python/Numpy to MP-SPDZ.", "input": "def elementwise_multiplication(a,b):\n    \"\"\"\n    Compute the elementwise multiplication of the two input vectors. \n    \"\"\"\n    ret = [0 for i in range(len(a))]\n    for i in range(len(ret)):\n        ret[i] = a[i]*b[i]\n    return ret\n\n", "annotation": "No annotation.", "output": "def elementwise_multiplication(a,b):\n    \"\"\"\n    Compute the elementwise multiplication of the two input vectors. \n    \"\"\"\n    ret = sfix.Array(len(a))\n    @for_range(len(ret))\n    def _(i):\n        ret[i] = a[i]*b[i]\n    return ret\n"}
{"test_name": "get_subarr_by_indices", "instruction": "Translate the following code snippet from Python/Numpy to MP-SPDZ.", "input": "def get_subarr_by_indices(a, indices):\n    \"\"\"\n    Get the subarray of the input array indicated by the indices. \n    The inputs are guaranteed to be legal.\n    \"\"\"\n    ret = [0 for i in range(len(indices))]\n    for i in range(len(indices)):\n        ret[i] = a[indices[i]]\n    return ret\n\n", "annotation": "No annotation.", "output": "def get_subarr_by_indices(a, indices):\n    \"\"\"\n    Get the subarray of the input array indicated by the indices. \n    The inputs are guaranteed to be legal.\n    \"\"\"\n    def retrieve(arr,index):\n        \"\"\"\n        Retrieve the element in the array by index.\n        \"\"\"\n        ret = sfix(0)\n        @for_range(len(arr))\n        def _(i):\n            ret.update((index==i).if_else(arr[i],ret))\n        return ret\n    \n    ret = sfix.Array(len(indices))\n    @for_range(len(indices))\n    def _(i):\n        ret[i] = retrieve(a,indices[i])\n    return ret\n"}
{"test_name": "inc_array", "instruction": "Translate the following code snippet from Python/Numpy to MP-SPDZ.", "input": "def inc_array(num):\n    \"\"\"\n    Return an array with length num and elements 1 to num. \n    The input is guaranteed to be a cleartext positive integer.\n    \"\"\"\n    return [i+1 for i in range(num)]\n\n", "annotation": "No annotation.", "output": "def inc_array(num):\n    \"\"\"\n    Return an array with length num and elements 1 to num. \n    The input is guaranteed to be a cleartext positive integer.\n    \"\"\"\n    ret = sfix.Array(num)\n    @for_range(num)\n    def _(i):\n        ret[i] = i+1\n    return ret\n"}
{"test_name": "cut_last_five", "instruction": "Translate the following code snippet from Python/Numpy to MP-SPDZ.", "input": "def cut_last_five(arr):\n    \"\"\"\n    Return the array composed of the last 5 elements of the input array. \n    If the input array does not have 5 elements, pad with 0 (at the beginning).\n    \"\"\"\n    ret = [0 for i in range(5)]\n    for i in range(min(5,len(arr))):\n        ret[4-i] = arr[len(arr)-1-i]\n    return ret\n\n", "annotation": "No annotation.", "output": "def cut_last_five(arr):\n    \"\"\"\n    Return the array composed of the last 5 elements of the input array. \n    If the input array does not have 5 elements, pad with 0 (at the beginning).\n    \"\"\"\n    ret = sfix.Array(5)\n    @for_range(min(5,len(arr)))\n    def _(i):\n        ret[4-i] = arr[len(arr)-1-i]    \n    return ret\n"}
{"test_name": "average_pooling_1d", "instruction": "Translate the following code snippet from Python/Numpy to MP-SPDZ.", "input": "def average_pooling_1d(vec,step):\n    \"\"\"\n    Do 1-dimensional average pooling on vec with step. \n    Ignoring the remaining elements in the vector.\n    \"\"\"\n    ret_length = len(vec)//step\n    ret = [0 for i in range(ret_length)]\n    for i in range(len(ret)):\n        avg = 0\n        for j in range(step):\n            avg = avg + vec[i*step+j]/step\n        ret[i] = avg\n    return ret\n\n", "annotation": "No annotation.", "output": "def average_pooling_1d(vec,step):\n    \"\"\"\n    Do 1-dimensional average pooling on vec with step. \n    Ignoring the remaining elements in the vector.\n    \"\"\"\n    ret_length = len(vec)//step\n    ret = sfix.Array(ret_length)\n    @for_range(len(ret))\n    def _(i):\n        avg = sfix(0)\n        @for_range(step)\n        def _(j):\n            avg.update(avg+vec[i*step+j]/step)\n        ret[i] = avg\n    return ret\n"}
{"test_name": "array_relu", "instruction": "Translate the following code snippet from Python/Numpy to MP-SPDZ.", "input": "def array_relu(arr):\n    \"\"\"\n    Apply ReLU function elementwisely to the input array.\n    \"\"\"\n    ret = [0 for i in range(len(arr))]\n    for i in range(len(arr)):\n        ret[i] = arr[i] if arr[i]>=0 else 0\n    return ret\n\n", "annotation": "No annotation.", "output": "def array_relu(arr):\n    \"\"\"\n    Apply ReLU function elementwisely to the input array.\n    \"\"\"\n    ret = sfix.Array(len(arr))\n    @for_range(len(arr))\n    def _(i):\n        ret[i] = (arr[i]>=0).if_else(arr[i],0)\n    return ret\n"}
{"test_name": "move_to_end", "instruction": "Translate the following code snippet from Python/Numpy to MP-SPDZ.", "input": "def move_to_end(arr, index):\n    \"\"\"\n    Move the element with given index in the array to the end of the array.\n    The index is guaranteed to be legal.\n    \"\"\"\n    temp = arr[index]\n    for i in range(index+1,len(arr)):\n        arr[i-1]=arr[i]\n    arr[len(arr)-1] = temp\n    return arr\n\n", "annotation": "No annotation.", "output": "def move_to_end(arr, index):\n    \"\"\"\n    Move the element with given index in the array to the end of the array.\n    The index is guaranteed to be legal.\n    \"\"\"\n    def retrieve(arr,index):\n        \"\"\"\n        Retrieve the element in the array by index.\n        \"\"\"\n        ret = sfix(0)\n        @for_range(len(arr))\n        def _(i):\n            ret.update((index==i).if_else(arr[i],ret))\n        return ret\n    temp = retrieve(arr, index)\n    @for_range(1,len(arr))\n    def _(i):\n        arr[i-1] = (i>=index+1).if_else(arr[i],arr[i-1])\n    arr[len(arr)-1] = temp\n    return arr\n"}
{"test_name": "set_to_zero", "instruction": "Translate the following code snippet from Python/Numpy to MP-SPDZ.", "input": "def set_to_zero(arr,index):\n    \"\"\"\n    Set the element in the input array with given index to zero.\n    The input index is guaranteed to be legal. \n    \"\"\"\n    arr[index] = 0\n    return arr\n\n", "annotation": "No annotation.", "output": "def set_to_zero(arr,index):\n    \"\"\"\n    Set the element in the input array with given index to zero.\n    The input index is guaranteed to be legal. \n    \"\"\"\n    @for_range(len(arr))\n    def _(i):\n        arr[i] = (index==i).if_else(0,arr[i])\n    return arr\n"}
{"test_name": "last_partial_sum", "instruction": "Translate the following code snippet from Python/Numpy to MP-SPDZ.", "input": "def last_partial_sum(arr,n):\n    \"\"\"\n    Return the sum of the last n elements in the input array.\n    n is guaranteed to be legal.\n    \"\"\"\n    ret = 0\n    for i in range(len(arr)-n,len(arr)):\n        ret = ret + arr[i]\n    return ret\n\n", "annotation": "No annotation.", "output": "def last_partial_sum(arr,n):\n    \"\"\"\n    Return the sum of the last n elements in the input array.\n    n is guaranteed to be legal.\n    \"\"\"\n    ret = sfix(0)\n    @for_range(len(arr))\n    def _(i):\n        ret.update((i>=len(arr)-n).if_else(ret+arr[i], ret))\n    return ret\n"}
{"test_name": "permute_by_indices", "instruction": "Translate the following code snippet from Python/Numpy to MP-SPDZ.", "input": "def permute_by_indices(a,indices):\n    \"\"\"\n    Permute the input array a by the indices. \n    The i'th element in the returned array will be a[indices[i]]. \n    The input indices are guaranteed to be a legal permutation. \n    \"\"\"\n    ret = [0 for i in range(len(a))]\n    for i in range(len(a)):\n        ret[i] = a[indices[i]]\n    return ret\n\n", "annotation": "No annotation.", "output": "def permute_by_indices(a,indices):\n    \"\"\"\n    Permute the input array a by the indices. \n    The i'th element in the returned array will be a[indices[i]]. \n    The input indices are guaranteed to be a legal permutation. \n    \"\"\"\n    def retrieve(arr,index):\n        \"\"\"\n        Retrieve the element in the array by index.\n        \"\"\"\n        ret = sfix(0)\n        @for_range(len(arr))\n        def _(i):\n            ret.update((index==i).if_else(arr[i],ret))\n        return ret\n    \n    ret = sfix.Array(len(a))\n    @for_range(len(a))\n    def _(i):\n        ret[i] = retrieve(a,indices[i])\n    return ret\n"}
{"test_name": "get_rank", "instruction": "Translate the following code snippet from Python/Numpy to MP-SPDZ.", "input": "def get_rank(arr,index):\n    \"\"\"\n    Get the rank in the array of the element (how many elements are smaller than the element) with given index. \n    \"\"\"\n    rank = 0\n    for item in arr:\n        if item < arr[index]:\n            rank = rank + 1\n    return rank\n\n", "annotation": "No annotation.", "output": "def get_rank(arr,index):\n    \"\"\"\n    Get the rank in the array of the element (how many elements are smaller than the element) with given index. \n    \"\"\"\n    def retrieve(l,j):\n        \"\"\"\n        Retrieve the element in the array by index.\n        \"\"\"\n        ret = sfix(0)\n        @for_range(len(l))\n        def _(i):\n            ret.update((i==j).if_else(l[i],ret))\n        return ret\n    \n    target = retrieve(arr, index)\n    rank = sint(0)\n    @for_range(len(arr))\n    def _(i):\n        rank.update((arr[i]<target).if_else(rank+1,rank))\n    return rank\n"}
{"test_name": "interchange_by_indices", "instruction": "Translate the following code snippet from Python/Numpy to MP-SPDZ.", "input": "def interchange_by_indices(arr,index1,index2):\n    \"\"\"\n    Interchange the two elements in the array with given indices. \n    The input indices are guaranteed to be legal. \n    \"\"\"\n    temp = arr[index1]\n    arr[index1] = arr[index2]\n    arr[index2] = temp\n    return arr\n\n", "annotation": "No annotation.", "output": "def interchange_by_indices(arr,index1,index2):\n    \"\"\"\n    Interchange the two elements in the array with given indices. \n    The input indices are guaranteed to be legal. \n    \"\"\"\n    element1 = sfix(0)\n    element2 = sfix(0)\n    @for_range(len(arr))\n    def _(i):\n        element1.update((i==index1).if_else(arr[i],element1))\n        element2.update((i==index2).if_else(arr[i],element2))\n    @for_range(len(arr))\n    def _(i):\n        arr[i] = (i==index1).if_else(element2,arr[i])\n        arr[i] = (i==index2).if_else(element1,arr[i])\n    return arr\n"}
{"test_name": "increase_by", "instruction": "Translate the following code snippet from Python/Numpy to MP-SPDZ.", "input": "def increase_by(arr, index, k):\n    \"\"\"\n    Increase the element arr[index] in the array arr by k.\n    \"\"\"\n    arr[index] = arr[index] + k\n    return arr\n\n", "annotation": "No annotation.", "output": "def increase_by(arr, index, k):\n    \"\"\"\n    Increase the element arr[index] in the array arr by k.\n    \"\"\"\n    @for_range(len(arr))\n    def _(i):\n        arr[i] = (i==index).if_else(arr[i]+k,arr[i])\n    return arr\n"}
{"test_name": "retrieve_by_index", "instruction": "Translate the following code snippet from Python/Numpy to MP-SPDZ.", "input": "def retrieve_by_index(arr,index):\n    \"\"\"\n    Retrieve the element in the array by index.\n    The input index is guaranteed to be legal. \n    \"\"\"\n    return arr[index]\n\n", "annotation": "No annotation.", "output": "def retrieve_by_index(arr,index):\n    \"\"\"\n    Retrieve the element in the array by index.\n    The input index is guaranteed to be legal. \n    \"\"\"\n    ret = sfix(0)\n    @for_range(len(arr))\n    def _(i):\n        ret.update((index==i).if_else(arr[i],ret))\n    return ret\n"}
{"test_name": "scale_by", "instruction": "Translate the following code snippet from Python/Numpy to MP-SPDZ.", "input": "def scale_by(arr, index, k):\n    \"\"\"\n    Multiply the element arr[index] in the array arr by k.\n    \"\"\"\n    arr[index] = arr[index] * k\n    return arr\n\n", "annotation": "No annotation.", "output": "def scale_by(arr, index, k):\n    \"\"\"\n    Multiply the element arr[index] in the array arr by k.\n    \"\"\"\n    @for_range(len(arr))\n    def _(i):\n        arr[i] = (i==index).if_else(arr[i]*k,arr[i])\n    return arr\n"}
{"test_name": "take_opposite_to", "instruction": "Translate the following code snippet from Python/Numpy to MP-SPDZ.", "input": "def take_opposite_to(arr,index):\n    \"\"\"\n    Take opposite to the element in the array with given index. \n    The input index is guaranteed to be legal. \n    \"\"\"\n    arr[index] = -arr[index]\n    return arr\n\n", "annotation": "No annotation.", "output": "def take_opposite_to(arr,index):\n    \"\"\"\n    Take opposite to the element in the array with given index. \n    The input index is guaranteed to be legal. \n    \"\"\"\n    @for_range(len(arr))\n    def _(i):\n        arr[i] = (i==index).if_else(-arr[i],arr[i])\n    return arr\n"}
{"test_name": "array_rank", "instruction": "Translate the following code snippet from Python/Numpy to MP-SPDZ.", "input": "def array_rank(l):\n    \"\"\"\n    Return an array with the same size of the original array, \n    each position of which records the number of elements smaller than the element at the same position. \n    \"\"\"\n    ret = [0 for i in range(len(l))]\n    for i in range(len(l)):\n        for j in range(len(l)):\n            if l[j]<l[i]:\n                ret[i] = ret[i] + 1\n    return ret\n\n", "annotation": "No annotation.", "output": "def array_rank(l):\n    \"\"\"\n    Return an array with the same size of the original array, \n    each position of which records the number of elements smaller than the element at the same position. \n    \"\"\"\n    ret = sint.Array(len(l))\n    @for_range(len(l))\n    def _(i):\n        @for_range(len(l))\n        def _(j):\n            ret[i] = (l[j]<l[i]).if_else(ret[i]+1,ret[i])\n    return ret\n"}
{"test_name": "remove_by_index", "instruction": "Translate the following code snippet from Python/Numpy to MP-SPDZ.", "input": "def remove_by_index(arr,index):\n    \"\"\"\n    Remove the element in the array by index and return the remaining array. \n    The input index is guaranteed to be legal. \n    \"\"\"\n    ret = [0 for i in range(len(arr)-1)]\n    for i in range(len(arr)-1):\n        if i<index:\n            ret[i] = arr[i]\n        else:\n            ret[i] = arr[i+1]\n    return ret\n\n", "annotation": "No annotation.", "output": "def remove_by_index(arr,index):\n    \"\"\"\n    Remove the element in the array by index and return the remaining array. \n    The input index is guaranteed to be legal. \n    \"\"\"\n    ret = sfix.Array(len(arr))\n    @for_range(len(arr)-1)\n    def _(i):\n        ret[i] = (i<index).if_else(arr[i],arr[i+1])\n    return ret\n"}
{"test_name": "process_by_index", "instruction": "Translate the following code snippet from Python/Numpy to MP-SPDZ.", "input": "def process_by_index(arr,index,func):\n    \"\"\"\n    Process the element in the input array with given index.\n    The input index is guaranteed to be legal. \n    \"\"\"\n    arr[index] = func(arr[index])\n    return arr\n\n", "annotation": "No annotation.", "output": "def process_by_index(arr,index,func):\n    \"\"\"\n    Process the element in the input array with given index.\n    The input index is guaranteed to be legal. \n    \"\"\"\n    @for_range(len(arr))\n    def _(i):\n        arr[i] = (index==i).if_else(func(arr[i]),arr[i])\n    return arr\n"}
{"test_name": "sum_by_indices", "instruction": "Translate the following code snippet from Python/Numpy to MP-SPDZ.", "input": "def sum_by_indices(arr,indices):\n    \"\"\"\n    Compute the sum of elements in the array with given indices.\n    The input indices are guaranteed to be legal. \n    \"\"\"\n    sum = 0\n    for index in indices:\n        sum = sum + arr[index]\n    return sum\n\n", "annotation": "No annotation.", "output": "def sum_by_indices(arr,indices):\n    \"\"\"\n    Compute the sum of elements in the array with given indices.\n    The input indices are guaranteed to be legal. \n    \"\"\"\n    def retrieve(arr,index):\n        \"\"\"\n        Retrieve the element in the array by index.\n        \"\"\"\n        ret = sfix(0)\n        @for_range(len(arr))\n        def _(i):\n            ret.update((index==i).if_else(arr[i],ret))\n        return ret\n    sum = sfix(0)\n    @for_range(len(indices))\n    def _(i):\n        sum.update(sum+retrieve(arr,indices[i]))\n    return sum\n"}
