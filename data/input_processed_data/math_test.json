{"test_name": "next_integer", "instruction": "Translate the following code snippet from Python/Numpy to MP-SPDZ.", "input": "def next_integer(t):\n    \"\"\"\n    Return the minimum integer strictly bigger than the input value.\n    \"\"\"\n    import math\n    return math.floor(t) + 1\n\n", "annotation": "No annotation.", "output": "def next_integer(t):\n    \"\"\"\n    Return the minimum integer strictly bigger than the input value.\n    \"\"\"\n    from Compiler import mpc_math\n    return mpc_math.floor_fx(t) + 1\n"}
{"test_name": "father_and_son", "instruction": "Translate the following code snippet from Python/Numpy to MP-SPDZ.", "input": "def father_and_son(father_age, son_age):\n    \"\"\"\n    Given the age of father and son, \n    return before how many years or after how many years, the age of father is twice as the age of son.\n    \"\"\"\n    return abs(father_age-son_age*2)\n\n", "annotation": "No annotation.", "output": "def father_and_son(father_age, son_age):\n    \"\"\"\n    Given the age of father and son, \n    return before how many years or after how many years, the age of father is twice as the age of son.\n    \"\"\"\n    return abs(father_age-son_age*2)\n"}
{"test_name": "triangle_area", "instruction": "Translate the following code snippet from Python/Numpy to MP-SPDZ.", "input": "def triangle_area(side, height):\n    \"\"\"\n    Given the length of on side and the corresponding height, compute the size of the triangle. \n    \"\"\"\n    return side*height/2\n\n", "annotation": "No annotation.", "output": "def triangle_area(side, height):\n    \"\"\"\n    Given the length of on side and the corresponding height, compute the size of the triangle. \n    \"\"\"\n    return side*height/sfix(2)\n"}
{"test_name": "sin_plus_cos", "instruction": "Translate the following code snippet from Python/Numpy to MP-SPDZ.", "input": "def sin_plus_cos(a):\n    \"\"\"\n    Return sin(a)+cos(a)\n    \"\"\"\n    import math\n    return math.sin(a) + math.cos(a)\n\n", "annotation": "No annotation.", "output": "def sin_plus_cos(a):\n    \"\"\"\n    Return sin(a)+cos(a)\n    \"\"\"\n    from Compiler import mpc_math\n    return mpc_math.sin(a) + mpc_math.cos(a)\n"}
{"test_name": "sigmoid", "instruction": "Translate the following code snippet from Python/Numpy to MP-SPDZ.", "input": "def sigmoid(x):\n    \"\"\"\n    sigmoid function\n    \"\"\"\n    import math\n    return 1/(1+math.pow(math.e,-x))\n\n", "annotation": "No annotation.", "output": "def sigmoid(x):\n    \"\"\"\n    sigmoid function\n    \"\"\"\n    import math\n    from Compiler import mpc_math\n    return 1/(1+mpc_math.pow_fx(math.e,-x))\n"}
{"test_name": "self_exponent", "instruction": "Translate the following code snippet from Python/Numpy to MP-SPDZ.", "input": "def self_exponent(k):\n    \"\"\"\n    Return the self-exponent k^k.\n    \"\"\"\n    import math\n    return math.pow(k,k)\n\n", "annotation": "No annotation.", "output": "def self_exponent(k):\n    \"\"\"\n    Return the self-exponent k^k.\n    \"\"\"\n    from Compiler import mpc_math\n    return mpc_math.pow_fx(k,k)\n"}
{"test_name": "silu", "instruction": "Translate the following code snippet from Python/Numpy to MP-SPDZ.", "input": "def silu(x):\n    \"\"\"\n    SiLU function\n    \"\"\"\n    import math\n    return x/(1+math.pow(math.e,-x))\n\n", "annotation": "No annotation.", "output": "def silu(x):\n    \"\"\"\n    SiLU function\n    \"\"\"\n    import math\n    from Compiler import mpc_math\n    return x/(1+mpc_math.pow_fx(math.e,-x))\n"}
{"test_name": "Gaussian_bracket", "instruction": "Translate the following code snippet from Python/Numpy to MP-SPDZ.", "input": "def Gaussian_bracket(x):\n    \"\"\"\n    Return the value of Gaussian large bracket.\n    \"\"\"\n    import math\n    x_int = math.floor(x)\n    return x - x_int\n\n", "annotation": "No annotation.", "output": "def Gaussian_bracket(x):\n    \"\"\"\n    Round x to the nearest integer. \n    \"\"\"\n    from Compiler import mpc_math\n    x_int = mpc_math.floor_fx(x)\n    return x - x_int\n"}
{"test_name": "asin_and_square", "instruction": "Translate the following code snippet from Python/Numpy to MP-SPDZ.", "input": "def asin_and_square(x):\n    \"\"\"\n    Take arcsin to the input, then compute the square of the outcome. \n    \"\"\"\n    import math\n    return math.pow(math.asin(x),2)\n\n", "annotation": "No annotation.", "output": "def asin_and_square(x):\n    \"\"\"\n    Take arcsin to the input, then compute the square of the outcome. \n    \"\"\"\n    from Compiler import mpc_math\n    return mpc_math.pow_fx(mpc_math.asin(x),2)\n"}
{"test_name": "cylinder_surface", "instruction": "Translate the following code snippet from Python/Numpy to MP-SPDZ.", "input": "def cylinder_surface(r,h):\n    \"\"\"\n    Given the radius and the height of a cylinder, return its surface area. \n    \"\"\"\n    import math\n    return 2 * math.pi * r**2 + 2 * math.pi * r * h\n\n", "annotation": "No annotation.", "output": "def cylinder_surface(r,h):\n    \"\"\"\n    Given the radius and the height of a cylinder, return its surface area. \n    \"\"\"\n    import math\n    return 2 * math.pi * r**2 + 2 * math.pi * r * h\n"}
{"test_name": "radian_to_degree", "instruction": "Translate the following code snippet from Python/Numpy to MP-SPDZ.", "input": "def radian_to_degree(r):\n    \"\"\"\n    Converting radian to degree\n    \"\"\"\n    import math\n    return r/math.pi*180\n\n", "annotation": "No annotation.", "output": "def radian_to_degree(r):\n    \"\"\"\n    Converting radian to degree\n    \"\"\"\n    import math\n    return r/math.pi*sfix(180)\n"}
{"test_name": "square_root", "instruction": "Translate the following code snippet from Python/Numpy to MP-SPDZ.", "input": "def square_root(a):\n    \"\"\"\n    return the square root of the input. \n    \"\"\"\n    import math\n    return math.sqrt(a)\n\n", "annotation": "No annotation.", "output": "def square_root(a):\n    \"\"\"\n    return the square root of the input. \n    \"\"\"\n    from Compiler import mpc_math\n    return mpc_math.sqrt_simplified_fx(a)\n"}
{"test_name": "cosine_theorem", "instruction": "Translate the following code snippet from Python/Numpy to MP-SPDZ.", "input": "def cosine_theorem(a,b,rad):\n    \"\"\"\n    Given the two edges a, b and the angle rad between them, \n    use cosine theorem to compute the length of the third edge.\n    \"\"\"\n    import math\n    return math.sqrt(a**2+b**2-2*a*b*math.cos(rad))\n\n", "annotation": "No annotation.", "output": "def cosine_theorem(a,b,rad):\n    \"\"\"\n    Given the two edges a, b and the angle rad between them, \n    use cosine theorem to compute the length of the third edge.\n    \"\"\"\n    from Compiler import mpc_math\n    return mpc_math.sqrt_simplified_fx(a**2+b**2-2*a*b*mpc_math.cos(rad))\n"}
{"test_name": "lights_states", "instruction": "Translate the following code snippet from Python/Numpy to MP-SPDZ.", "input": "def lights_states(num):\n    \"\"\"\n    Given the number of lights (all different), compute the total number of possible states. \n    (Each light has two states: on/off)\n    \"\"\"\n    import math\n    return math.exp2(num)\n\n", "annotation": "No annotation.", "output": "def lights_states(num):\n    \"\"\"\n    Given the number of lights (all different), compute the total number of possible states. \n    (Each light has two states: on/off)\n    \"\"\"\n    from Compiler import mpc_math\n    return mpc_math.exp2_fx(num)\n"}
{"test_name": "degree_to_radian", "instruction": "Translate the following code snippet from Python/Numpy to MP-SPDZ.", "input": "def degree_to_radian(d):\n    \"\"\"\n    Converting degree to radian\n    \"\"\"\n    import math\n    return d/180*math.pi\n\n", "annotation": "No annotation.", "output": "def degree_to_radian(d):\n    \"\"\"\n    Converting degree to radian\n    \"\"\"\n    import math\n    return d/sfix(180)*math.pi\n"}
{"test_name": "Fah_to_Cel", "instruction": "Translate the following code snippet from Python/Numpy to MP-SPDZ.", "input": "def Fah_to_Cel(F):\n    \"\"\"\n    Convert Fahrenheit temperature to Celsius temperature.\n    \"\"\"\n    return (F-32)/1.8\n\n", "annotation": "No annotation.", "output": "def Fah_to_Cel(F):\n    \"\"\"\n    Convert Fahrenheit temperature to Celsius temperature.\n    \"\"\"\n    return (F-32)/sfix(1.8)\n"}
{"test_name": "elliptic_area", "instruction": "Translate the following code snippet from Python/Numpy to MP-SPDZ.", "input": "def elliptic_area(a,b):\n    \"\"\"\n    Given the lengths of major axis and minor axis of the elliptic, return its area. \n    \"\"\"\n    import math\n    return math.pi * a * b\n\n", "annotation": "No annotation.", "output": "def elliptic_area(a,b):\n    \"\"\"\n    Given the lengths of major axis and minor axis of the elliptic, return its area. \n    \"\"\"\n    import math\n    return math.pi * a * b\n"}
{"test_name": "floor", "instruction": "Translate the following code snippet from Python/Numpy to MP-SPDZ.", "input": "def floor(z):\n    \"\"\"\n    Return the maximum integer no bigger than the input.\n    \"\"\"\n    import math\n    return math.floor(z)\n\n", "annotation": "No annotation.", "output": "def floor(z):\n    \"\"\"\n    Return the maximum integer no bigger than the input.\n    \"\"\"\n    from Compiler import mpc_math\n    return mpc_math.floor_fx(z)\n"}
{"test_name": "log_and_cube", "instruction": "Translate the following code snippet from Python/Numpy to MP-SPDZ.", "input": "def log_and_cube(x):\n    \"\"\"\n    take log (with base-2) to the input, then compute the cube of the outcome\n    \"\"\"\n    import math\n    return math.pow(math.log(x,2),3)\n\n", "annotation": "No annotation.", "output": "def log_and_cube(x):\n    \"\"\"\n    take log (with base-2) to the input, then compute the cube of the outcome\n    \"\"\"\n    from Compiler import mpc_math\n    return mpc_math.pow_fx(mpc_math.log_fx(x,2),3)\n"}
{"test_name": "floor_and_square", "instruction": "Translate the following code snippet from Python/Numpy to MP-SPDZ.", "input": "def floor_and_square(z):\n    \"\"\"\n    Calculate the maximum integer no bigger than the input. \n    Then return the square of the previous outcome. \n    \"\"\"\n    import math\n    return math.floor(z)**2\n\n", "annotation": "No annotation.", "output": "def floor_and_square(z):\n    \"\"\"\n    Calculate the maximum integer no bigger than the input. \n    Then return the square of the previous outcome. \n    \"\"\"\n    from Compiler import mpc_math\n    return mpc_math.floor_fx(z)**2\n"}
{"test_name": "meters_to_feet", "instruction": "Translate the following code snippet from Python/Numpy to MP-SPDZ.", "input": "def meters_to_feet(m):\n    \"\"\"\n    Convert the length in meters to the length in feet.\n    \"\"\"\n    return m * 3.2808\n\n", "annotation": "No annotation.", "output": "def meters_to_feet(m):\n    \"\"\"\n    Convert the length in meters to the length in feet.\n    \"\"\"\n    return m * sfix(3.2808)\n"}
{"test_name": "sphere_area", "instruction": "Translate the following code snippet from Python/Numpy to MP-SPDZ.", "input": "def sphere_area(r):\n    \"\"\"\n    Return the area of a sphere surface with given radius r.\n    \"\"\"\n    import math\n    return 4*math.pi*r**2\n\n", "annotation": "No annotation.", "output": "def sphere_area(r):\n    \"\"\"\n    Return the area of a sphere surface with given radius r.\n    \"\"\"\n    import math\n    return 4*math.pi*r**2\n"}
{"test_name": "coarse_abs", "instruction": "Translate the following code snippet from Python/Numpy to MP-SPDZ.", "input": "def coarse_abs(x):\n    \"\"\"\n    Return the absolute value of x, and round it to zero.\n    \"\"\"\n    import math\n    return math.floor(abs(x))\n\n", "annotation": "No annotation.", "output": "def coarse_abs(x):\n    \"\"\"\n    Return the absolute value of x, and round it to zero.\n    \"\"\"\n    from Compiler import mpc_math\n    return mpc_math.floor_fx(abs(x))\n"}
{"test_name": "how_many_chickens", "instruction": "Translate the following code snippet from Python/Numpy to MP-SPDZ.", "input": "def how_many_chickens(heads,legs):\n    \"\"\"\n    Compute the number of chickens in the rabbit-chicken problem.\n    \"\"\"\n    return heads-(legs-heads*2)//2\n\n", "annotation": "No annotation.", "output": "def how_many_chickens(heads,legs):\n    \"\"\"\n    Compute the number of chickens in the rabbit-chicken problem.\n    \"\"\"\n    return heads-(legs-heads*2)/2\n"}
{"test_name": "interest_calculator", "instruction": "Translate the following code snippet from Python/Numpy to MP-SPDZ.", "input": "def interest_calculator(capital,ratio,months):\n    \"\"\"\n    Given the initial capital, interest ratio and the number of months you deposit your money to the bank, \n    calculate the interest you can get. \n    \"\"\"\n    import math\n    return (math.pow(1+ratio,months)-1)*capital\n\n", "annotation": "No annotation.", "output": "def interest_calculator(capital,ratio,months):\n    \"\"\"\n    Given the initial capital, interest ratio and the number of months you deposit your money to the bank, \n    calculate the interest you can get. \n    \"\"\"\n    from Compiler import mpc_math\n    return (mpc_math.pow_fx(1+ratio,months)-1)*capital\n"}
{"test_name": "circle_area", "instruction": "Translate the following code snippet from Python/Numpy to MP-SPDZ.", "input": "def circle_area(r):\n    \"\"\"\n    Return the area of the circle with given radius.\n    \"\"\"\n    import math\n    return math.pi*r**2\n\n", "annotation": "No annotation.", "output": "def circle_area(r):\n    \"\"\"\n    Return the area of the circle with given radius.\n    \"\"\"\n    import math\n    return math.pi*r**2\n"}
{"test_name": "cube_and_square_root", "instruction": "Translate the following code snippet from Python/Numpy to MP-SPDZ.", "input": "def cube_and_square_root(x):\n    \"\"\"\n    take cube to the input, then compute the square root of the outcome\n    \"\"\"\n    import math\n    return math.sqrt(math.pow(x,3))\n\n", "annotation": "No annotation.", "output": "def cube_and_square_root(x):\n    \"\"\"\n    take cube to the input, then compute the square root of the outcome\n    \"\"\"\n    from Compiler import mpc_math\n    return mpc_math.sqrt_simplified_fx(mpc_math.pow_fx(x,3))\n"}
{"test_name": "round", "instruction": "Translate the following code snippet from Python/Numpy to MP-SPDZ.", "input": "def round(x):\n    \"\"\"\n    Round x to the nearest integer. \n    \"\"\"\n    import math\n    x_int = math.floor(x)\n    return x_int if (x-x_int)<0.5 else x_int+1\n\n", "annotation": "No annotation.", "output": "def round(x):\n    \"\"\"\n    Round x to the nearest integer. \n    \"\"\"\n    from Compiler import mpc_math\n    x_int = mpc_math.floor_fx(x)\n    return ((x-x_int)<0.5).if_else(x_int,x_int+1)\n"}
{"test_name": "cryptic_adjustment", "instruction": "Translate the following code snippet from Python/Numpy to MP-SPDZ.", "input": "def cryptic_adjustment(origin):\n    \"\"\"\n    The professor want to adjust the pessimistic score of his students mid-term exam. \n    The adjustment formula is 10*sqrt(10*sqrt(origin))\n    \"\"\"\n    import math\n    return 10*math.sqrt(10*math.sqrt(origin))\n\n", "annotation": "No annotation.", "output": "def cryptic_adjustment(origin):\n    \"\"\"\n    The professor want to adjust the pessimistic score of his students mid-term exam. \n    The adjustment formula is 10*sqrt(10*sqrt(origin))\n    \"\"\"\n    from Compiler import mpc_math\n    return 10*mpc_math.sqrt_simplified_fx(10*mpc_math.sqrt_simplified_fx(origin))\n"}
{"test_name": "specific_pow", "instruction": "Translate the following code snippet from Python/Numpy to MP-SPDZ.", "input": "def specific_pow(x):\n    \"\"\"\n    Return x^(2.5).\n    \"\"\"\n    import math\n    return math.pow(x,2.5)\n\n", "annotation": "No annotation.", "output": "def specific_pow(x):\n    \"\"\"\n    Return x^(2.5).\n    \"\"\"\n    from Compiler import mpc_math\n    return mpc_math.pow_fx(x,sfix(2.5))\n"}
{"test_name": "soft_plus", "instruction": "Translate the following code snippet from Python/Numpy to MP-SPDZ.", "input": "def soft_plus(x):\n    \"\"\"\n    Softplus function\n    \"\"\"\n    import math\n    return math.log(1+math.pow(math.e,x),math.e)\n\n", "annotation": "No annotation.", "output": "def soft_plus(x):\n    \"\"\"\n    Softplus function\n    \"\"\"\n    import math\n    from Compiler import mpc_math\n    return mpc_math.log_fx(1+mpc_math.pow_fx(math.e,x),math.e)\n"}
{"test_name": "ball_volume", "instruction": "Translate the following code snippet from Python/Numpy to MP-SPDZ.", "input": "def ball_volume(r):\n    \"\"\"\n    Return the volume of the ball with given radius.\n    \"\"\"\n    import math\n    return math.pi*r**3*4/3\n\n", "annotation": "No annotation.", "output": "def ball_volume(r):\n    \"\"\"\n    Return the volume of the ball with given radius.\n    \"\"\"\n    import math\n    return math.pi*r**3*4/sfix(3)\n"}
{"test_name": "Heron", "instruction": "Translate the following code snippet from Python/Numpy to MP-SPDZ.", "input": "def Heron(a,b,c):\n    \"\"\"\n    Given the lengths of three sides of the triangle, compute its size with Heron's formula.\n    \"\"\"\n    import math\n    p = (a+b+c)/2\n    return math.sqrt(p*(p-a)*(p-b)*(p-c))\n\n", "annotation": "No annotation.", "output": "def Heron(a,b,c):\n    \"\"\"\n    Given the lengths of three sides of the triangle, compute its size with Heron's formula.\n    \"\"\"\n    from Compiler import mpc_math\n    p = (a+b+c)/2\n    return mpc_math.sqrt_simplified_fx(p*(p-a)*(p-b)*(p-c))\n"}
{"test_name": "next_perfect_square", "instruction": "Translate the following code snippet from Python/Numpy to MP-SPDZ.", "input": "def next_perfect_square(x):\n    \"\"\"\n    Return the smallest perfect square number bigger than x. \n    The input x is guaranteed to be a positive integer. \n    \"\"\"\n    import math\n    return (math.floor(math.sqrt(x))+1)**2\n\n", "annotation": "No annotation.", "output": "def next_perfect_square(x):\n    \"\"\"\n    Return the smallest perfect square number bigger than x. \n    The input x is guaranteed to be a positive integer. \n    \"\"\"\n    from Compiler import mpc_math\n    return (mpc_math.floor_fx(mpc_math.sqrt_simplified_fx(sfix(x)))+1)**2\n"}
{"test_name": "pi_to_the_x", "instruction": "Translate the following code snippet from Python/Numpy to MP-SPDZ.", "input": "def pi_to_the_x(x):\n    \"\"\"\n    Return the value of pi^x.\n    \"\"\"\n    import math\n    return math.pow(math.pi,x)\n\n", "annotation": "No annotation.", "output": "def pi_to_the_x(x):\n    \"\"\"\n    Return the value of pi^x.\n    \"\"\"\n    import math\n    from Compiler import mpc_math\n    return mpc_math.pow_fx(math.pi,x)\n"}
{"test_name": "spring_rocket", "instruction": "Translate the following code snippet from Python/Numpy to MP-SPDZ.", "input": "def spring_rocket(height,m,k):\n    \"\"\"\n    You want to use a spring with stiffness coefficient k to bounce an object with mass m to the given height. \n    You should return the minimum length the spring should be compressed. \n    Assume g = 9.8\n    \"\"\"\n    import math\n    g = 9.8\n    return math.sqrt(2*m*g*height/k)\n\n", "annotation": "No annotation.", "output": "def spring_rocket(height,m,k):\n    \"\"\"\n    You want to use a spring with stiffness coefficient k to bounce an object with mass m to the given height. \n    You should return the minimum length the spring should be compressed. \n    Assume g = 9.8\n    \"\"\"\n    from Compiler import mpc_math\n    g = sfix(9.8)\n    return mpc_math.sqrt_simplified_fx(2*m*g*height/k)\n\n"}
{"test_name": "cone_volume", "instruction": "Translate the following code snippet from Python/Numpy to MP-SPDZ.", "input": "def cone_volume(r,h):\n    \"\"\"\n    Given the radius and height, compute the volume of the cone.\n    \"\"\"\n    import math\n    return math.pi * r * r * h / 3\n\n", "annotation": "No annotation.", "output": "def cone_volume(r,h):\n    \"\"\"\n    Given the radius and height, compute the volume of the cone.\n    \"\"\"\n    import math\n    return math.pi * r * r * h / sfix(3)\n"}
{"test_name": "how_many_rabbits", "instruction": "Translate the following code snippet from Python/Numpy to MP-SPDZ.", "input": "def how_many_rabbits(heads,legs):\n    \"\"\"\n    Compute the number of rabbits in the rabbit-chicken problem.\n    \"\"\"\n    return (legs-heads*2)//2\n\n", "annotation": "No annotation.", "output": "def how_many_rabbits(heads,legs):\n    \"\"\"\n    Compute the number of rabbits in the rabbit-chicken problem.\n    \"\"\"\n    return (legs-heads*2)/2\n"}
