{"test_name": "indicate_positive", "response_0": "def indicate_positive(arr):\n    \"\"\"\n    For the given array, return an array with the same size. \n    If one element in the input array is positive, \n    then the corresponding element in the returned array will be 1, \n    otherwise the element in the returned array will be 0. \n    \"\"\"\n    ret = [0 for i in range(len(arr))]\n    for i in range(len(arr)):\n        condition_positive = (arr[i] > 0)\n        ret[i] = condition_positive * 1 + (1 - condition_positive) * 0\n    return ret\n", "prompt_token_0": 1567, "completion_token_0": 583, "response_1": "def indicate_positive(arr):\n    \"\"\"\n    For the given array, return an array with the same size. \n    If one element in the input array is positive, \n    then the corresponding element in the returned array will be 1, \n    otherwise the element in the returned array will be 0. \n    \"\"\"\n    ret = [0 for i in range(len(arr))]\n    for i in range(len(arr)):\n        condition_positive = (arr[i] > 0)\n        ret[i] = condition_positive * 1 + (1 - condition_positive) * 0\n    return ret\n", "prompt_token_1": 1569, "completion_token_1": 580}
{"test_name": "array_xor", "response_0": "def array_xor(a, b):\n    \"\"\"\n    Compute the elementwise XOR of the two input vectors.  \n    \"\"\"\n    ret = [0 for i in range(len(a))]\n    for i in range(len(ret)):\n        ret[i] = a[i] ^ b[i]\n    return ret\n", "prompt_token_0": 755, "completion_token_0": 273, "response_1": "def array_xor(a, b):\n    \"\"\"\n    Compute the elementwise XOR of the two input vectors.  \n    \"\"\"\n    ret = [0 for i in range(len(a))]\n    for i in range(len(ret)):\n        ret[i] = a[i] ^ b[i]\n    return ret\n\n", "prompt_token_1": 755, "completion_token_1": 259}
{"test_name": "interlaced_placement", "response_0": "def interlaced_placement(a, b):\n    \"\"\"\n    Interleave the elements in two sequences.\n    The two input arrays are guaranteed to have the same length. \n    \"\"\"\n    ret = [0 for i in range(len(a)*2)]\n    for i in range(len(a)*2):\n        condition_a = (i % 2 == 0)  # True if index i is even\n        condition_b = not condition_a  # True if index i is odd\n\n        # Use conditions to select from a or b\n        ret[i] = condition_a * a[i // 2] + condition_b * b[(i - 1) // 2]\n\n    return ret\n", "prompt_token_0": 1491, "completion_token_0": 599, "response_1": "def interlaced_placement(a, b):\n    \"\"\"\n    Interleave the elements in two sequences.\n    The two input arrays are guaranteed to have the same length. \n    \"\"\"\n    ret = [0 for i in range(len(a)*2)]\n    for i in range(len(a)*2):\n        condition_odd = i % 2\n        condition_even = 1 - condition_odd  # Logical negation of condition_odd\n\n        # Obliviously assign values based on conditions\n        ret[i] = condition_odd * b[(i-1)//2] + condition_even * a[i//2]\n\n    return ret\n", "prompt_token_1": 1491, "completion_token_1": 555}
{"test_name": "array_and", "response_0": "def array_and(a, b):\n    \"\"\"\n    Compute the elementwise AND of the two input vectors. \n    \"\"\"\n    ret = [0 for i in range(len(a))]\n    for i in range(len(ret)):\n        ret[i] = a[i] and b[i]\n    return ret\n", "prompt_token_0": 756, "completion_token_0": 370, "response_1": "def array_and(a, b):\n    \"\"\"\n    Compute the elementwise AND of the two input vectors. \n    \"\"\"\n    ret = [0 for i in range(len(a))]\n    for i in range(len(ret)):\n        ret[i] = a[i] and b[i]\n    return ret\n\n", "prompt_token_1": 757, "completion_token_1": 323}
{"test_name": "array_indicator", "response_0": "def array_indicator(arr, predicator):\n    \"\"\"\n    Return an array with the same size of the input array. \n    For each element in the input array, \n    the corresponding value in the returned array is set to be the value of the predicator. \n    \"\"\"\n    ret = [False for i in range(len(arr))]\n    for i in range(len(arr)):\n        ret[i] = predicator(arr[i])\n    return ret\n", "prompt_token_0": 849, "completion_token_0": 410, "response_1": "def array_indicator(arr, predicator):\n    \"\"\"\n    Return an array with the same size of the input array. \n    For each element in the input array, \n    the corresponding value in the returned array is set to be the value of the predicator. \n    \"\"\"\n    ret = [False for i in range(len(arr))]\n    for i in range(len(arr)):\n        ret[i] = predicator(arr[i])\n    return ret\n", "prompt_token_1": 849, "completion_token_1": 473}
{"test_name": "array_greater_than_scalar", "response_0": "def array_greater_than_scalar(arr, bound):\n    \"\"\"\n    Given an input array and a bound, \n    return an array indicating whether each element is greater than the bound. \n    \"\"\"\n    ret = [False for i in range(len(arr))]\n    for i in range(len(arr)):\n        ret[i] = arr[i] > bound\n    return ret\n", "prompt_token_0": 796, "completion_token_0": 366, "response_1": "def array_greater_than_scalar(arr, bound):\n    \"\"\"\n    Given an input array and a bound, \n    return an array indicating whether each element is greater than the bound. \n    \"\"\"\n    ret = [False for i in range(len(arr))]\n    for i in range(len(arr)):\n        ret[i] = arr[i] > bound\n    return ret\n", "prompt_token_1": 796, "completion_token_1": 319}
{"test_name": "array_no_greater_than_scalar", "response_0": "def array_no_greater_than_scalar(arr, bound):\n    \"\"\"\n    Given an input array and a bound, \n    return an array indicating whether each element is no greater than the bound. \n    \"\"\"\n    ret = [False for i in range(len(arr))]\n    for i in range(len(arr)):\n        ret[i] = arr[i] <= bound\n    return ret\n", "prompt_token_0": 802, "completion_token_0": 344, "response_1": "def array_no_greater_than_scalar(arr, bound):\n    \"\"\"\n    Given an input array and a bound, \n    return an array indicating whether each element is no greater than the bound. \n    \"\"\"\n    ret = [False for i in range(len(arr))]\n    for i in range(len(arr)):\n        ret[i] = arr[i] <= bound\n    return ret\n", "prompt_token_1": 802, "completion_token_1": 319}
{"test_name": "reverse_and_concat", "response_0": "def reverse_and_concat(a):\n    \"\"\"\n    Reverse the input array and concatenate it to the original array.\n    \"\"\"\n    b = []\n    for i in range(len(a)):\n        b.append(a[len(a)-1-i])\n    return a + b\n", "prompt_token_0": 720, "completion_token_0": 352, "response_1": "import numpy as np\n\ndef reverse_and_concat(a):\n    \"\"\"\n    Reverse the input array and concatenate it to the original array using numpy.\n    \"\"\"\n    a_np = np.array(a)\n    b_np = np.flip(a_np)\n    return np.concatenate((a_np, b_np))\n", "prompt_token_1": 731, "completion_token_1": 400}
{"test_name": "array_round", "response_0": "def array_round(arr):\n    \"\"\"\n    Round every element in the array to the nearest integer.\n    \"\"\"\n    import math\n    ret = [0 for i in range(len(arr))]\n    for i in range(len(arr)):\n        int_part = math.floor(arr[i])\n        condition_less_than_half = (arr[i] - int_part < 0.5)\n        # Use oblivious assignment: if the condition is true, use int_part, otherwise use int_part + 1\n        ret[i] = condition_less_than_half * int_part + (1 - condition_less_than_half) * (int_part + 1)\n    return ret\n", "prompt_token_0": 1444, "completion_token_0": 508, "response_1": "def array_round(arr):\n    \"\"\"\n    Round every element in the array to the nearest integer using floor and conditional logic.\n    \"\"\"\n    import math\n    ret = [0 for i in range(len(arr))]\n    for i in range(len(arr)):\n        int_part = math.floor(arr[i])\n        ret[i] = int_part if arr[i] - int_part < 0.5 else int_part + 1\n    return ret\n", "prompt_token_1": 838, "completion_token_1": 456}
{"test_name": "array_greater_eq", "response_0": "def array_greater_eq(arr, brr):\n    \"\"\"\n    For the two input arrays arr and brr, return an array ret with the same size. \n    For index i, if arr[i] >= brr[i], ret[i] will be set to 1, otherwise ret[i] will be set to 0. \n    The two input arrays are guaranteed to have the same length. \n    \"\"\"\n    ret = [0 for i in range(len(arr))]\n    for i in range(len(arr)):\n        condition = arr[i] >= brr[i]\n        ret[i] = 1 * condition + 0 * (not condition)\n    return ret\n", "prompt_token_0": 1624, "completion_token_0": 658, "response_1": "def array_greater_eq(arr, brr):\n    \"\"\"\n    For the two input arrays arr and brr, return an array ret with the same size. \n    For index i, if arr[i]>=brr[i], ret[i] will be set to 1, otherwise ret[i] will be set to 0. \n    The two input arrays are guaranteed to have the same length. \n    \"\"\"\n    ret = [0 for i in range(len(arr))]\n    for i in range(len(arr)):\n        condition = arr[i] >= brr[i]\n        ret[i] = condition * 1 + (1 - condition) * 0\n    return ret\n", "prompt_token_1": 1622, "completion_token_1": 717}
{"test_name": "reverse", "response_0": "def reverse(arr):\n    \"\"\"\n    Reverse the array. \n    \"\"\"\n    ret = [0 for i in range(len(arr))]\n    for i in range(len(arr)):\n        ret[i] = arr[len(arr)-1-i]\n    return ret\n", "prompt_token_0": 729, "completion_token_0": 286, "response_1": "def reverse(arr):\n    \"\"\"\n    Reverse the array. \n    \"\"\"\n    ret = [0 for i in range(len(arr))]\n    for i in range(len(arr)):\n        ret[i] = arr[len(arr)-1-i]\n    return ret\n", "prompt_token_1": 729, "completion_token_1": 286}
{"test_name": "indicate_negative", "response_0": "def indicate_negative(arr):\n    \"\"\"\n    For the given array, return an array with the same size. \n    If one element in the input array is negative, \n    then the corresponding element in the returned array will be 1, \n    otherwise the element in the returned array will be 0. \n    \"\"\"\n    ret = [0 for i in range(len(arr))]\n    for i in range(len(arr)):\n        condition_negative = (arr[i] < 0)\n        ret[i] = condition_negative * 1 + (not condition1) * 0\n    return ret\n", "prompt_token_0": 1567, "completion_token_0": 565, "response_1": "def indicate_negative(arr):\n    \"\"\"\n    For the given array, return an array with the same size. \n    If one element in the input array is negative, \n    then the corresponding element in the returned array will be 1, \n    otherwise the element in the returned array will be 0. \n    \"\"\"\n    ret = [0 for i in range(len(arr))]\n    for i in range(len(arr)):\n        condition = (arr[i] < 0)\n        ret[i] = condition * 1 + (1 - condition) * 0\n    return ret\n", "prompt_token_1": 1571, "completion_token_1": 611}
{"test_name": "max_sub_sequence", "response_0": "def max_sub_sequence(arr):\n    \"\"\"\n    Use dynamic programming to find the sum of max continuous subsequence of the input array.\n    \"\"\"\n    partial_max = [0] * len(arr)\n    suffix_max = [0] * len(arr)\n    partial_max[0] = arr[0]\n    suffix_max[0] = arr[0]\n    for i in range(1, len(arr)):\n        condition_suffix_positive = (suffix_max[i-1] >= 0)\n        suffix_max[i] = condition_suffix_positive * (suffix_max[i-1] + arr[i]) + (1 - condition_suffix_positive) * arr[i]\n\n        condition_partial_greater = (partial_max[i-1] >= suffix_max[i])\n        partial_max[i] = condition_partial_greater * partial_max[i-1] + (1 - condition_partial_greater) * suffix_max[i]\n    \n    return partial_max[len(arr)-1]\n", "prompt_token_0": 1731, "completion_token_0": 886, "response_1": "def max_sub_sequence(arr):\n    \"\"\"\n    Use dynamic programming to find the sum of max continuous subsequence of the input array.\n    \"\"\"\n    partial_max = [0 for i in range(len(arr))]\n    suffix_max = [0 for i in range(len(arr))]\n    partial_max[0] = arr[0]\n    suffix_max[0] = arr[0]\n    for i in range(1, len(arr)):\n        # Oblivious transformation of the if-else statements\n        suffix_condition = (suffix_max[i-1] >= 0)\n        suffix_max[i] = suffix_condition * (suffix_max[i-1] + arr[i]) + (1 - suffix_condition) * arr[i]\n        \n        partial_condition = (partial_max[i-1] >= suffix_max[i])\n        partial_max[i] = partial_condition * partial_max[i-1] + (1 - partial_condition) * suffix_max[i]\n        \n    return partial_max[len(arr) - 1]\n", "prompt_token_1": 1740, "completion_token_1": 834}
{"test_name": "compare_and_select", "response_0": "def compare_and_select(a, b):\n    \"\"\"\n    Compare the two arrays elementwise, \n    and save the larger value into the returned array. \n    \"\"\"\n    ret_array = [0] * len(a)  # Create a list of zeros with the same length as `a`\n    for i in range(len(a)):\n        condition = (a[i] > b[i])  # Condition for selecting a[i] over b[i]\n        ret_array[i] = condition * a[i] + (1 - condition) * b[i]  # Oblivious selection\n\n    return ret_array\n", "prompt_token_0": 1485, "completion_token_0": 600, "response_1": "def compare_and_select(a, b):\n    \"\"\"\n    Compare the two arrays elementwise, \n    and save the larger value into the returned array. \n    \"\"\"\n    ret_array = [0] * len(a)\n    for i in range(len(a)):\n        condition = (a[i] > b[i])\n        ret_array[i] = condition * a[i] + (1 - condition) * b[i]\n\n    return ret_array\n", "prompt_token_1": 1455, "completion_token_1": 547}
{"test_name": "count_element_frequency", "response_0": "def count_element_frequency(l):\n    \"\"\"\n    Return an array with the same size of the original array, \n    each position of which records the number of occurrences of the element at the same position. \n    \"\"\"\n    ret = []\n    for i in range(len(l)):\n        ret.append(0)\n    for i in range(len(l)):\n        for j in range(len(l)):\n            condition = (l[j] == l[i])\n            ret[i] = ret[i] + condition\n    return ret\n", "prompt_token_0": 1495, "completion_token_0": 621, "response_1": "def count_element_frequency(l):\n    \"\"\"\n    Return an array with the same size of the original array, \n    each position of which records the number of occurrences of the element at the same position. \n    \"\"\"\n    ret = [0 for i in range(len(l))]\n    for i in range(len(l)):\n        for j in range(len(l)):\n            condition = (l[j] == l[i])  # Oblivious condition checking equality\n            ret[i] = ret[i] + condition  # Increment ret[i] if condition is true (i.e., l[j] == l[i])\n    return ret\n", "prompt_token_1": 1489, "completion_token_1": 518}
{"test_name": "array_or", "response_0": "def array_or(a, b):\n    \"\"\"\n    Compute the elementwise OR of the two input vectors. \n    \"\"\"\n    ret = [0 for i in range(len(a))]\n    for i in range(len(ret)):\n        ret[i] = a[i] or b[i]\n    return ret\n", "prompt_token_0": 757, "completion_token_0": 265, "response_1": "def array_or(a, b):\n    \"\"\"\n    Compute the elementwise OR of the two input vectors. \n    \"\"\"\n    ret = [0 for i in range(len(a))]\n    for i in range(len(ret)):\n        ret[i] = a[i] or b[i]\n    return ret\n", "prompt_token_1": 757, "completion_token_1": 317}
{"test_name": "stock_predicator", "response_0": "def stock_predicator(days):\n    \"\"\"\n    Given the stock price in the next few days (at least 3 days).\n    Use dynamic programming to find two days,\n    such that buying on the earlier day and selling on the later day is the most profitable.\n    If all choices cause negative profits, you should return 0.\n    \"\"\"\n    lowest = [0 for i in range(len(days))]\n    partial_max = [0 for i in range(len(days))]\n    lowest[0] = days[0]\n    for i in range(1, len(days)):\n        lowest[i] = min(lowest[i-1], days[i])\n        partial_max[i] = max(partial_max[i-1], days[i] - lowest[i-1])\n    return partial_max[len(days) - 1]\n", "prompt_token_0": 1109, "completion_token_0": 703, "response_1": "def stock_predicator(days):\n    \"\"\"\n    Given the stock price in the next few days (at least 3 days).\n    Use dynamic programming to find two days, \n    such that buying on the earlier day and selling on the later day is the most profitable.\n    If all choices cause negative profits, you should return 0.\n    \"\"\"\n    lowest = [0] * len(days)  # Use multiplication for list initialization\n    partial_max = [0] * len(days)\n    lowest[0] = days[0]\n    for i in range(1, len(days)):\n        condition_1 = (lowest[i-1] <= days[i])\n        lowest[i] = condition_1 * lowest[i-1] + (1 - condition_1) * days[i]\n        \n        condition_2 = (partial_max[i-1] >= days[i] - lowest[i-1])\n        partial_max[i] = condition_2 * partial_max[i-1] + (1 - condition_2) * (days[i] - lowest[i-1])\n\n    return partial_max[len(days)-1]\n", "prompt_token_1": 1865, "completion_token_1": 996}
{"test_name": "len5_inc_array", "response_0": "def len5_inc_array(init):\n    \"\"\"\n    Return an increase-by-one array with given initial element and length 5.\n    \"\"\"\n    ret = []\n    for i in range(5):\n        ret.append(init + i)\n    return ret\n", "prompt_token_0": 712, "completion_token_0": 310, "response_1": "def len5_inc_array(init):\n    \"\"\"\n    Return an increase-by-one array with given initial element and length 5.\n    \"\"\"\n    ret = []\n    for i in range(5):\n        ret.append(init + i)\n    return ret\n", "prompt_token_1": 712, "completion_token_1": 234}
{"test_name": "cut_first_five", "response_0": "def cut_first_five(arr):\n    \"\"\"\n    Return the array composed of the first 5 elements of the input array. \n    If the input array does not have 5 elements, pad with 0.\n    \"\"\"\n    ret = [0 for i in range(5)]\n    for i in range(min(5, len(arr))):\n        ret[i] = arr[i]\n    return ret\n\n", "prompt_token_0": 817, "completion_token_0": 408, "response_1": "def cut_first_five(arr):\n    \"\"\"\n    Return the array composed of the first 5 elements of the input array. \n    If the input array does not have 5 elements, pad with 0.\n    \"\"\"\n    ret = [0 for i in range(5)]\n    for i in range(min(5, len(arr))):\n        ret[i] = arr[i]\n    return ret\n\n", "prompt_token_1": 817, "completion_token_1": 354}
{"test_name": "max_pooling_1d", "response_0": "def max_pooling_1d(vec, step):\n    \"\"\"\n    Do 1-dimensional max pooling on vec with step. \n    Ignoring the remaining elements in the vector.\n    \"\"\"\n    ret_length = len(vec) // step\n    ret = [0 for i in range(ret_length)]\n    for i in range(len(ret)):\n        max_elem = vec[i * step]\n        for j in range(step):\n            # Oblivious condition to update max_elem\n            condition = (vec[i * step + j] > max_elem)\n            max_elem = condition * vec[i * step + j] + (1 - condition) * max_elem\n        ret[i] = max_elem\n    return ret\n", "prompt_token_0": 1563, "completion_token_0": 651, "response_1": "def max_pooling_1d(vec, step):\n    \"\"\"\n    Do 1-dimensional max pooling on vec with step. \n    Ignoring the remaining elements in the vector.\n    \"\"\"\n    ret_length = len(vec) // step\n    ret = [0 for i in range(ret_length)]\n    for i in range(len(ret)):\n        max_value = vec[i * step]\n        for j in range(step):\n            max_value = (vec[i * step + j] > max_value) * vec[i * step + j] + (vec[i * step + j] <= max_value) * max_value\n        ret[i] = max_value\n    return ret\n", "prompt_token_1": 1571, "completion_token_1": 674}
{"test_name": "array_greater", "response_0": "def array_greater(arr, brr):\n    \"\"\"\n    For the two input arrays arr and brr, return an array ret with the same size. \n    For index i, if arr[i]>brr[i], ret[i] will be set to 1, otherwise ret[i] will be set to 0. \n    The two input arrays are guaranteed to have the same length. \n    \"\"\"\n    ret = [0 for i in range(len(arr))]\n    for i in range(len(arr)):\n        condition = (arr[i] > brr[i])   # The condition for setting ret[i] to 1 is arr[i] > brr[i]\n        ret[i] = condition * 1 + (1 - condition) * 0  # Oblivious assignment: 1 if condition is True, 0 otherwise\n        \n    return ret\n", "prompt_token_0": 1641, "completion_token_0": 712, "response_1": "def array_greater(arr, brr):\n    \"\"\"\n    For the two input arrays arr and brr, return an array ret with the same size. \n    For index i, if arr[i] > brr[i], ret[i] will be set to 1, otherwise ret[i] will be set to 0. \n    The two input arrays are guaranteed to have the same length. \n    \"\"\"\n    ret = [0 for i in range(len(arr))]\n    for i in range(len(arr)):\n        condition = arr[i] > brr[i]\n        ret[i] = condition * 1 + (1 - condition) * 0\n\n    return ret\n", "prompt_token_1": 1645, "completion_token_1": 673}
{"test_name": "dumb_concat", "response_0": "def dumb_concat(arr, brr):\n    \"\"\"\n    Concatenate the second array to the first array in a dumb way.\n    \"\"\"\n    length = len(arr) + len(brr)\n    ret = [0 for i in range(length)]\n    for i in range(len(arr)):\n        ret[i] = arr[i]\n    for j in range(len(brr)):\n        ret[len(arr) + j] = brr[j]\n    return ret\n", "prompt_token_0": 848, "completion_token_0": 436, "response_1": "def dumb_concat(arr, brr):\n    \"\"\"\n    Concatenate the second array to the first array in a dumb way.\n    \"\"\"\n    length = len(arr) + len(brr)\n    ret = [0 for i in range(length)]\n    for i in range(len(arr)):\n        ret[i] = arr[i]\n    for j in range(len(brr)):\n        ret[len(arr) + j] = brr[j]\n    return ret\n", "prompt_token_1": 848, "completion_token_1": 449}
{"test_name": "indicator_if_else", "response_0": "def indicator_if_else(a, b, ind):\n    \"\"\"\n    Return an array c with the same length of a and b. \n    The element of c is set to be the corresponding element of a if the indicator is 1, \n    and is set to be the corresponding element of b if the  indicator is 0.\n    \"\"\"\n    c = [0 for i in range(len(ind))]\n    for i in range(len(ind)):\n        c[i] = ind[i] * a[i] + (1 - ind[i]) * b[i]\n    return c\n", "prompt_token_0": 1574, "completion_token_0": 624, "response_1": "def indicator_if_else(a, b, ind):\n    \"\"\"\n    Return an array c with the same length of a and b. \n    The element of c is set to be the corresponding element of a if the indicator is 1, \n    and is set to be the corresponding element of b if the indicator is 0.\n    \"\"\"\n    c = [0 for i in range(len(ind))]\n    for i in range(len(ind)):\n        # Oblivious transfer: if ind[i] is 1, take a[i], otherwise take b[i]\n        c[i] = ind[i] * a[i] + (1 - ind[i]) * b[i]\n    return c\n", "prompt_token_1": 1573, "completion_token_1": 644}
{"test_name": "elementwise_multiplication", "response_0": "def elementwise_multiplication(a, b):\n    \"\"\"\n    Compute the elementwise multiplication of the two input vectors. \n    \"\"\"\n    ret = [0 for i in range(len(a))]\n    for i in range(len(ret)):\n        ret[i] = a[i] * b[i]\n    return ret\n", "prompt_token_0": 761, "completion_token_0": 339, "response_1": "def elementwise_multiplication(a, b):\n    \"\"\"\n    Compute the elementwise multiplication of the two input vectors. \n    \"\"\"\n    ret = [0 for i in range(len(a))]\n    for i in range(len(ret)):\n        ret[i] = a[i] * b[i]\n    return ret\n", "prompt_token_1": 761, "completion_token_1": 297}
{"test_name": "get_subarr_by_indices", "response_0": "def get_subarr_by_indices(a, indices):\n    \"\"\"\n    Get the subarray of the input array indicated by the indices. \n    The inputs are guaranteed to be legal.\n    \"\"\"\n    ret = [0 for i in range(len(indices))]\n    for i in range(len(indices)):\n        ret[i] = a[indices[i]]\n    return ret\n", "prompt_token_0": 795, "completion_token_0": 336, "response_1": "def get_subarr_by_indices(a, indices):\n    \"\"\"\n    Get the subarray of the input array indicated by the indices. \n    The inputs are guaranteed to be legal.\n    \"\"\"\n    ret = [0 for i in range(len(indices))]\n    for i in range(len(indices)):\n        ret[i] = a[indices[i]]\n    return ret\n", "prompt_token_1": 795, "completion_token_1": 373}
{"test_name": "inc_array", "response_0": "def inc_array(num):\n    \"\"\"\n    Return an array with length num and elements 1 to num. \n    The input is guaranteed to be a cleartext positive integer.\n    \"\"\"\n    result = []\n    for i in range(num):\n        result.append(i + 1)\n    return result\n", "prompt_token_0": 731, "completion_token_0": 300, "response_1": "def inc_array(num):\n    \"\"\"\n    Return an array with length num and elements 1 to num. \n    The input is guaranteed to be a cleartext positive integer.\n    \"\"\"\n    result = []\n    for i in range(num):\n        result.append(i + 1)\n    return result\n", "prompt_token_1": 731, "completion_token_1": 269}
{"test_name": "cut_last_five", "response_0": "def cut_last_five(arr):\n    \"\"\"\n    Return the array composed of the last 5 elements of the input array. \n    If the input array does not have 5 elements, pad with 0 (at the beginning).\n    \"\"\"\n    ret = [0 for i in range(5)]\n    for i in range(min(5, len(arr))):\n        ret[4 - i] = arr[len(arr) - 1 - i]\n    return ret\n\n", "prompt_token_0": 851, "completion_token_0": 365, "response_1": "def cut_last_five(arr):\n    \"\"\"\n    Return the array composed of the last 5 elements of the input array. \n    If the input array does not have 5 elements, pad with 0 (at the beginning).\n    \"\"\"\n    ret = []\n    for i in range(5):\n        ret.append(0)\n    for i in range(min(5, len(arr))):\n        ret[4-i] = arr[len(arr)-1-i]\n    return ret\n", "prompt_token_1": 846, "completion_token_1": 490}
{"test_name": "average_pooling_1d", "response_0": "def average_pooling_1d(vec, step):\n    \"\"\"\n    Do 1-dimensional average pooling on vec with step. \n    Ignoring the remaining elements in the vector.\n    \"\"\"\n    ret_length = len(vec) // step\n    ret = [0 for i in range(ret_length)]\n    for i in range(len(ret)):\n        avg = 0\n        for j in range(step):\n            avg = avg + vec[i * step + j] / step\n        ret[i] = avg\n    return ret\n", "prompt_token_0": 897, "completion_token_0": 497, "response_1": "def average_pooling_1d(vec, step):\n    \"\"\"\n    Do 1-dimensional average pooling on vec with step. \n    Ignoring the remaining elements in the vector.\n    \"\"\"\n    ret_length = len(vec) // step\n    ret = []\n    for _ in range(ret_length):\n        ret.append(0)\n    for i in range(len(ret)):\n        avg = 0\n        for j in range(step):\n            avg = avg + vec[i * step + j] / step\n        ret[i] = avg\n    return ret\n", "prompt_token_1": 897, "completion_token_1": 617}
{"test_name": "array_relu", "response_0": "def array_relu(arr):\n    \"\"\"\n    Apply ReLU function elementwisely to the input array.\n    \"\"\"\n    ret = []\n    for i in range(len(arr)):\n        condition = (arr[i] >= 0)  # Create a boolean condition for each element\n        ret.append(condition * arr[i] + (1 - condition) * 0)  # Use condition to select between arr[i] and 0\n\n    return ret\n", "prompt_token_0": 1392, "completion_token_0": 435, "response_1": "def array_relu(arr):\n    \"\"\"\n    Apply ReLU function elementwisely to the input array.\n    \"\"\"\n    ret = [0 for i in range(len(arr))]\n    for i in range(len(arr)):\n        condition = (arr[i] >= 0)\n        ret[i] = condition * arr[i] + (1 - condition) * 0\n    return ret\n", "prompt_token_1": 1372, "completion_token_1": 360}
{"test_name": "move_to_end", "response_0": "def move_to_end(arr, index):\n    \"\"\"\n    Move the element with given index in the array to the end of the array.\n    The index is guaranteed to be legal.\n    \"\"\"\n    temp = arr[index]\n    for i in range(index+1, len(arr)):\n        arr[i-1] = arr[i]\n    arr[len(arr)-1] = temp\n    return arr\n", "prompt_token_0": 815, "completion_token_0": 397, "response_1": "def move_to_end(arr, index):\n    \"\"\"\n    Move the element with given index in the array to the end of the array.\n    The index is guaranteed to be legal.\n    \"\"\"\n    temp = arr[index]\n    for i in range(index+1, len(arr)):\n        arr[i-1] = arr[i]\n    arr[len(arr)-1] = temp\n    return arr\n", "prompt_token_1": 815, "completion_token_1": 360}
{"test_name": "set_to_zero", "response_0": "def set_to_zero(arr, index):\n    \"\"\"\n    Set the element in the input array with given index to zero.\n    The input index is guaranteed to be legal.\n    \"\"\"\n    arr[index] = 0\n    return arr\n\n", "prompt_token_0": 723, "completion_token_0": 213, "response_1": "def set_to_zero(arr, index):\n    \"\"\"\n    Set the element in the input array with given index to zero.\n    The input index is guaranteed to be legal. \n    \"\"\"\n    arr[index] = 0\n    return arr\n\n", "prompt_token_1": 724, "completion_token_1": 210}
{"test_name": "last_partial_sum", "response_0": "def last_partial_sum(arr, n):\n    \"\"\"\n    Return the sum of the last n elements in the input array.\n    n is guaranteed to be legal.\n    \"\"\"\n    ret = 0\n    for i in range(len(arr) - n, len(arr)):\n        ret += arr[i]\n    return ret\n", "prompt_token_0": 769, "completion_token_0": 378, "response_1": "def last_partial_sum(arr, n):\n    \"\"\"\n    Return the sum of the last n elements in the input array.\n    n is guaranteed to be legal.\n    \"\"\"\n    ret = 0\n    for i in range(len(arr) - n, len(arr)):\n        ret += arr[i]\n    return ret\n", "prompt_token_1": 769, "completion_token_1": 301}
{"test_name": "permute_by_indices", "response_0": "def permute_by_indices(a, indices):\n    \"\"\"\n    Permute the input array a by the indices. \n    The i'th element in the returned array will be a[indices[i]]. \n    The input indices are guaranteed to be a legal permutation. \n    \"\"\"\n    ret = [0 for i in range(len(a))]\n    for i in range(len(a)):\n        ret[i] = a[indices[i]]\n    return ret\n", "prompt_token_0": 849, "completion_token_0": 397, "response_1": "def permute_by_indices(a, indices):\n    \"\"\"\n    Permute the input array a by the indices. \n    The i'th element in the returned array will be a[indices[i]]. \n    The input indices are guaranteed to be a legal permutation. \n    \"\"\"\n    ret = [0 for i in range(len(a))]\n    for i in range(len(a)):\n        ret[i] = a[indices[i]]\n    return ret\n", "prompt_token_1": 849, "completion_token_1": 404}
{"test_name": "get_rank", "response_0": "def get_rank(arr, index):\n    \"\"\"\n    Get the rank in the array of the element (how many elements are smaller than the element) with given index. \n    \"\"\"\n    rank = 0\n    for item in arr:\n        # Convert the if-condition to an oblivious form using a condition expression.\n        rank = rank + (item < arr[index])\n    return rank\n", "prompt_token_0": 1373, "completion_token_0": 453, "response_1": "def get_rank(arr, index):\n    \"\"\"\n    Get the rank in the array of the element (how many elements are smaller than the element) with given index.\n    \"\"\"\n    rank = 0\n    for item in arr:\n        # Convert the if condition to an oblivious form\n        condition = (item < arr[index])\n        rank += condition  # Increment rank if the condition is true, equivalent to if item < arr[index]: rank += 1\n    return rank\n", "prompt_token_1": 1373, "completion_token_1": 460}
{"test_name": "interchange_by_indices", "response_0": "def interchange_by_indices(arr, index1, index2):\n    \"\"\"\n    Interchange the two elements in the array with given indices. \n    The input indices are guaranteed to be legal. \n    \"\"\"\n    temp = arr[index1]\n    arr[index1] = arr[index2]\n    arr[index2] = temp\n    return arr\n", "prompt_token_0": 785, "completion_token_0": 326, "response_1": "def interchange_by_indices(arr, index1, index2):\n    \"\"\"\n    Interchange the two elements in the array with given indices. \n    The input indices are guaranteed to be legal. \n    \"\"\"\n    temp = arr[index1]\n    arr[index1] = arr[index2]\n    arr[index2] = temp\n    return arr\n", "prompt_token_1": 785, "completion_token_1": 319}
{"test_name": "increase_by", "response_0": "def increase_by(arr, index, k):\n    \"\"\"\n    Increase the element arr[index] in the array arr by k.\n    \"\"\"\n    arr[index] = arr[index] + k\n    return arr\n\n", "prompt_token_0": 705, "completion_token_0": 220, "response_1": "def increase_by(arr, index, k):\n    \"\"\"\n    Increase the element arr[index] in the array arr by k.\n    \"\"\"\n    arr[index] = arr[index] + k\n    return arr\n", "prompt_token_1": 705, "completion_token_1": 198}
{"test_name": "retrieve_by_index", "response_0": "def retrieve_by_index(arr, index):\n    \"\"\"\n    Retrieve the element in the array by index.\n    The input index is guaranteed to be legal. \n    \"\"\"\n    return arr[index]\n\n", "prompt_token_0": 691, "completion_token_0": 208, "response_1": "def retrieve_by_index(arr, index):\n    \"\"\"\n    Retrieve the element in the array by index.\n    The input index is guaranteed to be legal.\n    \"\"\"\n    return arr[index]\n\n", "prompt_token_1": 690, "completion_token_1": 218}
{"test_name": "scale_by", "response_0": "def scale_by(arr, index, k):\n    \"\"\"\n    Multiply the element arr[index] in the array arr by k.\n    \"\"\"\n    arr[index] = arr[index] * k\n    return arr\n", "prompt_token_0": 705, "completion_token_0": 295, "response_1": "def scale_by(arr, index, k):\n    \"\"\"\n    Multiply the element arr[index] in the array arr by k.\n    \"\"\"\n    arr[index] = arr[index] * k\n    return arr\n\n", "prompt_token_1": 705, "completion_token_1": 226}
{"test_name": "take_opposite_to", "response_0": "def take_opposite_to(arr, index):\n    \"\"\"\n    Take opposite to the element in the array with given index. \n    The input index is guaranteed to be legal. \n    \"\"\"\n    arr[index] = -arr[index]\n    return arr\n\n", "prompt_token_0": 730, "completion_token_0": 260, "response_1": "def take_opposite_to(arr, index):\n    \"\"\"\n    Take opposite to the element in the array with given index. \n    The input index is guaranteed to be legal. \n    \"\"\"\n    arr[index] = -arr[index]\n    return arr\n", "prompt_token_1": 730, "completion_token_1": 209}
{"test_name": "array_rank", "response_0": "def array_rank(l):\n    \"\"\"\n    Return an array with the same size of the original array, \n    each position of which records the number of elements smaller than the element at the same position. \n    \"\"\"\n    ret = [0 for i in range(len(l))]\n    for i in range(len(l)):\n        for j in range(len(l)):\n            condition = (l[j] < l[i])  # Condition to check if current element is smaller\n            ret[i] += condition         # Increment ret[i] if condition is true\n    return ret\n", "prompt_token_0": 1488, "completion_token_0": 584, "response_1": "def array_rank(l):\n    \"\"\"\n    Return an array with the same size of the original array, \n    each position of which records the number of elements smaller than the element at the same position. \n    \"\"\"\n    ret = [0 for i in range(len(l))]\n    for i in range(len(l)):\n        for j in range(len(l)):\n            # Oblivious transformation of the if statement\n            condition = (l[j] < l[i])\n            ret[i] += condition\n    return ret\n", "prompt_token_1": 1489, "completion_token_1": 497}
{"test_name": "remove_by_index", "response_0": "def remove_by_index(arr, index):\n    \"\"\"\n    Remove the element in the array by index and return the remaining array. \n    The input index is guaranteed to be legal. \n    \"\"\"\n    ret = [0 for i in range(len(arr)-1)]\n    for i in range(len(arr)-1):\n        condition = (i >= index)\n        ret[i] = arr[i + condition]\n    return ret\n", "prompt_token_0": 1481, "completion_token_0": 442, "response_1": "def remove_by_index(arr, index):\n    \"\"\"\n    Remove the element in the array by index and return the remaining array. \n    The input index is guaranteed to be legal. \n    \"\"\"\n    ret = [0 for i in range(len(arr)-1)]\n    for i in range(len(arr)-1):\n        condition = (i >= index)\n        ret[i] = (1 - condition) * arr[i] + condition * arr[i+1]\n    return ret\n", "prompt_token_1": 1481, "completion_token_1": 543}
{"test_name": "process_by_index", "response_0": "def process_by_index(arr, index, func):\n    \"\"\"\n    Process the element in the input array with given index.\n    The input index is guaranteed to be legal. \n    \"\"\"\n    arr[index] = func(arr[index])\n    return arr\n\n", "prompt_token_0": 727, "completion_token_0": 259, "response_1": "def process_by_index(arr, index, func):\n    \"\"\"\n    Process the element in the input array with given index.\n    The input index is guaranteed to be legal. \n    \"\"\"\n    arr[index] = func(arr[index])\n    return arr\n", "prompt_token_1": 727, "completion_token_1": 261}
{"test_name": "sum_by_indices", "response_0": "def sum_by_indices(arr, indices):\n    \"\"\"\n    Compute the sum of elements in the array with given indices.\n    The input indices are guaranteed to be legal. \n    \"\"\"\n    sum = 0\n    for index in indices:\n        sum += arr[index]\n    return sum\n", "prompt_token_0": 757, "completion_token_0": 303, "response_1": "def sum_by_indices(arr, indices):\n    \"\"\"\n    Compute the sum of elements in the array with given indices.\n    The input indices are guaranteed to be legal. \n    \"\"\"\n    sum = 0\n    for index in indices:\n        sum += arr[index]\n    return sum\n", "prompt_token_1": 757, "completion_token_1": 267}
