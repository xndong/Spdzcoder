Compiler.mpc_math module
========================

Module for math operations.
Implements trigonometric and logarithmic functions.
This has to imported explicitly.

Compiler.mpc_math.abs_fx(x)

   Returns the absolute velue (sfix) of the input.
   Input should have type sfix.

Compiler.mpc_math.atan(x)

   Returns the arctangent (sfix) of any given fractional value.
   Input should have type sfix.

Compiler.mpc_math.acos(x)

   Returns the arccosine (sfix) of any given fractional value.
   Input should have type sfix.

Compiler.mpc_math.asin(x)

   Returns the arcsine (sfix) of any given fractional value.
   Input should have type sfix.

Compiler.mpc_math.cos(x)

   Returns the cosine of any given fractional value.
   Input should have type sfix.

Compiler.mpc_math.floor_fx(x)

   Return the largest sint value not greater than x.
   Input should have type sfix.

Compiler.mpc_math.InvertSqrt(x)

   Reciprocal square root approximation by Lu et al.

Compiler.mpc_math.log_fx(x, b)

   Returns the value of the expression log x with base b where "x" is secret shared. 
   You should use this to compute log with base other than 2.

   Parameters:
      * **x** -- (sfix, sint) secret shared coefficient for log.
      * **b** -- (float) base for log operation.

Compiler.mpc_math.pow_fx(x, y)

   Returns the value of the expression x^y where both inputs are secret shared.
   Inputs should have type sfix.
   You should use this method to implement exponential functions.

Compiler.mpc_math.sin(*args, **kwargs)

   Returns the sine of any given fractional value. 
   Input should have type sfix.

Compiler.mpc_math.sqrt(self, *args, **kwargs)

   Square root. Input should have type sfix.
   Input should have type sfix.

Compiler.mpc_math.tan(x)

   Returns the tangent of any given fractional value.
   Input should have type sfix.

Compiler.mpc_math.tanh(x)

   Hyperbolic tangent. 
   Input should have type sfix.
